<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>橙柚养乐多的博客</title>
  
  <subtitle>记录与领悟</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="https://ferrerobomb.github.io/"/>
  <updated>2022-03-28T16:00:08.317Z</updated>
  <id>https://ferrerobomb.github.io/</id>
  
  <author>
    <name>橙柚养乐多</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode中国版目录</title>
    <link href="https://ferrerobomb.github.io/2099/02/19/leetcode%E4%B8%AD%E5%9B%BD%E7%89%88%E7%9B%AE%E5%BD%95/"/>
    <id>https://ferrerobomb.github.io/2099/02/19/leetcode中国版目录/</id>
    <published>2099-02-19T15:44:03.000Z</published>
    <updated>2022-03-28T16:00:08.317Z</updated>
    
    <content type="html"><![CDATA[<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><table><thead><tr><th>序号.题目.leetcode地址</th><th>题目.解法.地址</th></tr></thead><tbody><tr><td><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">1. 两数之和</a></td><td><a href="https://ferrerobomb.github.io/2022/01/20/leetcode-1.两数之和/">leetcode-1.两数之和</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">2. 两数相加</a></td><td><a href="https://ferrerobomb.github.io/2022/01/25/leetcode-2.两数相加/">leetcode-2.两数相加</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3. 无重复字符的最长子串</a></td><td><a href="https://ferrerobomb.github.io/2022/01/28/leetcode-3.无重复字符的最长子串/">leetcode-3.无重复字符的最长子串</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/zigzag-conversion/" target="_blank" rel="noopener">6. Z 字形变换</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-6.Z字形变换/">leetcode-6.Z字形变换</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/reverse-integer/" target="_blank" rel="noopener">7. 整数反转</a></td><td><a href="https://ferrerobomb.github.io/2022/01/07/leetcode-7. 整数反转/">leetcode-7. 整数反转</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/palindrome-number/" target="_blank" rel="noopener">9. 回文数</a></td><td><a href="https://ferrerobomb.github.io/2022/02/04/leetcode-9.回文数/">leetcode-9.回文数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/roman-to-integer/" target="_blank" rel="noopener">13. 罗马数字转整数</a></td><td><a href="https://ferrerobomb.github.io/2022/01/05/leetcode-13. 罗马数字转整数/">leetcode-13. 罗马数字转整数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener">14. 最长公共前缀</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">17. 电话号码的字母组合</a></td><td><a href="https://ferrerobomb.github.io/2022/02/24/leetcode-17. 电话号码的字母组合/">leetcode-17. 电话号码的字母组合</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">20. 有效的括号</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-20-有效的括号/">leetcode-20.有效的括号</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">21. 合并两个有序链表</a></td><td><a href="https://ferrerobomb.github.io/2022/02/19/leetcode-21.合并两个有序链表/">leetcode-21.合并两个有序链表</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/generate-parentheses/" target="_blank" rel="noopener">22. 括号生成</a></td><td><a href="https://ferrerobomb.github.io/2022/01/22/leetcode-22.括号生成/">leetcode-22.括号生成</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">26. 删除有序数组中的重复项</a></td><td><a href="https://ferrerobomb.github.io/2022/03/02/leetcode-26. 删除有序数组中的重复项/">leetcode-26. 删除有序数组中的重复项</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/remove-element/" target="_blank" rel="noopener">27. 移除元素</a></td><td><a href="https://ferrerobomb.github.io/2022/03/12/leetcode-27. 移除元素/">leetcode-27. 移除元素</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/implement-strstr/" target="_blank" rel="noopener">28. 实现 strStr()</a></td><td><a href="https://ferrerobomb.github.io/2022/01/06/leetcode-28. 实现 strStr(">leetcode-28. 实现 strStr()</a>/)</td></tr><tr><td><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="noopener">33. 搜索旋转排序数组</a></td><td><a href="https://ferrerobomb.github.io/2022/01/14/leetcode-33.搜索旋转排序数组/">leetcode-33.搜索旋转排序数组</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">34. 在排序数组中查找元素的第一个和最后一个位置</a></td><td><a href="https://ferrerobomb.github.io/2022/01/02/leetcode-34. 在排序数组中查找元素的第一个和最后一个位置/">leetcode-34. 在排序数组中查找元素的第一个和最后一个位置</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/search-insert-position/" target="_blank" rel="noopener">35. 搜索插入位置</a></td><td><a href="https://ferrerobomb.github.io/2022/02/27/leetcode-35. 搜索插入位置/">leetcode-35. 搜索插入位置</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/valid-sudoku" target="_blank" rel="noopener">36. 有效的数独</a></td><td><a href="https://ferrerobomb.github.io/2022/03/11/leetcode-36. 有效的数独/">leetcode-36. 有效的数独</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/multiply-strings/" target="_blank" rel="noopener">43. 字符串相乘</a></td><td><a href="https://ferrerobomb.github.io/2022/02/23/leetcode-43. 字符串相乘/">leetcode-43. 字符串相乘</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">46. 全排列</a></td><td><a href="https://ferrerobomb.github.io/2022/03/01/leetcode-46. 全排列/">leetcode-46. 全排列</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/rotate-image/" target="_blank" rel="noopener">48. 旋转图像</a></td><td><a href="https://ferrerobomb.github.io/2022/01/04/leetcode-48. 旋转图像/">leetcode-48. 旋转图像</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/powx-n/" target="_blank" rel="noopener">50. Pow(x, n)</a></td><td><a href="https://ferrerobomb.github.io/2022/02/28/leetcode-50. Pow(x, n">leetcode-50. Pow(x, n)</a>/)</td></tr><tr><td><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">53. 最大子数组和</a></td><td><a href="https://ferrerobomb.github.io/2022/01/29/leetcode-53.最大子数组和/">leetcode-53. 最大子数组和</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/spiral-matrix/" target="_blank" rel="noopener">54. 螺旋矩阵</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-54-螺旋矩阵/">leetcode-54.螺旋矩阵</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/merge-intervals/" target="_blank" rel="noopener">56. 合并区间</a></td><td><a href="https://ferrerobomb.github.io/2022/01/10/leetcode-56. 合并区间/">leetcode-56. 合并区间</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/length-of-last-word/" target="_blank" rel="noopener">58. 最后一个单词的长度</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/unique-paths/" target="_blank" rel="noopener">62. 不同路径</a></td><td><a href="https://ferrerobomb.github.io/2022/01/21/leetcode-62.不同路径/">leetcode-62.不同路径</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/plus-one/" target="_blank" rel="noopener">66. 加一</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener">70. 爬楼梯</a></td><td><a href="https://ferrerobomb.github.io/2022/01/24/leetcode-70.爬楼梯/">leetcode-70.爬楼梯</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/sort-colors/" target="_blank" rel="noopener">75. 颜色分类</a></td><td><a href="https://ferrerobomb.github.io/2022/01/30/leetcode-75.颜色分类/">leetcode-75.颜色分类</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/subsets/" target="_blank" rel="noopener">78. 子集</a></td><td><a href="https://ferrerobomb.github.io/2022/02/08/leetcode-78.子集/">leetcode-78.子集</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/word-search/" target="_blank" rel="noopener">79. 单词搜索</a></td><td><a href="https://ferrerobomb.github.io/2022/01/23/leetcode-79.单词搜索/">leetcode-79.单词搜索</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener">83. 删除排序链表中的重复元素</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/merge-sorted-array/" target="_blank" rel="noopener">88. 合并两个有序数组</a></td><td><a href="https://ferrerobomb.github.io/2022/02/01/leetcode-88.合并两个有序数组/">leetcode-88.合并两个有序数组</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal" target="_blank" rel="noopener">94. 二叉树的中序遍历</a></td><td><a href="https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-二叉树的遍历/">leetcode-94/144/145-二叉树的遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/" target="_blank" rel="noopener">98. 验证二叉搜索树</a></td><td><a href="https://ferrerobomb.github.io/2022/02/26/leetcode-98. 验证二叉搜索树/">leetcode-98. 验证二叉搜索树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/same-tree/" target="_blank" rel="noopener">100. 相同的树</a></td><td><a href="https://ferrerobomb.github.io/2022/02/22/leetcode-100. 相同的树/">leetcode-100. 相同的树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/symmetric-tree/" target="_blank" rel="noopener">101. 对称二叉树</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">102. 二叉树的层序遍历</a></td><td><a href="https://ferrerobomb.github.io/2022/02/11/leetcode-102.二叉树的层序遍历/">leetcode-102.二叉树的层序遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/pascals-triangle/" target="_blank" rel="noopener">118. 杨辉三角</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-118.杨辉三角/">leetcode-118.杨辉三角</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">136. 只出现一次的数字</a></td><td><a href="https://ferrerobomb.github.io/2022/02/20/leetcode-136.只出现一次的数字/">leetcode-136.只出现一次的数字</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/single-number-ii/" target="_blank" rel="noopener">137. 只出现一次的数字 II</a></td><td><a href="https://ferrerobomb.github.io/2022/01/08/leetcode-137. 只出现一次的数字 II/">leetcode-137. 只出现一次的数字 II</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal" target="_blank" rel="noopener">144. 二叉树的前序遍历</a></td><td><a href="https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-二叉树的遍历/">leetcode-94/144/145-二叉树的遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal" target="_blank" rel="noopener">145. 二叉树的后序遍历</a></td><td><a href="https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-二叉树的遍历/">leetcode-94/144/145-二叉树的遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/compare-version-numbers/" target="_blank" rel="noopener">165. 比较版本号</a></td><td><a href="https://ferrerobomb.github.io/2022/02/07/leetcode-165.比较版本号/">leetcode-165.比较版本号</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/excel-sheet-column-title/" target="_blank" rel="noopener">168. Excel表列名称</a></td><td><a href="https://ferrerobomb.github.io/2022/01/31/leetcode-168.Excel表列名称/">leetcode-168.Excel表列名称</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/excel-sheet-column-number/" target="_blank" rel="noopener">171. Excel 表列序号</a></td><td><a href="https://ferrerobomb.github.io/2022/02/03/leetcode-171.Excel 表列序号/">leetcode-171.Excel 表列序号</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/duplicate-emails/" target="_blank" rel="noopener">182. 查找重复的电子邮箱</a></td><td><a href="https://ferrerobomb.github.io/2022/02/02/leetcode-182.查找重复的电子邮箱/">leetcode-182.查找重复的电子邮箱</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/word-frequency/" target="_blank" rel="noopener">192. 统计词频</a></td><td><a href="https://ferrerobomb.github.io/2022/02/06/leetcode-192.统计词频/">leetcode-192.统计词频</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/valid-phone-numbers/" target="_blank" rel="noopener">193. 有效电话号码</a></td><td><a href="https://ferrerobomb.github.io/2022/03/05/leetcode-193. 有效电话号码/">leetcode-193. 有效电话号码</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/delete-duplicate-emails/" target="_blank" rel="noopener">196. 删除重复的电子邮箱</a></td><td><a href="https://ferrerobomb.github.io/2022/03/09/leetcode-196. 删除重复的电子邮箱/">leetcode-196. 删除重复的电子邮箱</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/house-robber/" target="_blank" rel="noopener">198. 打家劫舍</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-198-打家劫舍/">leetcode-198.打家劫舍</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/happy-number/" target="_blank" rel="noopener">202. 快乐数</a></td><td><a href="https://ferrerobomb.github.io/2022/03/04/leetcode-202. 快乐数/">leetcode-202. 快乐数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">206. 反转链表</a></td><td><a href="https://ferrerobomb.github.io/2022/02/18/leetcode-206.反转链表/">leetcode-206.反转链表</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/contains-duplicate/" target="_blank" rel="noopener">217. 存在重复元素</a></td><td><a href="https://ferrerobomb.github.io/2022/03/10/leetcode-217. 存在重复元素/">leetcode-217. 存在重复元素</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/" target="_blank" rel="noopener">222. 完全二叉树的节点个数</a></td><td><a href="https://ferrerobomb.github.io/2022/02/14/leetcode-222.完全二叉树的节点个数/">leetcode-222.完全二叉树的节点个数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/add-digits/" target="_blank" rel="noopener">258. 各位相加</a></td><td><a href="https://ferrerobomb.github.io/2022/01/03/leetcode-258. 各位相加/">leetcode-258. 各位相加</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/move-zeroes" target="_blank" rel="noopener">283. 移动零</a></td><td><a href="https://ferrerobomb.github.io/2022/02/09/leetcode-283.移动零/">leetcode-283.移动零</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener">322. 零钱兑换</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-322-零钱兑换/">leetcode-322.零钱兑换</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/shuffle-an-array/" target="_blank" rel="noopener">384. 打乱数组</a></td><td><a href="https://ferrerobomb.github.io/2022/03/08/leetcode-384. 打乱数组/">leetcode-384. 打乱数组</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/arithmetic-slices" target="_blank" rel="noopener">413. 等差数列划分</a></td><td><a href="https://ferrerobomb.github.io/2021/08/19/leetcode-413-等差数列划分/">leetcode-413.等差数列划分</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/third-maximum-number/" target="_blank" rel="noopener">414. 第三大的数</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/" target="_blank" rel="noopener">429. N 叉树的层序遍历</a></td><td><a href="https://ferrerobomb.github.io/2022/02/17/leetcode-429.N叉树的层序遍历/">leetcode-429.N叉树的层序遍历</a></td></tr><tr><td>*<a href="https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order/" target="_blank" rel="noopener">440. 字典序的第K小数字</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/add-two-numbers-ii/" target="_blank" rel="noopener">445. 两数相加 II</a></td><td><a href="https://ferrerobomb.github.io/2022/02/10/leetcode-445.两数相加 II/">leetcode-445.两数相加 II</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/base-7/" target="_blank" rel="noopener">504. 七进制数</a></td><td><a href="https://ferrerobomb.github.io/2022/03/07/leetcode-504. 七进制数/">leetcode-504. 七进制数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence" target="_blank" rel="noopener">516. 最长回文子序列</a></td><td><a href="https://ferrerobomb.github.io/2021/08/19/leetcode-516-最长回文子序列/">leetcode-516.最长回文子序列</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/" target="_blank" rel="noopener">559. N 叉树的最大深度</a></td><td><a href="https://ferrerobomb.github.io/2022/02/16/leetcode-559.N叉树的最大深度/">leetcode-559.N叉树的最大深度</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/" target="_blank" rel="noopener">589. N 叉树的前序遍历</a></td><td><a href="https://ferrerobomb.github.io/2022/02/13/leetcode-589.N叉树的前序遍历/">leetcode-589.N叉树的前序遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/" target="_blank" rel="noopener">590. N 叉树的后序遍历</a></td><td><a href="https://ferrerobomb.github.io/2022/02/15/leetcode-590.N叉树的后序遍历/">leetcode-590.N叉树的后序遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/big-countries/" target="_blank" rel="noopener">595. 大的国家</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/" target="_blank" rel="noopener">599. 两个列表的最小索引总和</a></td><td><a href="https://ferrerobomb.github.io/2022/03/14/leetcode-599. 两个列表的最小索引总和/">leetcode-599. 两个列表的最小索引总和</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/construct-string-from-binary-tree/" target="_blank" rel="noopener">606. 根据二叉树创建字符串</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/" target="_blank" rel="noopener">653. 两数之和 IV - 输入 BST</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/baseball-game/" target="_blank" rel="noopener">682. 棒球比赛</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-search/" target="_blank" rel="noopener">704. 二分查找</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/to-lower-case/" target="_blank" rel="noopener">709. 转换成小写字母</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/push-dominoes/" target="_blank" rel="noopener">838. 推多米诺</a></td><td><a href="https://ferrerobomb.github.io/2022/02/21/leetcode-838. 推多米诺/">leetcode-838. 推多米诺</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/sort-an-array/" target="_blank" rel="noopener">912. 排序数组</a></td><td><a href="https://ferrerobomb.github.io/2022/01/13/leetcode-912.排序数组/">leetcode-912.排序数组</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/print-in-order/" target="_blank" rel="noopener">1114. 按序打印</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/remove-sub-folders-from-the-filesystem/" target="_blank" rel="noopener">1233. 删除子文件夹</a></td><td><a href="https://ferrerobomb.github.io/2022/01/09/leetcode-1233. 删除子文件夹/">leetcode-1233. 删除子文件夹</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-to-zero/" target="_blank" rel="noopener">1342. 将数字变成 0 的操作次数</a></td><td><a href="https://ferrerobomb.github.io/2022/01/11/leetcode-1342.将数字变成0的操作次数/">leetcode-1342.将数字变成0的操作次数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/count-of-matches-in-tournament/" target="_blank" rel="noopener">1688. 比赛中的配对次数</a></td><td><a href="https://ferrerobomb.github.io/2022/01/25/leetcode-1688-比赛中的配对次数/">leetcode-1688-比赛中的配对次数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/second-largest-digit-in-a-string/" target="_blank" rel="noopener">1796. 字符串中第二大的数字</a></td><td><a href="https://ferrerobomb.github.io/2022/03/03/leetcode-1796. 字符串中第二大的数字/">leetcode-1796. 字符串中第二大的数字</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/maximum-difference-between-increasing-elements/" target="_blank" rel="noopener">2016. 增量元素之间的最大差值</a></td><td><a href="https://ferrerobomb.github.io/2022/02/25/leetcode-2016. 增量元素之间的最大差值/">leetcode-2016. 增量元素之间的最大差值</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/check-if-all-as-appears-before-all-bs/" target="_blank" rel="noopener">2124. 检查是否所有 A 都在 B 之前</a></td><td><a href="https://ferrerobomb.github.io/2022/01/12/leetcode-2124.检查是否所有A都在B之前/">leetcode-2124.检查是否所有A都在B之前</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/count-elements-with-strictly-smaller-and-greater-elements/" target="_blank" rel="noopener">2148. 元素计数</a></td><td><a href="https://ferrerobomb.github.io/2022/03/06/leetcode-2148. 元素计数/">leetcode-2148. 元素计数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/keep-multiplying-found-values-by-two/" target="_blank" rel="noopener">2154. 将找到的值乘以 2</a></td><td><a href="https://ferrerobomb.github.io/2022/01/31/leetcode-2154.将找到的值乘以2/">leetcode-2154.将找到的值乘以2</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/partition-array-according-to-given-pivot/" target="_blank" rel="noopener">2161. 根据给定数字划分数组</a></td><td><a href="https://ferrerobomb.github.io/2022/03/13/leetcode-2161. 根据给定数字划分数组/">leetcode-2161. 根据给定数字划分数组</a></td></tr><tr><td>面试题30</td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/" target="_blank" rel="noopener">剑指 Offer 32 - II. 从上到下打印二叉树 II</a></td><td><a href="https://ferrerobomb.github.io/2020/02/25/leetcode-面试题32-II-从上到下打印二叉树II/">leetcode-面试题32-II-从上到下打印二叉树II</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/" target="_blank" rel="noopener">剑指 Offer 32 - III. 从上到下打印二叉树 III</a></td><td><a href="https://ferrerobomb.github.io/2020/02/18/leetcode-面试题32-III-从上到下打印二叉树III/">leetcode-面试题32-III-从上到下打印二叉树III</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 37. 序列化二叉树</a></td><td><a href="https://ferrerobomb.github.io/2020/02/17/leetcode-面试题37-序列化二叉树/">leetcode-面试题37-序列化二叉树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 55 - II. 平衡二叉树</a></td><td><a href="https://ferrerobomb.github.io/2020/02/15/leetcode-面试题30-包含min函数的栈/">leetcode-面试题55-II-平衡二叉树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 67. 把字符串转换成整数</a></td><td><a href="https://ferrerobomb.github.io/2020/02/19/leetcode-面试题67-把字符串转换成整数/">leetcode-面试题67-把字符串转换成整数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/" target="_blank" rel="noopener">剑指 Offer 68 - I. 二叉搜索树的最近公共祖先</a></td><td><a href="https://ferrerobomb.github.io/2020/02/24/leetcode-面试题68-I二叉搜索树的最近公共祖先/">leetcode-面试题68-I二叉搜索树的最近公共祖先</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/" target="_blank" rel="noopener">剑指 Offer 68 - II. 二叉树的最近公共祖先</a></td><td><a href="https://ferrerobomb.github.io/2020/02/19/leetcode-面试题68-II二叉树的最近公共祖先/">leetcode-面试题68 - II. 二叉树的最近公共祖先</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/SsGoHC/" target="_blank" rel="noopener">剑指 Offer II 074. 合并区间</a></td><td><a href="https://ferrerobomb.github.io/2022/01/10/leetcode-剑指 Offer II 074. 合并区间/">leetcode-剑指 Offer II 074. 合并区间</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/palindrome-permutation-lcci/" target="_blank" rel="noopener">面试题 01.04. 回文排列</a></td><td><a href="https://ferrerobomb.github.io/2022/01/25/leetcode-面试题01-04-回文排列/">leetcode-面试题01.04.回文排列</a></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-58. 最后一个单词的长度</title>
    <link href="https://ferrerobomb.github.io/2022/03/28/leetcode-58.%20%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/"/>
    <id>https://ferrerobomb.github.io/2022/03/28/leetcode-58. 最后一个单词的长度/</id>
    <published>2022-03-28T15:57:25.000Z</published>
    <updated>2022-03-28T15:57:50.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-58-最后一个单词的长度"><a href="#leetcode-58-最后一个单词的长度" class="headerlink" title="leetcode-58. 最后一个单词的长度"></a>leetcode-58. 最后一个单词的长度</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 最后一个 单词的长度。</p><p>单词 是指仅由字母组成、不包含任何空格字符的最大子字符串。</p><p>示例 1：</p><p>输入：s = “Hello World”<br>输出：5<br>解释：最后一个单词是“World”，长度为5。<br>示例 2：</p><p>输入：s = “   fly me   to   the moon  “<br>输出：4<br>解释：最后一个单词是“moon”，长度为4。<br>示例 3：</p><p>输入：s = “luffy is still joyboy”<br>输出：6<br>解释：最后一个单词是长度为6的“joyboy”。</p><p>提示：</p><p>1 &lt;= s.length &lt;= 104<br>s 仅有英文字母和空格 ‘ ‘ 组成<br>s 中至少存在一个单词</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/length-of-last-word" target="_blank" rel="noopener">https://leetcode-cn.com/problems/length-of-last-word</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLastWord = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = s.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (s[index] === <span class="string">' '</span>) &#123;</span><br><span class="line">    index--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> wordLength = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (index &gt;= <span class="number">0</span> &amp;&amp; s[index] !== <span class="string">' '</span>) &#123;</span><br><span class="line">    wordLength++;</span><br><span class="line">    index--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> wordLength;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLastWord = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 匹配所有单词，放进一个数组</span></span><br><span class="line">  <span class="keyword">let</span> letter = s.match(<span class="regexp">/\w+/g</span>);</span><br><span class="line">  <span class="keyword">return</span> letter[letter.length - <span class="number">1</span>].length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法三</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLastWord = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// trim()去掉字符串头尾的空格</span></span><br><span class="line">  <span class="comment">// split(" ")这种写法不管单词之间有几个空格，一律按一个空格算，所以不会有多余的空格，</span></span><br><span class="line">  <span class="comment">// 不过本题即使有也不影响，因为直接使用at(-1)取最后一个单词</span></span><br><span class="line">  <span class="comment">// 注意 项目中不要使用at()因为兼容性还差很多</span></span><br><span class="line">  <span class="keyword">return</span> s.trim().split(<span class="string">" "</span>).at(<span class="number">-1</span>).length</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-66. 加一</title>
    <link href="https://ferrerobomb.github.io/2022/03/27/leetcode-66.%20%E5%8A%A0%E4%B8%80/"/>
    <id>https://ferrerobomb.github.io/2022/03/27/leetcode-66. 加一/</id>
    <published>2022-03-27T15:58:50.000Z</published>
    <updated>2022-03-28T15:59:00.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-66-加一"><a href="#leetcode-66-加一" class="headerlink" title="leetcode-66. 加一"></a>leetcode-66. 加一</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><p>示例 1：</p><p>输入：digits = [1,2,3]<br>输出：[1,2,4]<br>解释：输入数组表示数字 123。<br>示例 2：</p><p>输入：digits = [4,3,2,1]<br>输出：[4,3,2,2]<br>解释：输入数组表示数字 4321。<br>示例 3：</p><p>输入：digits = [0]<br>输出：[1]</p><p>提示：</p><p>1 &lt;= digits.length &lt;= 100<br>0 &lt;= digits[i] &lt;= 9</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/plus-one" target="_blank" rel="noopener">https://leetcode-cn.com/problems/plus-one</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; digits</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> plusOne = <span class="function"><span class="keyword">function</span>(<span class="params">digits</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = digits.length</span><br><span class="line">  <span class="keyword">let</span> curry = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (digits[i] !== <span class="number">9</span>) &#123;</span><br><span class="line">      ++digits[i]</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">        digits[j] = <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> digits</span><br><span class="line">    &#125;   </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 都为9</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="built_in">Array</span>(len+<span class="number">1</span>).fill(<span class="number">0</span>)</span><br><span class="line">  res[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-682. 棒球比赛</title>
    <link href="https://ferrerobomb.github.io/2022/03/26/leetcode-682.%20%E6%A3%92%E7%90%83%E6%AF%94%E8%B5%9B/"/>
    <id>https://ferrerobomb.github.io/2022/03/26/leetcode-682. 棒球比赛/</id>
    <published>2022-03-26T14:35:50.000Z</published>
    <updated>2022-03-26T14:36:06.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-682-棒球比赛"><a href="#leetcode-682-棒球比赛" class="headerlink" title="leetcode-682. 棒球比赛"></a>leetcode-682. 棒球比赛</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。</p><p>比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表 ops，其中 ops[i] 是你需要记录的第 i 项操作，ops 遵循下述规则：</p><p>整数 x - 表示本回合新获得分数 x<br>“+” - 表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。<br>“D” - 表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。<br>“C” - 表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。<br>请你返回记录中所有得分的总和。</p><p>示例 1：</p><p>输入：ops = [“5”,”2”,”C”,”D”,”+”]<br>输出：30<br>解释：<br>“5” - 记录加 5 ，记录现在是 [5]<br>“2” - 记录加 2 ，记录现在是 [5, 2]<br>“C” - 使前一次得分的记录无效并将其移除，记录现在是 [5].<br>“D” - 记录加 2 * 5 = 10 ，记录现在是 [5, 10].<br>“+” - 记录加 5 + 10 = 15 ，记录现在是 [5, 10, 15].<br>所有得分的总和 5 + 10 + 15 = 30<br>示例 2：</p><p>输入：ops = [“5”,”-2”,”4”,”C”,”D”,”9”,”+”,”+”]<br>输出：27<br>解释：<br>“5” - 记录加 5 ，记录现在是 [5]<br>“-2” - 记录加 -2 ，记录现在是 [5, -2]<br>“4” - 记录加 4 ，记录现在是 [5, -2, 4]<br>“C” - 使前一次得分的记录无效并将其移除，记录现在是 [5, -2]<br>“D” - 记录加 2 * -2 = -4 ，记录现在是 [5, -2, -4]<br>“9” - 记录加 9 ，记录现在是 [5, -2, -4, 9]<br>“+” - 记录加 -4 + 9 = 5 ，记录现在是 [5, -2, -4, 9, 5]<br>“+” - 记录加 9 + 5 = 14 ，记录现在是 [5, -2, -4, 9, 5, 14]<br>所有得分的总和 5 + -2 + -4 + 9 + 5 + 14 = 27<br>示例 3：</p><p>输入：ops = [“1”]<br>输出：1</p><p>提示：</p><p>1 &lt;= ops.length &lt;= 1000<br>ops[i] 为 “C”、”D”、”+”，或者一个表示整数的字符串。整数范围是 [-3 <em> 104, 3 </em> 104]<br>对于 “+” 操作，题目数据保证记录此操作时前面总是存在两个有效的分数<br>对于 “C” 和 “D” 操作，题目数据保证记录此操作时前面总是存在一个有效的分数</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/baseball-game" target="_blank" rel="noopener">https://leetcode-cn.com/problems/baseball-game</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string[]&#125; ops</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> calPoints = <span class="function"><span class="keyword">function</span>(<span class="params">ops</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> points = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ops.length; i++) &#123;</span><br><span class="line">    currentScore = ops[i];</span><br><span class="line">    <span class="keyword">const</span> n = points.length</span><br><span class="line">    <span class="keyword">switch</span>(currentScore) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'+'</span>: </span><br><span class="line">      sum += points[n - <span class="number">1</span>] + points[n - <span class="number">2</span>]</span><br><span class="line">      points.push(points[n - <span class="number">1</span>] + points[n - <span class="number">2</span>]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'D'</span>: </span><br><span class="line">      sum += points[n - <span class="number">1</span>] * <span class="number">2</span></span><br><span class="line">      points.push(points[n - <span class="number">1</span>] * <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'C'</span>: </span><br><span class="line">      sum -= points[n - <span class="number">1</span>]</span><br><span class="line">      points.pop();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>: </span><br><span class="line">      sum += <span class="built_in">Number</span>(currentScore)</span><br><span class="line">      points.push(<span class="built_in">Number</span>(currentScore));</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lastScore = currentScore</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-83. 删除排序链表中的重复元素</title>
    <link href="https://ferrerobomb.github.io/2022/03/25/leetcode-83.%20%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
    <id>https://ferrerobomb.github.io/2022/03/25/leetcode-83. 删除排序链表中的重复元素/</id>
    <published>2022-03-25T15:59:33.000Z</published>
    <updated>2022-03-28T15:59:58.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-83-删除排序链表中的重复元素"><a href="#leetcode-83-删除排序链表中的重复元素" class="headerlink" title="leetcode-83. 删除排序链表中的重复元素"></a>leetcode-83. 删除排序链表中的重复元素</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个已排序的链表的头 head ， 删除所有重复的元素，使每个元素只出现一次 。返回 已排序的链表 。</p><p>示例 1：</p><p>输入：head = [1,1,2]<br>输出：[1,2]<br>示例 2：</p><p>输入：head = [1,1,2,3,3]<br>输出：[1,2,3]</p><p>提示：</p><p>链表中节点数目在范围 [0, 300] 内<br>-100 &lt;= Node.val &lt;= 100<br>题目数据保证链表已经按升序 排列</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"> * @return &#123;ListNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> deleteDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!head) &#123;</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> current = head</span><br><span class="line">  <span class="keyword">while</span>(current.next) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current.val === current.next.val) &#123;</span><br><span class="line">      current.next = current.next.next</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      current = current.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> head</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-661. 图片平滑器</title>
    <link href="https://ferrerobomb.github.io/2022/03/24/leetcode-661.%20%E5%9B%BE%E7%89%87%E5%B9%B3%E6%BB%91%E5%99%A8/"/>
    <id>https://ferrerobomb.github.io/2022/03/24/leetcode-661. 图片平滑器/</id>
    <published>2022-03-24T15:12:48.000Z</published>
    <updated>2022-03-24T15:13:36.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-661-图片平滑器"><a href="#leetcode-661-图片平滑器" class="headerlink" title="leetcode-661. 图片平滑器"></a>leetcode-661. 图片平滑器</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>图像平滑器 是大小为 3 x 3 的过滤器，用于对图像的每个单元格平滑处理，平滑处理后单元格的值为该单元格的平均灰度。</p><p>每个单元格的  平均灰度 定义为：该单元格自身及其周围的 8 个单元格的平均值，结果需向下取整。（即，需要计算蓝色平滑器中 9 个单元格的平均值）。</p><p>如果一个单元格周围存在单元格缺失的情况，则计算平均灰度时不考虑缺失的单元格（即，需要计算红色平滑器中 4 个单元格的平均值）。</p><p>给你一个表示图像灰度的 m x n 整数矩阵 img ，返回对图像的每个单元格平滑处理后的图像 。</p><p>示例 1:</p><p>输入:img = [[1,1,1],[1,0,1],[1,1,1]]<br>输出:[[0, 0, 0],[0, 0, 0], [0, 0, 0]]<br>解释:<br>对于点 (0,0), (0,2), (2,0), (2,2): 平均(3/4) = 平均(0.75) = 0<br>对于点 (0,1), (1,0), (1,2), (2,1): 平均(5/6) = 平均(0.83333333) = 0<br>对于点 (1,1): 平均(8/9) = 平均(0.88888889) = 0<br>示例 2:</p><p>输入: img = [[100,200,100],[200,50,200],[100,200,100]]<br>输出: [[137,141,137],[141,138,141],[137,141,137]]<br>解释:<br>对于点 (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137<br>对于点 (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141<br>对于点 (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138</p><p>提示:</p><p>m == img.length<br>n == img[i].length<br>1 &lt;= m, n &lt;= 200<br>0 &lt;= img[i][j] &lt;= 255</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/image-smoother" target="_blank" rel="noopener">https://leetcode-cn.com/problems/image-smoother</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; img</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> imageSmoother = <span class="function"><span class="keyword">function</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> rows = img.length, columns = img[<span class="number">0</span>].length</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="built_in">Array</span>(rows).fill(<span class="number">0</span>).map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(columns).fill(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; rows; row++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> column = <span class="number">0</span>; column &lt; columns; column++) &#123;</span><br><span class="line">      <span class="comment">// 遍历九宫格</span></span><br><span class="line">      <span class="comment">// num记录格数，sum记录总数</span></span><br><span class="line">      <span class="keyword">let</span> num = <span class="number">0</span>, sum = <span class="number">0</span> </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = row - <span class="number">1</span>; i &lt;= row + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = column - <span class="number">1</span>; j &lt;= column + <span class="number">1</span>; j++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt; rows &amp;&amp; j &gt;= <span class="number">0</span> &amp;&amp; j &lt; columns) &#123;</span><br><span class="line">            num++ </span><br><span class="line">            sum += img[i][j];</span><br><span class="line">          &#125;      </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      res[row][column] = sum / num | <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-440. 字典序的第K小数字</title>
    <link href="https://ferrerobomb.github.io/2022/03/23/leetcode-440.%20%E5%AD%97%E5%85%B8%E5%BA%8F%E7%9A%84%E7%AC%ACK%E5%B0%8F%E6%95%B0%E5%AD%97/"/>
    <id>https://ferrerobomb.github.io/2022/03/23/leetcode-440. 字典序的第K小数字/</id>
    <published>2022-03-23T15:37:50.000Z</published>
    <updated>2022-03-23T15:41:29.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-440-字典序的第K小数字"><a href="#leetcode-440-字典序的第K小数字" class="headerlink" title="*leetcode-440. 字典序的第K小数字"></a>*leetcode-440. 字典序的第K小数字</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定整数 n 和 k，返回  [1, n] 中字典序第 k 小的数字。</p><p>示例 1:</p><p>输入: n = 13, k = 2<br>输出: 10<br>解释: 字典序的排列是 [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9]，所以第二小的数字是 10。<br>示例 2:</p><p>输入: n = 1, k = 1<br>输出: 1</p><p>提示:</p><p>1 &lt;= k &lt;= n &lt;= 109</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order" target="_blank" rel="noopener">https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// debugger</span></span><br><span class="line"><span class="keyword">var</span> findKthNumber = <span class="function"><span class="keyword">function</span>(<span class="params">n, k</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 10叉树</span></span><br><span class="line">  <span class="comment">// 计算当前前缀有多少数=当前数+子树的节点数(小于上限n)</span></span><br><span class="line">  <span class="keyword">let</span> getCount = <span class="function">(<span class="params">prefix, n</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> count =  <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> cur = prefix, next = prefix + <span class="number">1</span>; cur &lt;= n; cur *= <span class="number">10</span>, next *= <span class="number">10</span>) </span><br><span class="line">      count += <span class="built_in">Math</span>.min(next, n + <span class="number">1</span>) - cur;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> p = <span class="number">1</span>; <span class="comment">// 指针</span></span><br><span class="line">  <span class="keyword">let</span> prefix = <span class="number">1</span>; <span class="comment">// 前缀</span></span><br><span class="line">  <span class="keyword">while</span>(p &lt; k) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = getCount(prefix, n); <span class="comment">// 获取当前前缀的数的数量count</span></span><br><span class="line">    <span class="keyword">if</span>(p + count &gt; k) &#123; <span class="comment">// 说明k在当前前缀的范围内</span></span><br><span class="line">      prefix *= <span class="number">10</span>; <span class="comment">// 前缀prefix置为下一个数</span></span><br><span class="line">      p++; <span class="comment">// 指针指向下一个数的位置</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(p + count &lt;= k) &#123; <span class="comment">// 说明k超出当前前缀范围内</span></span><br><span class="line">      prefix++; <span class="comment">// 前缀prefix置为下一个前缀</span></span><br><span class="line">      p += count; <span class="comment">// 指针指向下一个前缀的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> prefix;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(findKthNumber(100,8));</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-414. 第三大的数</title>
    <link href="https://ferrerobomb.github.io/2022/03/22/leetcode-414.%20%E7%AC%AC%E4%B8%89%E5%A4%A7%E7%9A%84%E6%95%B0/"/>
    <id>https://ferrerobomb.github.io/2022/03/22/leetcode-414. 第三大的数/</id>
    <published>2022-03-22T15:20:44.000Z</published>
    <updated>2022-03-23T15:41:53.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-414-第三大的数"><a href="#leetcode-414-第三大的数" class="headerlink" title="leetcode-414. 第三大的数"></a>leetcode-414. 第三大的数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个非空数组，返回此数组中 第三大的数 。如果不存在，则返回数组中最大的数。</p><p>示例 1：</p><p>输入：[3, 2, 1]<br>输出：1<br>解释：第三大的数是 1 。<br>示例 2：</p><p>输入：[1, 2]<br>输出：2<br>解释：第三大的数不存在, 所以返回最大的数 2 。<br>示例 3：</p><p>输入：[2, 2, 3, 1]<br>输出：1<br>解释：注意，要求返回第三大的数，是指在所有不同数字中排第三大的数。<br>此例中存在两个值为 2 的数，它们都排第二。在所有不同数字中排第三大的数为 1 。</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 104<br>-231 &lt;= nums[i] &lt;= 231 - 1</p><p>进阶：你能设计一个时间复杂度 O(n) 的解决方案吗？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/third-maximum-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/third-maximum-number</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> thirdMax = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 非空数组</span></span><br><span class="line">  <span class="keyword">let</span> fistMax = -<span class="literal">Infinity</span>, secondMax = -<span class="literal">Infinity</span>, thirdMax = -<span class="literal">Infinity</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num &gt; fistMax) &#123;</span><br><span class="line">      thirdMax = secondMax;</span><br><span class="line">      secondMax = fistMax;</span><br><span class="line">      fistMax = num;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fistMax &gt; num &amp;&amp; num &gt; secondMax) &#123;</span><br><span class="line">      thirdMax = secondMax;</span><br><span class="line">      secondMax = num;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (secondMax &gt; num &amp;&amp; num &gt; thirdMax) &#123;</span><br><span class="line">      thirdMax = num;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> thirdMax === -<span class="literal">Infinity</span> ? fistMax : thirdMax;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-101. 对称二叉树</title>
    <link href="https://ferrerobomb.github.io/2022/03/21/leetcode-101.%20%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://ferrerobomb.github.io/2022/03/21/leetcode-101. 对称二叉树/</id>
    <published>2022-03-21T13:20:06.000Z</published>
    <updated>2022-03-21T13:21:22.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-101-对称二叉树"><a href="#leetcode-101-对称二叉树" class="headerlink" title="leetcode-101. 对称二叉树"></a>leetcode-101. 对称二叉树</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个二叉树的根节点 root ， 检查它是否轴对称。</p><p>示例 1：</p><p>输入：root = [1,2,2,3,4,4,3]<br>输出：true<br>示例 2：</p><p>输入：root = [1,2,2,null,3,null,3]<br>输出：false</p><p>提示：</p><p>树中节点数目在范围 [1, 1000] 内<br>-100 &lt;= Node.val &lt;= 100</p><p>进阶：你可以运用递归和迭代两种方法解决这个问题吗？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/symmetric-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/symmetric-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isSymmetric = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> check = <span class="function">(<span class="params">leftTree, rightTree</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!leftTree &amp;&amp; !rightTree) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!leftTree || !rightTree) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> leftTree.val === rightTree.val &amp;&amp; check(leftTree.left, rightTree.right) &amp;&amp; check(leftTree.right, rightTree.left)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> check(root, root)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-653. 两数之和 IV - 输入 BST</title>
    <link href="https://ferrerobomb.github.io/2022/03/20/leetcode-653.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%20IV%20-%20%E8%BE%93%E5%85%A5%20BST/"/>
    <id>https://ferrerobomb.github.io/2022/03/20/leetcode-653. 两数之和 IV - 输入 BST/</id>
    <published>2022-03-20T13:22:39.000Z</published>
    <updated>2022-03-21T13:22:57.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-653-两数之和-IV-输入-BST"><a href="#leetcode-653-两数之和-IV-输入-BST" class="headerlink" title="leetcode-653. 两数之和 IV - 输入 BST"></a>leetcode-653. 两数之和 IV - 输入 BST</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉搜索树 root 和一个目标结果 k，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。</p><p>示例 1：</p><p>输入: root = [5,3,6,2,4,null,7], k = 9<br>输出: true<br>示例 2：</p><p>输入: root = [5,3,6,2,4,null,7], k = 28<br>输出: false</p><p>提示:</p><p>二叉树的节点个数的范围是  [1, 104].<br>-104 &lt;= Node.val &lt;= 104<br>root 为二叉搜索树<br>-105 &lt;= k &lt;= 105</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findTarget = <span class="function"><span class="keyword">function</span>(<span class="params">root, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">set</span> = new Set()</span><br><span class="line">  const dfs = function(root, k) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">set</span>.has(k - root.val)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span>.add(root.val)</span><br><span class="line">    return dfs(root.left, k) || dfs(root.right, k)</span><br><span class="line">  &#125;</span><br><span class="line">  return dfs(root, k)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-606. 根据二叉树创建字符串</title>
    <link href="https://ferrerobomb.github.io/2022/03/19/leetcode-606.%20%E6%A0%B9%E6%8D%AE%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://ferrerobomb.github.io/2022/03/19/leetcode-606. 根据二叉树创建字符串/</id>
    <published>2022-03-19T14:19:26.000Z</published>
    <updated>2022-03-19T14:20:00.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-606-根据二叉树创建字符串"><a href="#leetcode-606-根据二叉树创建字符串" class="headerlink" title="leetcode-606. 根据二叉树创建字符串"></a>leetcode-606. 根据二叉树创建字符串</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。</p><p>空节点则用一对空括号 “()” 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。</p><p>示例 1:</p><p>输入: 二叉树: [1,2,3,4]<br>       1<br>     /   \<br>    2     3<br>   /<br>  4     </p><p>输出: “1(2(4))(3)”</p><p>解释: 原本将是“1(2(4)())(3())”，<br>在你省略所有不必要的空括号对之后，<br>它将是“1(2(4))(3)”。<br>示例 2:</p><p>输入: 二叉树: [1,2,3,null,4]<br>       1<br>     /   \<br>    2     3<br>     \<br>      4 </p><p>输出: “1(2()(4))(3)”</p><p>解释: 和第一个示例相似，<br>除了我们不能省略第一个对括号来中断输入和输出之间的一对一映射关系。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/construct-string-from-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/construct-string-from-binary-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> tree2str = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">``</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!root.left &amp;&amp; !root.right) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;root.val&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!root.left) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;root.val&#125;</span>()(<span class="subst">$&#123;tree2str(root.right)&#125;</span>)`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!root.right) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;root.val&#125;</span>(<span class="subst">$&#123;tree2str(root.left)&#125;</span>)`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;root.val&#125;</span>(<span class="subst">$&#123;tree2str(root.left)&#125;</span>)(<span class="subst">$&#123;tree2str(root.right)&#125;</span>)`</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>vscode插件使用与配置大全</title>
    <link href="https://ferrerobomb.github.io/2022/03/19/vscode%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%A4%A7%E5%85%A8/"/>
    <id>https://ferrerobomb.github.io/2022/03/19/vscode插件使用与配置大全/</id>
    <published>2022-03-19T05:58:07.000Z</published>
    <updated>2022-03-19T06:31:55.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode插件使用与配置大全"><a href="#vscode插件使用与配置大全" class="headerlink" title="vscode插件使用与配置大全"></a>vscode插件使用与配置大全</h1><h2 id="通用快捷操作"><a href="#通用快捷操作" class="headerlink" title="通用快捷操作"></a>通用快捷操作</h2><p>log+回车：console.log</p><h2 id="快捷键（导入插件，使用jetbrains快捷键）"><a href="#快捷键（导入插件，使用jetbrains快捷键）" class="headerlink" title="快捷键（导入插件，使用jetbrains快捷键）"></a>快捷键（导入插件，使用jetbrains快捷键）</h2><ul><li>k–kato.intellij-idea-keybindings</li></ul><p>名称: IntelliJ IDEA Keybindings<br>ID: k–kato.intellij-idea-keybindings<br>说明: Port of IntelliJ IDEA Keybindings, including for WebStorm, PyCharm, PHP Storm, etc.<br>版本: 1.5.0<br>发布者: Keisuke Kato<br>VS Marketplace 链接: <a href="https://marketplace.visualstudio.com/items?itemName=k--kato.intellij-idea-keybindings" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=k--kato.intellij-idea-keybindings</a></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul><li>dsznajder.es7-react-js-snippets</li></ul><p>名称: ES7+ React/Redux/React-Native snippets<br>ID: dsznajder.es7-react-js-snippets<br>说明: Extensions for React, React-Native and Redux in JS/TS with ES7+ syntax. Customizable. Built-in integration with prettier.<br>版本: 4.4.3<br>发布者: dsznajder<br>VS Marketplace 链接: <a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets</a></p><p>使用</p><p>rcc+回车：快速生成有状态组件</p><p>rfc+回车：快速生成无状态组件</p><h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><h2 id="tsconfig"><a href="#tsconfig" class="headerlink" title="tsconfig"></a>tsconfig</h2>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://ferrerobomb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-704. 二分查找</title>
    <link href="https://ferrerobomb.github.io/2022/03/18/leetcode-704.%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>https://ferrerobomb.github.io/2022/03/18/leetcode-704. 二分查找/</id>
    <published>2022-03-18T14:07:29.000Z</published>
    <updated>2022-03-18T14:07:41.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-704-二分查找"><a href="#leetcode-704-二分查找" class="headerlink" title="leetcode-704. 二分查找"></a>leetcode-704. 二分查找</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p>示例 1:</p><p>输入: nums = [-1,0,3,5,9,12], target = 9<br>输出: 4<br>解释: 9 出现在 nums 中并且下标为 4<br>示例 2:</p><p>输入: nums = [-1,0,3,5,9,12], target = 2<br>输出: -1<br>解释: 2 不存在 nums 中因此返回 -1</p><p>提示：</p><p>你可以假设 nums 中的所有元素是不重复的。<br>n 将在 [1, 10000]之间。<br>nums 的每个元素都将在 [-9999, 9999]之间。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-search" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-search</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> low = <span class="number">0</span>, high = nums.length - <span class="number">1</span>, mid;</span><br><span class="line">  <span class="keyword">while</span>(low &lt;= high) &#123;</span><br><span class="line">    <span class="comment">// 先求出此轮循环的mid</span></span><br><span class="line">    mid = ((high - low) / <span class="number">2</span> | <span class="number">0</span>) + low</span><br><span class="line">    <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">      <span class="keyword">return</span> mid</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">      high = mid - <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      low = mid + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-14. 最长公共前缀</title>
    <link href="https://ferrerobomb.github.io/2022/03/17/leetcode-14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
    <id>https://ferrerobomb.github.io/2022/03/17/leetcode-14. 最长公共前缀/</id>
    <published>2022-03-17T15:02:58.000Z</published>
    <updated>2022-03-17T15:03:10.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-14-最长公共前缀"><a href="#leetcode-14-最长公共前缀" class="headerlink" title="leetcode-14. 最长公共前缀"></a>leetcode-14. 最长公共前缀</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 “”。</p><p>示例 1：</p><p>输入：strs = [“flower”,”flow”,”flight”]<br>输出：”fl”<br>示例 2：</p><p>输入：strs = [“dog”,”racecar”,”car”]<br>输出：””<br>解释：输入不存在公共前缀。</p><p>提示：</p><p>1 &lt;= strs.length &lt;= 200<br>0 &lt;= strs[i].length &lt;= 200<br>strs[i] 仅由小写英文字母组成</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-common-prefix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-common-prefix</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string[]&#125; strs</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span>(<span class="params">strs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(strs.length == <span class="number">0</span>) </span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">let</span> res = strs[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; strs.length; ++i) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 对当前最大前缀和当前字符串进行遍历，并更新当前最大前缀</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt; res.length &amp;&amp; j &lt; strs[i].length) &#123;</span><br><span class="line">      <span class="keyword">if</span>(res[j] != strs[i][j]) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      j++</span><br><span class="line">    &#125;</span><br><span class="line">    res = res.substring(<span class="number">0</span>, j);</span><br><span class="line">    <span class="keyword">if</span>(res === <span class="string">""</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-709. 转换成小写字母</title>
    <link href="https://ferrerobomb.github.io/2022/03/16/leetcode-709.%20%E8%BD%AC%E6%8D%A2%E6%88%90%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D/"/>
    <id>https://ferrerobomb.github.io/2022/03/16/leetcode-709. 转换成小写字母/</id>
    <published>2022-03-16T14:35:48.000Z</published>
    <updated>2022-03-16T14:43:40.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-709-转换成小写字母"><a href="#leetcode-709-转换成小写字母" class="headerlink" title="leetcode-709. 转换成小写字母"></a>leetcode-709. 转换成小写字母</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串 s ，将该字符串中的大写字母转换成相同的小写字母，返回新的字符串。</p><p>示例 1：</p><p>输入：s = “Hello”<br>输出：”hello”<br>示例 2：</p><p>输入：s = “here”<br>输出：”here”<br>示例 3：</p><p>输入：s = “LOVELY”<br>输出：”lovely”</p><p>提示：</p><p>1 &lt;= s.length &lt;= 100<br>s 由 ASCII 字符集中的可打印字符组成</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/to-lower-case" target="_blank" rel="noopener">https://leetcode-cn.com/problems/to-lower-case</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> toLowerCase = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.toLowerCase()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解2"><a href="#解2" class="headerlink" title="解2"></a>解2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> toLowerCase = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> s) &#123;</span><br><span class="line">    <span class="keyword">const</span> code = char.charCodeAt()</span><br><span class="line">    <span class="comment">// A-Z为65-90</span></span><br><span class="line">    <span class="keyword">if</span> (code &gt;= <span class="number">65</span> &amp;&amp; code &lt;= <span class="number">90</span>) &#123;</span><br><span class="line">      <span class="comment">// 32的二进制为00100000</span></span><br><span class="line">      <span class="comment">// 65-90的二进制码的32位处（从右数第6位）正好都是0，所以进行按位或操作 代替加操作</span></span><br><span class="line">      char = <span class="built_in">String</span>.fromCharCode(code | <span class="number">32</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    res.push(char)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res.join(<span class="string">''</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1114. 按序打印</title>
    <link href="https://ferrerobomb.github.io/2022/03/15/leetcode-1114.%20%E6%8C%89%E5%BA%8F%E6%89%93%E5%8D%B0/"/>
    <id>https://ferrerobomb.github.io/2022/03/15/leetcode-1114. 按序打印/</id>
    <published>2022-03-15T14:25:34.000Z</published>
    <updated>2022-03-15T14:26:36.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1114-按序打印"><a href="#leetcode-1114-按序打印" class="headerlink" title="leetcode-1114. 按序打印"></a>leetcode-1114. 按序打印</h1><p>P.S.了解一下多线程</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个类：</p><p>public class Foo {<br>  public void first() { print(“first”); }<br>  public void second() { print(“second”); }<br>  public void third() { print(“third”); }<br>}<br>三个不同的线程 A、B、C 将会共用一个 Foo 实例。</p><p>线程 A 将会调用 first() 方法<br>线程 B 将会调用 second() 方法<br>线程 C 将会调用 third() 方法<br>请设计修改程序，以确保 second() 方法在 first() 方法之后被执行，third() 方法在 second() 方法之后被执行。</p><p>提示：</p><p>尽管输入中的数字似乎暗示了顺序，但是我们并不保证线程在操作系统中的调度顺序。<br>你看到的输入格式主要是为了确保测试的全面性。</p><p>示例 1：</p><p>输入：nums = [1,2,3]<br>输出：”firstsecondthird”<br>解释：<br>有三个线程会被异步启动。输入 [1,2,3] 表示线程 A 将会调用 first() 方法，线程 B 将会调用 second() 方法，线程 C 将会调用 third() 方法。正确的输出是 “firstsecondthird”。<br>示例 2：</p><p>输入：nums = [1,3,2]<br>输出：”firstsecondthird”<br>解释：<br>输入 [1,3,2] 表示线程 A 将会调用 first() 方法，线程 B 将会调用 third() 方法，线程 C 将会调用 second() 方法。正确的输出是 “firstsecondthird”。</p><p>提示：<br>nums 是 [1, 2, 3] 的一组排列</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/print-in-order" target="_blank" rel="noopener">https://leetcode-cn.com/problems/print-in-order</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger firstJobDone = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger secondJobDone = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">(Runnable printFirst)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// printFirst.run() outputs "first". Do not change or remove this line.</span></span><br><span class="line">        printFirst.run();</span><br><span class="line">        firstJobDone.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">second</span><span class="params">(Runnable printSecond)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(firstJobDone.get() != <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printSecond.run() outputs "second". Do not change or remove this line.</span></span><br><span class="line">        printSecond.run();</span><br><span class="line">        secondJobDone.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">third</span><span class="params">(Runnable printThird)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(secondJobDone.get() != <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printThird.run() outputs "third". Do not change or remove this line.</span></span><br><span class="line">        printThird.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-599. 两个列表的最小索引总和</title>
    <link href="https://ferrerobomb.github.io/2022/03/14/leetcode-599.%20%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E7%9A%84%E6%9C%80%E5%B0%8F%E7%B4%A2%E5%BC%95%E6%80%BB%E5%92%8C/"/>
    <id>https://ferrerobomb.github.io/2022/03/14/leetcode-599. 两个列表的最小索引总和/</id>
    <published>2022-03-14T13:29:18.000Z</published>
    <updated>2022-03-14T13:29:49.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-599-两个列表的最小索引总和"><a href="#leetcode-599-两个列表的最小索引总和" class="headerlink" title="leetcode-599. 两个列表的最小索引总和"></a>leetcode-599. 两个列表的最小索引总和</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>假设 Andy 和 Doris 想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。</p><p>你需要帮助他们用最少的索引和找出他们共同喜爱的餐厅。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设答案总是存在。</p><p>示例 1:</p><p>输入: list1 = [“Shogun”, “Tapioca Express”, “Burger King”, “KFC”]，list2 = [“Piatti”, “The Grill at Torrey Pines”, “Hungry Hunter Steakhouse”, “Shogun”]<br>输出: [“Shogun”]<br>解释: 他们唯一共同喜爱的餐厅是“Shogun”。<br>示例 2:</p><p>输入:list1 = [“Shogun”, “Tapioca Express”, “Burger King”, “KFC”]，list2 = [“KFC”, “Shogun”, “Burger King”]<br>输出: [“Shogun”]<br>解释: 他们共同喜爱且具有最小索引和的餐厅是“Shogun”，它有最小的索引和1(0+1)。</p><p>提示:</p><p>1 &lt;= list1.length, list2.length &lt;= 1000<br>1 &lt;= list1[i].length, list2[i].length &lt;= 30<br>list1[i] 和 list2[i] 由空格 ‘ ‘ 和英文字母组成。<br>list1 的所有字符串都是 唯一 的。<br>list2 中的所有字符串都是 唯一 的。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string[]&#125; list1</span></span><br><span class="line"><span class="comment"> * @param &#123;string[]&#125; list2</span></span><br><span class="line"><span class="comment"> * @return &#123;string[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findRestaurant = <span class="function"><span class="keyword">function</span>(<span class="params">list1, list2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  <span class="keyword">let</span> minIndex = <span class="literal">Infinity</span></span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list1.length; i++) &#123;</span><br><span class="line">    map.set(list1[i], i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list2.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (map.has(list2[i])) &#123;</span><br><span class="line">      <span class="keyword">const</span> j = map.get(list2[i])</span><br><span class="line">      <span class="keyword">if</span> (i+j &lt; minIndex) &#123;</span><br><span class="line">        minIndex = i+j</span><br><span class="line">        res.length = <span class="number">0</span> <span class="comment">// 清空结果</span></span><br><span class="line">        res.push(list2[i])</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i+j === minIndex) &#123;</span><br><span class="line">        res.push(list2[i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-2161. 根据给定数字划分数组</title>
    <link href="https://ferrerobomb.github.io/2022/03/13/leetcode-2161.%20%E6%A0%B9%E6%8D%AE%E7%BB%99%E5%AE%9A%E6%95%B0%E5%AD%97%E5%88%92%E5%88%86%E6%95%B0%E7%BB%84/"/>
    <id>https://ferrerobomb.github.io/2022/03/13/leetcode-2161. 根据给定数字划分数组/</id>
    <published>2022-03-12T16:26:15.000Z</published>
    <updated>2022-03-12T16:26:25.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-2161-根据给定数字划分数组"><a href="#leetcode-2161-根据给定数字划分数组" class="headerlink" title="leetcode-2161. 根据给定数字划分数组"></a>leetcode-2161. 根据给定数字划分数组</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个下标从 0 开始的整数数组 nums 和一个整数 pivot 。请你将 nums 重新排列，使得以下条件均成立：</p><p>所有小于 pivot 的元素都出现在所有大于 pivot 的元素 之前 。<br>所有等于 pivot 的元素都出现在小于和大于 pivot 的元素 中间 。<br>小于 pivot 的元素之间和大于 pivot 的元素之间的 相对顺序 不发生改变。<br>更正式的，考虑每一对 pi，pj ，pi 是初始时位置 i 元素的新位置，pj 是初始时位置 j 元素的新位置。对于小于 pivot 的元素，如果 i &lt; j 且 nums[i] &lt; pivot 和 nums[j] &lt; pivot 都成立，那么 pi &lt; pj 也成立。类似的，对于大于 pivot 的元素，如果 i &lt; j 且 nums[i] &gt; pivot 和 nums[j] &gt; pivot 都成立，那么 pi &lt; pj 。<br>请你返回重新排列 nums 数组后的结果数组。</p><p>示例 1：</p><p>输入：nums = [9,12,5,10,14,3,10], pivot = 10<br>输出：[9,5,3,10,10,12,14]<br>解释：<br>元素 9 ，5 和 3 小于 pivot ，所以它们在数组的最左边。<br>元素 12 和 14 大于 pivot ，所以它们在数组的最右边。<br>小于 pivot 的元素的相对位置和大于 pivot 的元素的相对位置分别为 [9, 5, 3] 和 [12, 14] ，它们在结果数组中的相对顺序需要保留。<br>示例 2：</p><p>输入：nums = [-3,4,3,2], pivot = 2<br>输出：[-3,2,4,3]<br>解释：<br>元素 -3 小于 pivot ，所以在数组的最左边。<br>元素 4 和 3 大于 pivot ，所以它们在数组的最右边。<br>小于 pivot 的元素的相对位置和大于 pivot 的元素的相对位置分别为 [-3] 和 [4, 3] ，它们在结果数组中的相对顺序需要保留。</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 105<br>-106 &lt;= nums[i] &lt;= 106<br>pivot 等于 nums 中的一个元素。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/partition-array-according-to-given-pivot" target="_blank" rel="noopener">https://leetcode-cn.com/problems/partition-array-according-to-given-pivot</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; pivot</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> pivotArray = <span class="function"><span class="keyword">function</span> (<span class="params">nums, pivot</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> left = [], middle = [], right = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; pivot) left.push(num)</span><br><span class="line">    <span class="keyword">if</span> (num === pivot) middle.push(num)</span><br><span class="line">    <span class="keyword">if</span> (num &gt; pivot) right.push(num)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [...left, ...middle, ...right];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-27. 移除元素</title>
    <link href="https://ferrerobomb.github.io/2022/03/12/leetcode-27.%20%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
    <id>https://ferrerobomb.github.io/2022/03/12/leetcode-27. 移除元素/</id>
    <published>2022-03-11T16:14:33.000Z</published>
    <updated>2022-03-12T16:14:53.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-27-移除元素"><a href="#leetcode-27-移除元素" class="headerlink" title="leetcode-27. 移除元素"></a>leetcode-27. 移除元素</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>说明:</p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><p>// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝<br>int len = removeElement(nums, val);</p><p>// 在函数里修改输入数组对于调用者是可见的。<br>// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p><p>示例 1：</p><p>输入：nums = [3,2,2,3], val = 3<br>输出：2, nums = [2,2]<br>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。<br>示例 2：</p><p>输入：nums = [0,1,2,2,3,0,4,2], val = 2<br>输出：5, nums = [0,1,4,0,3]<br>解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p><p>提示：</p><p>0 &lt;= nums.length &lt;= 100<br>0 &lt;= nums[i] &lt;= 50<br>0 &lt;= val &lt;= 100</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-element" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-element</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1-双指针"><a href="#解1-双指针" class="headerlink" title="解1 双指针"></a>解1 双指针</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; val</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = nums.length</span><br><span class="line">  <span class="keyword">let</span> fast = <span class="number">0</span>, slow = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(fast &lt; len) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[fast] !== val) &#123;</span><br><span class="line">      nums[slow] = nums[fast]</span><br><span class="line">      ++slow</span><br><span class="line">    &#125;</span><br><span class="line">    ++fast</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> slow</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-36. 有效的数独</title>
    <link href="https://ferrerobomb.github.io/2022/03/11/leetcode-36.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/"/>
    <id>https://ferrerobomb.github.io/2022/03/11/leetcode-36. 有效的数独/</id>
    <published>2022-03-11T12:53:48.000Z</published>
    <updated>2022-03-11T12:55:39.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-36-有效的数独"><a href="#leetcode-36-有效的数独" class="headerlink" title="leetcode-36. 有效的数独"></a>leetcode-36. 有效的数独</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。</p><p>数字 1-9 在每一行只能出现一次。<br>数字 1-9 在每一列只能出现一次。<br>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）</p><p>注意：</p><p>一个有效的数独（部分已被填充）不一定是可解的。<br>只需要根据以上规则，验证已经填入的数字是否有效即可。<br>空白格用 ‘.’ 表示。</p><p>示例 1：</p><p>输入：board =<br>[[“5”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”]<br>,[“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”]<br>,[“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”]<br>,[“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”]<br>,[“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”]<br>,[“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”]<br>,[“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”]<br>,[“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”]<br>,[“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]<br>输出：true<br>示例 2：</p><p>输入：board =<br>[[“8”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”]<br>,[“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”]<br>,[“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”]<br>,[“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”]<br>,[“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”]<br>,[“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”]<br>,[“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”]<br>,[“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”]<br>,[“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]<br>输出：false<br>解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</p><p>提示：</p><p>board.length == 9<br>board[i].length == 9<br>board[i][j] 是一位数字（1-9）或者 ‘.’</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/valid-sudoku" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-sudoku</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;character[][]&#125; board</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValidSudoku = <span class="function"><span class="keyword">function</span>(<span class="params">board</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 二维数组rows用于记录1-9行中数字1-9出现的次数</span></span><br><span class="line">  <span class="keyword">const</span> rows = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="number">0</span>).map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="number">0</span>));</span><br><span class="line">  <span class="comment">// 二维数组columns用于记录1-9列中数字1-9出现的次数</span></span><br><span class="line">  <span class="keyword">const</span> columns = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="number">0</span>).map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="number">0</span>));</span><br><span class="line">  <span class="comment">// 三维数组subboxes用于记录第1-3行第1-3列的九宫格中数字1-9出现的次数</span></span><br><span class="line">  <span class="keyword">const</span> subboxes = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">0</span>).map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">0</span>).map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="number">0</span>)));</span><br><span class="line">  <span class="comment">// 实际操作中由于index从0开始，所以所有涉及index的数值都需要减一</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; <span class="number">9</span>; row++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> column = <span class="number">0</span>; column &lt; <span class="number">9</span>; column++) &#123;</span><br><span class="line">      <span class="keyword">const</span> item = board[row][column];</span><br><span class="line">      <span class="keyword">if</span> (item !== <span class="string">'.'</span>) &#123;</span><br><span class="line">        <span class="comment">// 注意这里需要-1处理</span></span><br><span class="line">        <span class="keyword">const</span> index = <span class="built_in">Number</span>(item) - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// const index = item.charCodeAt() - '0'.charCodeAt() - 1;</span></span><br><span class="line">        rows[row][index]++;</span><br><span class="line">        columns[column][index]++;</span><br><span class="line">        subboxes[row / <span class="number">3</span> | <span class="number">0</span>][column / <span class="number">3</span> | <span class="number">0</span>][index]++;</span><br><span class="line">        <span class="comment">// 每次增加完之后判断一次，如果不符合要求则返回false</span></span><br><span class="line">        <span class="keyword">if</span> (rows[row][index] &gt; <span class="number">1</span> || columns[column][index] &gt; <span class="number">1</span> || subboxes[row / <span class="number">3</span> | <span class="number">0</span>][column / <span class="number">3</span> | <span class="number">0</span>][index] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>

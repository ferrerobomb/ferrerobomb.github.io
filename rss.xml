<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>橙柚养乐多的博客</title>
  
  <subtitle>记录与领悟</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="https://ferrerobomb.github.io/"/>
  <updated>2022-03-23T15:39:15.582Z</updated>
  <id>https://ferrerobomb.github.io/</id>
  
  <author>
    <name>橙柚养乐多</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode中国版目录</title>
    <link href="https://ferrerobomb.github.io/2099/02/19/leetcode%E4%B8%AD%E5%9B%BD%E7%89%88%E7%9B%AE%E5%BD%95/"/>
    <id>https://ferrerobomb.github.io/2099/02/19/leetcode中国版目录/</id>
    <published>2099-02-19T15:44:03.000Z</published>
    <updated>2022-03-23T15:39:15.582Z</updated>
    
    <content type="html"><![CDATA[<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><table><thead><tr><th>序号.题目.leetcode地址</th><th>题目.解法.地址</th></tr></thead><tbody><tr><td><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">1. 两数之和</a></td><td><a href="https://ferrerobomb.github.io/2022/01/20/leetcode-1.两数之和/">leetcode-1.两数之和</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">2. 两数相加</a></td><td><a href="https://ferrerobomb.github.io/2022/01/25/leetcode-2.两数相加/">leetcode-2.两数相加</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3. 无重复字符的最长子串</a></td><td><a href="https://ferrerobomb.github.io/2022/01/28/leetcode-3.无重复字符的最长子串/">leetcode-3.无重复字符的最长子串</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/zigzag-conversion/" target="_blank" rel="noopener">6. Z 字形变换</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-6.Z字形变换/">leetcode-6.Z字形变换</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/reverse-integer/" target="_blank" rel="noopener">7. 整数反转</a></td><td><a href="https://ferrerobomb.github.io/2022/01/07/leetcode-7. 整数反转/">leetcode-7. 整数反转</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/palindrome-number/" target="_blank" rel="noopener">9. 回文数</a></td><td><a href="https://ferrerobomb.github.io/2022/02/04/leetcode-9.回文数/">leetcode-9.回文数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/roman-to-integer/" target="_blank" rel="noopener">13. 罗马数字转整数</a></td><td><a href="https://ferrerobomb.github.io/2022/01/05/leetcode-13. 罗马数字转整数/">leetcode-13. 罗马数字转整数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener">14. 最长公共前缀</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">17. 电话号码的字母组合</a></td><td><a href="https://ferrerobomb.github.io/2022/02/24/leetcode-17. 电话号码的字母组合/">leetcode-17. 电话号码的字母组合</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">20. 有效的括号</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-20-有效的括号/">leetcode-20.有效的括号</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">21. 合并两个有序链表</a></td><td><a href="https://ferrerobomb.github.io/2022/02/19/leetcode-21.合并两个有序链表/">leetcode-21.合并两个有序链表</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/generate-parentheses/" target="_blank" rel="noopener">22. 括号生成</a></td><td><a href="https://ferrerobomb.github.io/2022/01/22/leetcode-22.括号生成/">leetcode-22.括号生成</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">26. 删除有序数组中的重复项</a></td><td><a href="https://ferrerobomb.github.io/2022/03/02/leetcode-26. 删除有序数组中的重复项/">leetcode-26. 删除有序数组中的重复项</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/remove-element/" target="_blank" rel="noopener">27. 移除元素</a></td><td><a href="https://ferrerobomb.github.io/2022/03/12/leetcode-27. 移除元素/">leetcode-27. 移除元素</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/implement-strstr/" target="_blank" rel="noopener">28. 实现 strStr()</a></td><td><a href="https://ferrerobomb.github.io/2022/01/06/leetcode-28. 实现 strStr(">leetcode-28. 实现 strStr()</a>/)</td></tr><tr><td><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="noopener">33. 搜索旋转排序数组</a></td><td><a href="https://ferrerobomb.github.io/2022/01/14/leetcode-33.搜索旋转排序数组/">leetcode-33.搜索旋转排序数组</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">34. 在排序数组中查找元素的第一个和最后一个位置</a></td><td><a href="https://ferrerobomb.github.io/2022/01/02/leetcode-34. 在排序数组中查找元素的第一个和最后一个位置/">leetcode-34. 在排序数组中查找元素的第一个和最后一个位置</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/search-insert-position/" target="_blank" rel="noopener">35. 搜索插入位置</a></td><td><a href="https://ferrerobomb.github.io/2022/02/27/leetcode-35. 搜索插入位置/">leetcode-35. 搜索插入位置</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/valid-sudoku" target="_blank" rel="noopener">36. 有效的数独</a></td><td><a href="https://ferrerobomb.github.io/2022/03/11/leetcode-36. 有效的数独/">leetcode-36. 有效的数独</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/multiply-strings/" target="_blank" rel="noopener">43. 字符串相乘</a></td><td><a href="https://ferrerobomb.github.io/2022/02/23/leetcode-43. 字符串相乘/">leetcode-43. 字符串相乘</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">46. 全排列</a></td><td><a href="https://ferrerobomb.github.io/2022/03/01/leetcode-46. 全排列/">leetcode-46. 全排列</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/rotate-image/" target="_blank" rel="noopener">48. 旋转图像</a></td><td><a href="https://ferrerobomb.github.io/2022/01/04/leetcode-48. 旋转图像/">leetcode-48. 旋转图像</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/powx-n/" target="_blank" rel="noopener">50. Pow(x, n)</a></td><td><a href="https://ferrerobomb.github.io/2022/02/28/leetcode-50. Pow(x, n">leetcode-50. Pow(x, n)</a>/)</td></tr><tr><td><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">53. 最大子数组和</a></td><td><a href="https://ferrerobomb.github.io/2022/01/29/leetcode-53.最大子数组和/">leetcode-53. 最大子数组和</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/spiral-matrix/" target="_blank" rel="noopener">54. 螺旋矩阵</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-54-螺旋矩阵/">leetcode-54.螺旋矩阵</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/merge-intervals/" target="_blank" rel="noopener">56. 合并区间</a></td><td><a href="https://ferrerobomb.github.io/2022/01/10/leetcode-56. 合并区间/">leetcode-56. 合并区间</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/unique-paths/" target="_blank" rel="noopener">62. 不同路径</a></td><td><a href="https://ferrerobomb.github.io/2022/01/21/leetcode-62.不同路径/">leetcode-62.不同路径</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener">70. 爬楼梯</a></td><td><a href="https://ferrerobomb.github.io/2022/01/24/leetcode-70.爬楼梯/">leetcode-70.爬楼梯</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/sort-colors/" target="_blank" rel="noopener">75. 颜色分类</a></td><td><a href="https://ferrerobomb.github.io/2022/01/30/leetcode-75.颜色分类/">leetcode-75.颜色分类</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/subsets/" target="_blank" rel="noopener">78. 子集</a></td><td><a href="https://ferrerobomb.github.io/2022/02/08/leetcode-78.子集/">leetcode-78.子集</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/word-search/" target="_blank" rel="noopener">79. 单词搜索</a></td><td><a href="https://ferrerobomb.github.io/2022/01/23/leetcode-79.单词搜索/">leetcode-79.单词搜索</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/merge-sorted-array/" target="_blank" rel="noopener">88. 合并两个有序数组</a></td><td><a href="https://ferrerobomb.github.io/2022/02/01/leetcode-88.合并两个有序数组/">leetcode-88.合并两个有序数组</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal" target="_blank" rel="noopener">94. 二叉树的中序遍历</a></td><td><a href="https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-二叉树的遍历/">leetcode-94/144/145-二叉树的遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/" target="_blank" rel="noopener">98. 验证二叉搜索树</a></td><td><a href="https://ferrerobomb.github.io/2022/02/26/leetcode-98. 验证二叉搜索树/">leetcode-98. 验证二叉搜索树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/same-tree/" target="_blank" rel="noopener">100. 相同的树</a></td><td><a href="https://ferrerobomb.github.io/2022/02/22/leetcode-100. 相同的树/">leetcode-100. 相同的树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/symmetric-tree/" target="_blank" rel="noopener">101. 对称二叉树</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">102. 二叉树的层序遍历</a></td><td><a href="https://ferrerobomb.github.io/2022/02/11/leetcode-102.二叉树的层序遍历/">leetcode-102.二叉树的层序遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/pascals-triangle/" target="_blank" rel="noopener">118. 杨辉三角</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-118.杨辉三角/">leetcode-118.杨辉三角</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">136. 只出现一次的数字</a></td><td><a href="https://ferrerobomb.github.io/2022/02/20/leetcode-136.只出现一次的数字/">leetcode-136.只出现一次的数字</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/single-number-ii/" target="_blank" rel="noopener">137. 只出现一次的数字 II</a></td><td><a href="https://ferrerobomb.github.io/2022/01/08/leetcode-137. 只出现一次的数字 II/">leetcode-137. 只出现一次的数字 II</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal" target="_blank" rel="noopener">144. 二叉树的前序遍历</a></td><td><a href="https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-二叉树的遍历/">leetcode-94/144/145-二叉树的遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal" target="_blank" rel="noopener">145. 二叉树的后序遍历</a></td><td><a href="https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-二叉树的遍历/">leetcode-94/144/145-二叉树的遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/compare-version-numbers/" target="_blank" rel="noopener">165. 比较版本号</a></td><td><a href="https://ferrerobomb.github.io/2022/02/07/leetcode-165.比较版本号/">leetcode-165.比较版本号</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/excel-sheet-column-title/" target="_blank" rel="noopener">168. Excel表列名称</a></td><td><a href="https://ferrerobomb.github.io/2022/01/31/leetcode-168.Excel表列名称/">leetcode-168.Excel表列名称</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/excel-sheet-column-number/" target="_blank" rel="noopener">171. Excel 表列序号</a></td><td><a href="https://ferrerobomb.github.io/2022/02/03/leetcode-171.Excel 表列序号/">leetcode-171.Excel 表列序号</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/duplicate-emails/" target="_blank" rel="noopener">182. 查找重复的电子邮箱</a></td><td><a href="https://ferrerobomb.github.io/2022/02/02/leetcode-182.查找重复的电子邮箱/">leetcode-182.查找重复的电子邮箱</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/word-frequency/" target="_blank" rel="noopener">192. 统计词频</a></td><td><a href="https://ferrerobomb.github.io/2022/02/06/leetcode-192.统计词频/">leetcode-192.统计词频</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/valid-phone-numbers/" target="_blank" rel="noopener">193. 有效电话号码</a></td><td><a href="https://ferrerobomb.github.io/2022/03/05/leetcode-193. 有效电话号码/">leetcode-193. 有效电话号码</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/delete-duplicate-emails/" target="_blank" rel="noopener">196. 删除重复的电子邮箱</a></td><td><a href="https://ferrerobomb.github.io/2022/03/09/leetcode-196. 删除重复的电子邮箱/">leetcode-196. 删除重复的电子邮箱</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/house-robber/" target="_blank" rel="noopener">198. 打家劫舍</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-198-打家劫舍/">leetcode-198.打家劫舍</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/happy-number/" target="_blank" rel="noopener">202. 快乐数</a></td><td><a href="https://ferrerobomb.github.io/2022/03/04/leetcode-202. 快乐数/">leetcode-202. 快乐数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">206. 反转链表</a></td><td><a href="https://ferrerobomb.github.io/2022/02/18/leetcode-206.反转链表/">leetcode-206.反转链表</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/contains-duplicate/" target="_blank" rel="noopener">217. 存在重复元素</a></td><td><a href="https://ferrerobomb.github.io/2022/03/10/leetcode-217. 存在重复元素/">leetcode-217. 存在重复元素</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/" target="_blank" rel="noopener">222. 完全二叉树的节点个数</a></td><td><a href="https://ferrerobomb.github.io/2022/02/14/leetcode-222.完全二叉树的节点个数/">leetcode-222.完全二叉树的节点个数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/add-digits/" target="_blank" rel="noopener">258. 各位相加</a></td><td><a href="https://ferrerobomb.github.io/2022/01/03/leetcode-258. 各位相加/">leetcode-258. 各位相加</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/move-zeroes" target="_blank" rel="noopener">283. 移动零</a></td><td><a href="https://ferrerobomb.github.io/2022/02/09/leetcode-283.移动零/">leetcode-283.移动零</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener">322. 零钱兑换</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-322-零钱兑换/">leetcode-322.零钱兑换</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/shuffle-an-array/" target="_blank" rel="noopener">384. 打乱数组</a></td><td><a href="https://ferrerobomb.github.io/2022/03/08/leetcode-384. 打乱数组/">leetcode-384. 打乱数组</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/arithmetic-slices" target="_blank" rel="noopener">413. 等差数列划分</a></td><td><a href="https://ferrerobomb.github.io/2021/08/19/leetcode-413-等差数列划分/">leetcode-413.等差数列划分</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/third-maximum-number/" target="_blank" rel="noopener">414. 第三大的数</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/" target="_blank" rel="noopener">429. N 叉树的层序遍历</a></td><td><a href="https://ferrerobomb.github.io/2022/02/17/leetcode-429.N叉树的层序遍历/">leetcode-429.N叉树的层序遍历</a></td></tr><tr><td>*<a href="https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order/" target="_blank" rel="noopener">440. 字典序的第K小数字</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/add-two-numbers-ii/" target="_blank" rel="noopener">445. 两数相加 II</a></td><td><a href="https://ferrerobomb.github.io/2022/02/10/leetcode-445.两数相加 II/">leetcode-445.两数相加 II</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/base-7/" target="_blank" rel="noopener">504. 七进制数</a></td><td><a href="https://ferrerobomb.github.io/2022/03/07/leetcode-504. 七进制数/">leetcode-504. 七进制数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence" target="_blank" rel="noopener">516. 最长回文子序列</a></td><td><a href="https://ferrerobomb.github.io/2021/08/19/leetcode-516-最长回文子序列/">leetcode-516.最长回文子序列</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/" target="_blank" rel="noopener">559. N 叉树的最大深度</a></td><td><a href="https://ferrerobomb.github.io/2022/02/16/leetcode-559.N叉树的最大深度/">leetcode-559.N叉树的最大深度</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/" target="_blank" rel="noopener">589. N 叉树的前序遍历</a></td><td><a href="https://ferrerobomb.github.io/2022/02/13/leetcode-589.N叉树的前序遍历/">leetcode-589.N叉树的前序遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/" target="_blank" rel="noopener">590. N 叉树的后序遍历</a></td><td><a href="https://ferrerobomb.github.io/2022/02/15/leetcode-590.N叉树的后序遍历/">leetcode-590.N叉树的后序遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/big-countries/" target="_blank" rel="noopener">595. 大的国家</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/" target="_blank" rel="noopener">599. 两个列表的最小索引总和</a></td><td><a href="https://ferrerobomb.github.io/2022/03/14/leetcode-599. 两个列表的最小索引总和/">leetcode-599. 两个列表的最小索引总和</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/construct-string-from-binary-tree/" target="_blank" rel="noopener">606. 根据二叉树创建字符串</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/" target="_blank" rel="noopener">653. 两数之和 IV - 输入 BST</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-search/" target="_blank" rel="noopener">704. 二分查找</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/to-lower-case/" target="_blank" rel="noopener">709. 转换成小写字母</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/push-dominoes/" target="_blank" rel="noopener">838. 推多米诺</a></td><td><a href="https://ferrerobomb.github.io/2022/02/21/leetcode-838. 推多米诺/">leetcode-838. 推多米诺</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/sort-an-array/" target="_blank" rel="noopener">912. 排序数组</a></td><td><a href="https://ferrerobomb.github.io/2022/01/13/leetcode-912.排序数组/">leetcode-912.排序数组</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/print-in-order/" target="_blank" rel="noopener">1114. 按序打印</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/remove-sub-folders-from-the-filesystem/" target="_blank" rel="noopener">1233. 删除子文件夹</a></td><td><a href="https://ferrerobomb.github.io/2022/01/09/leetcode-1233. 删除子文件夹/">leetcode-1233. 删除子文件夹</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-to-zero/" target="_blank" rel="noopener">1342. 将数字变成 0 的操作次数</a></td><td><a href="https://ferrerobomb.github.io/2022/01/11/leetcode-1342.将数字变成0的操作次数/">leetcode-1342.将数字变成0的操作次数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/count-of-matches-in-tournament/" target="_blank" rel="noopener">1688. 比赛中的配对次数</a></td><td><a href="https://ferrerobomb.github.io/2022/01/25/leetcode-1688-比赛中的配对次数/">leetcode-1688-比赛中的配对次数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/second-largest-digit-in-a-string/" target="_blank" rel="noopener">1796. 字符串中第二大的数字</a></td><td><a href="https://ferrerobomb.github.io/2022/03/03/leetcode-1796. 字符串中第二大的数字/">leetcode-1796. 字符串中第二大的数字</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/maximum-difference-between-increasing-elements/" target="_blank" rel="noopener">2016. 增量元素之间的最大差值</a></td><td><a href="https://ferrerobomb.github.io/2022/02/25/leetcode-2016. 增量元素之间的最大差值/">leetcode-2016. 增量元素之间的最大差值</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/check-if-all-as-appears-before-all-bs/" target="_blank" rel="noopener">2124. 检查是否所有 A 都在 B 之前</a></td><td><a href="https://ferrerobomb.github.io/2022/01/12/leetcode-2124.检查是否所有A都在B之前/">leetcode-2124.检查是否所有A都在B之前</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/count-elements-with-strictly-smaller-and-greater-elements/" target="_blank" rel="noopener">2148. 元素计数</a></td><td><a href="https://ferrerobomb.github.io/2022/03/06/leetcode-2148. 元素计数/">leetcode-2148. 元素计数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/keep-multiplying-found-values-by-two/" target="_blank" rel="noopener">2154. 将找到的值乘以 2</a></td><td><a href="https://ferrerobomb.github.io/2022/01/31/leetcode-2154.将找到的值乘以2/">leetcode-2154.将找到的值乘以2</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/partition-array-according-to-given-pivot/" target="_blank" rel="noopener">2161. 根据给定数字划分数组</a></td><td><a href="https://ferrerobomb.github.io/2022/03/13/leetcode-2161. 根据给定数字划分数组/">leetcode-2161. 根据给定数字划分数组</a></td></tr><tr><td>面试题30</td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/" target="_blank" rel="noopener">剑指 Offer 32 - II. 从上到下打印二叉树 II</a></td><td><a href="https://ferrerobomb.github.io/2020/02/25/leetcode-面试题32-II-从上到下打印二叉树II/">leetcode-面试题32-II-从上到下打印二叉树II</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/" target="_blank" rel="noopener">剑指 Offer 32 - III. 从上到下打印二叉树 III</a></td><td><a href="https://ferrerobomb.github.io/2020/02/18/leetcode-面试题32-III-从上到下打印二叉树III/">leetcode-面试题32-III-从上到下打印二叉树III</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 37. 序列化二叉树</a></td><td><a href="https://ferrerobomb.github.io/2020/02/17/leetcode-面试题37-序列化二叉树/">leetcode-面试题37-序列化二叉树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 55 - II. 平衡二叉树</a></td><td><a href="https://ferrerobomb.github.io/2020/02/15/leetcode-面试题30-包含min函数的栈/">leetcode-面试题55-II-平衡二叉树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 67. 把字符串转换成整数</a></td><td><a href="https://ferrerobomb.github.io/2020/02/19/leetcode-面试题67-把字符串转换成整数/">leetcode-面试题67-把字符串转换成整数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/" target="_blank" rel="noopener">剑指 Offer 68 - I. 二叉搜索树的最近公共祖先</a></td><td><a href="https://ferrerobomb.github.io/2020/02/24/leetcode-面试题68-I二叉搜索树的最近公共祖先/">leetcode-面试题68-I二叉搜索树的最近公共祖先</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/" target="_blank" rel="noopener">剑指 Offer 68 - II. 二叉树的最近公共祖先</a></td><td><a href="https://ferrerobomb.github.io/2020/02/19/leetcode-面试题68-II二叉树的最近公共祖先/">leetcode-面试题68 - II. 二叉树的最近公共祖先</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/SsGoHC/" target="_blank" rel="noopener">剑指 Offer II 074. 合并区间</a></td><td><a href="https://ferrerobomb.github.io/2022/01/10/leetcode-剑指 Offer II 074. 合并区间/">leetcode-剑指 Offer II 074. 合并区间</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/palindrome-permutation-lcci/" target="_blank" rel="noopener">面试题 01.04. 回文排列</a></td><td><a href="https://ferrerobomb.github.io/2022/01/25/leetcode-面试题01-04-回文排列/">leetcode-面试题01.04.回文排列</a></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-101. 对称二叉树</title>
    <link href="https://ferrerobomb.github.io/2022/03/21/leetcode-101.%20%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://ferrerobomb.github.io/2022/03/21/leetcode-101. 对称二叉树/</id>
    <published>2022-03-21T13:20:06.000Z</published>
    <updated>2022-03-21T13:21:22.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-101-对称二叉树"><a href="#leetcode-101-对称二叉树" class="headerlink" title="leetcode-101. 对称二叉树"></a>leetcode-101. 对称二叉树</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个二叉树的根节点 root ， 检查它是否轴对称。</p><p>示例 1：</p><p>输入：root = [1,2,2,3,4,4,3]<br>输出：true<br>示例 2：</p><p>输入：root = [1,2,2,null,3,null,3]<br>输出：false</p><p>提示：</p><p>树中节点数目在范围 [1, 1000] 内<br>-100 &lt;= Node.val &lt;= 100</p><p>进阶：你可以运用递归和迭代两种方法解决这个问题吗？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/symmetric-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/symmetric-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isSymmetric = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> check = <span class="function">(<span class="params">leftTree, rightTree</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!leftTree &amp;&amp; !rightTree) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!leftTree || !rightTree) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> leftTree.val === rightTree.val &amp;&amp; check(leftTree.left, rightTree.right) &amp;&amp; check(leftTree.right, rightTree.left)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> check(root, root)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-653. 两数之和 IV - 输入 BST</title>
    <link href="https://ferrerobomb.github.io/2022/03/20/leetcode-653.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%20IV%20-%20%E8%BE%93%E5%85%A5%20BST/"/>
    <id>https://ferrerobomb.github.io/2022/03/20/leetcode-653. 两数之和 IV - 输入 BST/</id>
    <published>2022-03-20T13:22:39.000Z</published>
    <updated>2022-03-21T13:22:57.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-653-两数之和-IV-输入-BST"><a href="#leetcode-653-两数之和-IV-输入-BST" class="headerlink" title="leetcode-653. 两数之和 IV - 输入 BST"></a>leetcode-653. 两数之和 IV - 输入 BST</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二叉搜索树 root 和一个目标结果 k，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。</p><p>示例 1：</p><p>输入: root = [5,3,6,2,4,null,7], k = 9<br>输出: true<br>示例 2：</p><p>输入: root = [5,3,6,2,4,null,7], k = 28<br>输出: false</p><p>提示:</p><p>二叉树的节点个数的范围是  [1, 104].<br>-104 &lt;= Node.val &lt;= 104<br>root 为二叉搜索树<br>-105 &lt;= k &lt;= 105</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findTarget = <span class="function"><span class="keyword">function</span>(<span class="params">root, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">set</span> = new Set()</span><br><span class="line">  const dfs = function(root, k) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">set</span>.has(k - root.val)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span>.add(root.val)</span><br><span class="line">    return dfs(root.left, k) || dfs(root.right, k)</span><br><span class="line">  &#125;</span><br><span class="line">  return dfs(root, k)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-606. 根据二叉树创建字符串</title>
    <link href="https://ferrerobomb.github.io/2022/03/19/leetcode-606.%20%E6%A0%B9%E6%8D%AE%E4%BA%8C%E5%8F%89%E6%A0%91%E5%88%9B%E5%BB%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://ferrerobomb.github.io/2022/03/19/leetcode-606. 根据二叉树创建字符串/</id>
    <published>2022-03-19T14:19:26.000Z</published>
    <updated>2022-03-19T14:20:00.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-606-根据二叉树创建字符串"><a href="#leetcode-606-根据二叉树创建字符串" class="headerlink" title="leetcode-606. 根据二叉树创建字符串"></a>leetcode-606. 根据二叉树创建字符串</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。</p><p>空节点则用一对空括号 “()” 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。</p><p>示例 1:</p><p>输入: 二叉树: [1,2,3,4]<br>       1<br>     /   \<br>    2     3<br>   /<br>  4     </p><p>输出: “1(2(4))(3)”</p><p>解释: 原本将是“1(2(4)())(3())”，<br>在你省略所有不必要的空括号对之后，<br>它将是“1(2(4))(3)”。<br>示例 2:</p><p>输入: 二叉树: [1,2,3,null,4]<br>       1<br>     /   \<br>    2     3<br>     \<br>      4 </p><p>输出: “1(2()(4))(3)”</p><p>解释: 和第一个示例相似，<br>除了我们不能省略第一个对括号来中断输入和输出之间的一对一映射关系。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/construct-string-from-binary-tree" target="_blank" rel="noopener">https://leetcode-cn.com/problems/construct-string-from-binary-tree</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val, left, right) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.left = (left===undefined ? null : left)</span></span><br><span class="line"><span class="comment"> *     this.right = (right===undefined ? null : right)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> tree2str = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">``</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!root.left &amp;&amp; !root.right) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;root.val&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!root.left) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;root.val&#125;</span>()(<span class="subst">$&#123;tree2str(root.right)&#125;</span>)`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!root.right) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;root.val&#125;</span>(<span class="subst">$&#123;tree2str(root.left)&#125;</span>)`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;root.val&#125;</span>(<span class="subst">$&#123;tree2str(root.left)&#125;</span>)(<span class="subst">$&#123;tree2str(root.right)&#125;</span>)`</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>vscode插件使用与配置大全</title>
    <link href="https://ferrerobomb.github.io/2022/03/19/vscode%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%A4%A7%E5%85%A8/"/>
    <id>https://ferrerobomb.github.io/2022/03/19/vscode插件使用与配置大全/</id>
    <published>2022-03-19T05:58:07.000Z</published>
    <updated>2022-03-19T06:31:55.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vscode插件使用与配置大全"><a href="#vscode插件使用与配置大全" class="headerlink" title="vscode插件使用与配置大全"></a>vscode插件使用与配置大全</h1><h2 id="通用快捷操作"><a href="#通用快捷操作" class="headerlink" title="通用快捷操作"></a>通用快捷操作</h2><p>log+回车：console.log</p><h2 id="快捷键（导入插件，使用jetbrains快捷键）"><a href="#快捷键（导入插件，使用jetbrains快捷键）" class="headerlink" title="快捷键（导入插件，使用jetbrains快捷键）"></a>快捷键（导入插件，使用jetbrains快捷键）</h2><ul><li>k–kato.intellij-idea-keybindings</li></ul><p>名称: IntelliJ IDEA Keybindings<br>ID: k–kato.intellij-idea-keybindings<br>说明: Port of IntelliJ IDEA Keybindings, including for WebStorm, PyCharm, PHP Storm, etc.<br>版本: 1.5.0<br>发布者: Keisuke Kato<br>VS Marketplace 链接: <a href="https://marketplace.visualstudio.com/items?itemName=k--kato.intellij-idea-keybindings" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=k--kato.intellij-idea-keybindings</a></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><ul><li>dsznajder.es7-react-js-snippets</li></ul><p>名称: ES7+ React/Redux/React-Native snippets<br>ID: dsznajder.es7-react-js-snippets<br>说明: Extensions for React, React-Native and Redux in JS/TS with ES7+ syntax. Customizable. Built-in integration with prettier.<br>版本: 4.4.3<br>发布者: dsznajder<br>VS Marketplace 链接: <a href="https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets</a></p><p>使用</p><p>rcc+回车：快速生成有状态组件</p><p>rfc+回车：快速生成无状态组件</p><h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><h2 id="tsconfig"><a href="#tsconfig" class="headerlink" title="tsconfig"></a>tsconfig</h2>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://ferrerobomb.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-704. 二分查找</title>
    <link href="https://ferrerobomb.github.io/2022/03/18/leetcode-704.%20%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>https://ferrerobomb.github.io/2022/03/18/leetcode-704. 二分查找/</id>
    <published>2022-03-18T14:07:29.000Z</published>
    <updated>2022-03-18T14:07:41.785Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-704-二分查找"><a href="#leetcode-704-二分查找" class="headerlink" title="leetcode-704. 二分查找"></a>leetcode-704. 二分查找</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p>示例 1:</p><p>输入: nums = [-1,0,3,5,9,12], target = 9<br>输出: 4<br>解释: 9 出现在 nums 中并且下标为 4<br>示例 2:</p><p>输入: nums = [-1,0,3,5,9,12], target = 2<br>输出: -1<br>解释: 2 不存在 nums 中因此返回 -1</p><p>提示：</p><p>你可以假设 nums 中的所有元素是不重复的。<br>n 将在 [1, 10000]之间。<br>nums 的每个元素都将在 [-9999, 9999]之间。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-search" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-search</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> low = <span class="number">0</span>, high = nums.length - <span class="number">1</span>, mid;</span><br><span class="line">  <span class="keyword">while</span>(low &lt;= high) &#123;</span><br><span class="line">    <span class="comment">// 先求出此轮循环的mid</span></span><br><span class="line">    mid = ((high - low) / <span class="number">2</span> | <span class="number">0</span>) + low</span><br><span class="line">    <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">      <span class="keyword">return</span> mid</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">      high = mid - <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      low = mid + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-14. 最长公共前缀</title>
    <link href="https://ferrerobomb.github.io/2022/03/17/leetcode-14.%20%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
    <id>https://ferrerobomb.github.io/2022/03/17/leetcode-14. 最长公共前缀/</id>
    <published>2022-03-17T15:02:58.000Z</published>
    <updated>2022-03-17T15:03:10.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-14-最长公共前缀"><a href="#leetcode-14-最长公共前缀" class="headerlink" title="leetcode-14. 最长公共前缀"></a>leetcode-14. 最长公共前缀</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 “”。</p><p>示例 1：</p><p>输入：strs = [“flower”,”flow”,”flight”]<br>输出：”fl”<br>示例 2：</p><p>输入：strs = [“dog”,”racecar”,”car”]<br>输出：””<br>解释：输入不存在公共前缀。</p><p>提示：</p><p>1 &lt;= strs.length &lt;= 200<br>0 &lt;= strs[i].length &lt;= 200<br>strs[i] 仅由小写英文字母组成</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-common-prefix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-common-prefix</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string[]&#125; strs</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> longestCommonPrefix = <span class="function"><span class="keyword">function</span>(<span class="params">strs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(strs.length == <span class="number">0</span>) </span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">let</span> res = strs[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; strs.length; ++i) &#123;</span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 对当前最大前缀和当前字符串进行遍历，并更新当前最大前缀</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt; res.length &amp;&amp; j &lt; strs[i].length) &#123;</span><br><span class="line">      <span class="keyword">if</span>(res[j] != strs[i][j]) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      j++</span><br><span class="line">    &#125;</span><br><span class="line">    res = res.substring(<span class="number">0</span>, j);</span><br><span class="line">    <span class="keyword">if</span>(res === <span class="string">""</span>)</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-709. 转换成小写字母</title>
    <link href="https://ferrerobomb.github.io/2022/03/16/leetcode-709.%20%E8%BD%AC%E6%8D%A2%E6%88%90%E5%B0%8F%E5%86%99%E5%AD%97%E6%AF%8D/"/>
    <id>https://ferrerobomb.github.io/2022/03/16/leetcode-709. 转换成小写字母/</id>
    <published>2022-03-16T14:35:48.000Z</published>
    <updated>2022-03-16T14:43:40.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-709-转换成小写字母"><a href="#leetcode-709-转换成小写字母" class="headerlink" title="leetcode-709. 转换成小写字母"></a>leetcode-709. 转换成小写字母</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串 s ，将该字符串中的大写字母转换成相同的小写字母，返回新的字符串。</p><p>示例 1：</p><p>输入：s = “Hello”<br>输出：”hello”<br>示例 2：</p><p>输入：s = “here”<br>输出：”here”<br>示例 3：</p><p>输入：s = “LOVELY”<br>输出：”lovely”</p><p>提示：</p><p>1 &lt;= s.length &lt;= 100<br>s 由 ASCII 字符集中的可打印字符组成</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/to-lower-case" target="_blank" rel="noopener">https://leetcode-cn.com/problems/to-lower-case</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> toLowerCase = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.toLowerCase()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解2"><a href="#解2" class="headerlink" title="解2"></a>解2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> toLowerCase = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> char <span class="keyword">of</span> s) &#123;</span><br><span class="line">    <span class="keyword">const</span> code = char.charCodeAt()</span><br><span class="line">    <span class="comment">// A-Z为65-90</span></span><br><span class="line">    <span class="keyword">if</span> (code &gt;= <span class="number">65</span> &amp;&amp; code &lt;= <span class="number">90</span>) &#123;</span><br><span class="line">      <span class="comment">// 32的二进制为00100000</span></span><br><span class="line">      <span class="comment">// 65-90的二进制码的32位处（从右数第6位）正好都是0，所以进行按位或操作 代替加操作</span></span><br><span class="line">      char = <span class="built_in">String</span>.fromCharCode(code | <span class="number">32</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    res.push(char)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res.join(<span class="string">''</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1114. 按序打印</title>
    <link href="https://ferrerobomb.github.io/2022/03/15/leetcode-1114.%20%E6%8C%89%E5%BA%8F%E6%89%93%E5%8D%B0/"/>
    <id>https://ferrerobomb.github.io/2022/03/15/leetcode-1114. 按序打印/</id>
    <published>2022-03-15T14:25:34.000Z</published>
    <updated>2022-03-15T14:26:36.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1114-按序打印"><a href="#leetcode-1114-按序打印" class="headerlink" title="leetcode-1114. 按序打印"></a>leetcode-1114. 按序打印</h1><p>P.S.了解一下多线程</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个类：</p><p>public class Foo {<br>  public void first() { print(“first”); }<br>  public void second() { print(“second”); }<br>  public void third() { print(“third”); }<br>}<br>三个不同的线程 A、B、C 将会共用一个 Foo 实例。</p><p>线程 A 将会调用 first() 方法<br>线程 B 将会调用 second() 方法<br>线程 C 将会调用 third() 方法<br>请设计修改程序，以确保 second() 方法在 first() 方法之后被执行，third() 方法在 second() 方法之后被执行。</p><p>提示：</p><p>尽管输入中的数字似乎暗示了顺序，但是我们并不保证线程在操作系统中的调度顺序。<br>你看到的输入格式主要是为了确保测试的全面性。</p><p>示例 1：</p><p>输入：nums = [1,2,3]<br>输出：”firstsecondthird”<br>解释：<br>有三个线程会被异步启动。输入 [1,2,3] 表示线程 A 将会调用 first() 方法，线程 B 将会调用 second() 方法，线程 C 将会调用 third() 方法。正确的输出是 “firstsecondthird”。<br>示例 2：</p><p>输入：nums = [1,3,2]<br>输出：”firstsecondthird”<br>解释：<br>输入 [1,3,2] 表示线程 A 将会调用 first() 方法，线程 B 将会调用 third() 方法，线程 C 将会调用 second() 方法。正确的输出是 “firstsecondthird”。</p><p>提示：<br>nums 是 [1, 2, 3] 的一组排列</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/print-in-order" target="_blank" rel="noopener">https://leetcode-cn.com/problems/print-in-order</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger firstJobDone = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger secondJobDone = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">(Runnable printFirst)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// printFirst.run() outputs "first". Do not change or remove this line.</span></span><br><span class="line">        printFirst.run();</span><br><span class="line">        firstJobDone.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">second</span><span class="params">(Runnable printSecond)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(firstJobDone.get() != <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printSecond.run() outputs "second". Do not change or remove this line.</span></span><br><span class="line">        printSecond.run();</span><br><span class="line">        secondJobDone.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">third</span><span class="params">(Runnable printThird)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(secondJobDone.get() != <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printThird.run() outputs "third". Do not change or remove this line.</span></span><br><span class="line">        printThird.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-599. 两个列表的最小索引总和</title>
    <link href="https://ferrerobomb.github.io/2022/03/14/leetcode-599.%20%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E7%9A%84%E6%9C%80%E5%B0%8F%E7%B4%A2%E5%BC%95%E6%80%BB%E5%92%8C/"/>
    <id>https://ferrerobomb.github.io/2022/03/14/leetcode-599. 两个列表的最小索引总和/</id>
    <published>2022-03-14T13:29:18.000Z</published>
    <updated>2022-03-14T13:29:49.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-599-两个列表的最小索引总和"><a href="#leetcode-599-两个列表的最小索引总和" class="headerlink" title="leetcode-599. 两个列表的最小索引总和"></a>leetcode-599. 两个列表的最小索引总和</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>假设 Andy 和 Doris 想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。</p><p>你需要帮助他们用最少的索引和找出他们共同喜爱的餐厅。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设答案总是存在。</p><p>示例 1:</p><p>输入: list1 = [“Shogun”, “Tapioca Express”, “Burger King”, “KFC”]，list2 = [“Piatti”, “The Grill at Torrey Pines”, “Hungry Hunter Steakhouse”, “Shogun”]<br>输出: [“Shogun”]<br>解释: 他们唯一共同喜爱的餐厅是“Shogun”。<br>示例 2:</p><p>输入:list1 = [“Shogun”, “Tapioca Express”, “Burger King”, “KFC”]，list2 = [“KFC”, “Shogun”, “Burger King”]<br>输出: [“Shogun”]<br>解释: 他们共同喜爱且具有最小索引和的餐厅是“Shogun”，它有最小的索引和1(0+1)。</p><p>提示:</p><p>1 &lt;= list1.length, list2.length &lt;= 1000<br>1 &lt;= list1[i].length, list2[i].length &lt;= 30<br>list1[i] 和 list2[i] 由空格 ‘ ‘ 和英文字母组成。<br>list1 的所有字符串都是 唯一 的。<br>list2 中的所有字符串都是 唯一 的。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists" target="_blank" rel="noopener">https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string[]&#125; list1</span></span><br><span class="line"><span class="comment"> * @param &#123;string[]&#125; list2</span></span><br><span class="line"><span class="comment"> * @return &#123;string[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findRestaurant = <span class="function"><span class="keyword">function</span>(<span class="params">list1, list2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  <span class="keyword">let</span> minIndex = <span class="literal">Infinity</span></span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list1.length; i++) &#123;</span><br><span class="line">    map.set(list1[i], i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list2.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (map.has(list2[i])) &#123;</span><br><span class="line">      <span class="keyword">const</span> j = map.get(list2[i])</span><br><span class="line">      <span class="keyword">if</span> (i+j &lt; minIndex) &#123;</span><br><span class="line">        minIndex = i+j</span><br><span class="line">        res.length = <span class="number">0</span> <span class="comment">// 清空结果</span></span><br><span class="line">        res.push(list2[i])</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i+j === minIndex) &#123;</span><br><span class="line">        res.push(list2[i])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-2161. 根据给定数字划分数组</title>
    <link href="https://ferrerobomb.github.io/2022/03/13/leetcode-2161.%20%E6%A0%B9%E6%8D%AE%E7%BB%99%E5%AE%9A%E6%95%B0%E5%AD%97%E5%88%92%E5%88%86%E6%95%B0%E7%BB%84/"/>
    <id>https://ferrerobomb.github.io/2022/03/13/leetcode-2161. 根据给定数字划分数组/</id>
    <published>2022-03-12T16:26:15.000Z</published>
    <updated>2022-03-12T16:26:25.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-2161-根据给定数字划分数组"><a href="#leetcode-2161-根据给定数字划分数组" class="headerlink" title="leetcode-2161. 根据给定数字划分数组"></a>leetcode-2161. 根据给定数字划分数组</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个下标从 0 开始的整数数组 nums 和一个整数 pivot 。请你将 nums 重新排列，使得以下条件均成立：</p><p>所有小于 pivot 的元素都出现在所有大于 pivot 的元素 之前 。<br>所有等于 pivot 的元素都出现在小于和大于 pivot 的元素 中间 。<br>小于 pivot 的元素之间和大于 pivot 的元素之间的 相对顺序 不发生改变。<br>更正式的，考虑每一对 pi，pj ，pi 是初始时位置 i 元素的新位置，pj 是初始时位置 j 元素的新位置。对于小于 pivot 的元素，如果 i &lt; j 且 nums[i] &lt; pivot 和 nums[j] &lt; pivot 都成立，那么 pi &lt; pj 也成立。类似的，对于大于 pivot 的元素，如果 i &lt; j 且 nums[i] &gt; pivot 和 nums[j] &gt; pivot 都成立，那么 pi &lt; pj 。<br>请你返回重新排列 nums 数组后的结果数组。</p><p>示例 1：</p><p>输入：nums = [9,12,5,10,14,3,10], pivot = 10<br>输出：[9,5,3,10,10,12,14]<br>解释：<br>元素 9 ，5 和 3 小于 pivot ，所以它们在数组的最左边。<br>元素 12 和 14 大于 pivot ，所以它们在数组的最右边。<br>小于 pivot 的元素的相对位置和大于 pivot 的元素的相对位置分别为 [9, 5, 3] 和 [12, 14] ，它们在结果数组中的相对顺序需要保留。<br>示例 2：</p><p>输入：nums = [-3,4,3,2], pivot = 2<br>输出：[-3,2,4,3]<br>解释：<br>元素 -3 小于 pivot ，所以在数组的最左边。<br>元素 4 和 3 大于 pivot ，所以它们在数组的最右边。<br>小于 pivot 的元素的相对位置和大于 pivot 的元素的相对位置分别为 [-3] 和 [4, 3] ，它们在结果数组中的相对顺序需要保留。</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 105<br>-106 &lt;= nums[i] &lt;= 106<br>pivot 等于 nums 中的一个元素。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/partition-array-according-to-given-pivot" target="_blank" rel="noopener">https://leetcode-cn.com/problems/partition-array-according-to-given-pivot</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; pivot</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> pivotArray = <span class="function"><span class="keyword">function</span> (<span class="params">nums, pivot</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> left = [], middle = [], right = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; pivot) left.push(num)</span><br><span class="line">    <span class="keyword">if</span> (num === pivot) middle.push(num)</span><br><span class="line">    <span class="keyword">if</span> (num &gt; pivot) right.push(num)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [...left, ...middle, ...right];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-27. 移除元素</title>
    <link href="https://ferrerobomb.github.io/2022/03/12/leetcode-27.%20%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
    <id>https://ferrerobomb.github.io/2022/03/12/leetcode-27. 移除元素/</id>
    <published>2022-03-11T16:14:33.000Z</published>
    <updated>2022-03-12T16:14:53.710Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-27-移除元素"><a href="#leetcode-27-移除元素" class="headerlink" title="leetcode-27. 移除元素"></a>leetcode-27. 移除元素</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>说明:</p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><p>// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝<br>int len = removeElement(nums, val);</p><p>// 在函数里修改输入数组对于调用者是可见的。<br>// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。<br>for (int i = 0; i &lt; len; i++) {<br>    print(nums[i]);<br>}</p><p>示例 1：</p><p>输入：nums = [3,2,2,3], val = 3<br>输出：2, nums = [2,2]<br>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。<br>示例 2：</p><p>输入：nums = [0,1,2,2,3,0,4,2], val = 2<br>输出：5, nums = [0,1,4,0,3]<br>解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</p><p>提示：</p><p>0 &lt;= nums.length &lt;= 100<br>0 &lt;= nums[i] &lt;= 50<br>0 &lt;= val &lt;= 100</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/remove-element" target="_blank" rel="noopener">https://leetcode-cn.com/problems/remove-element</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1-双指针"><a href="#解1-双指针" class="headerlink" title="解1 双指针"></a>解1 双指针</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; val</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> removeElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = nums.length</span><br><span class="line">  <span class="keyword">let</span> fast = <span class="number">0</span>, slow = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(fast &lt; len) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[fast] !== val) &#123;</span><br><span class="line">      nums[slow] = nums[fast]</span><br><span class="line">      ++slow</span><br><span class="line">    &#125;</span><br><span class="line">    ++fast</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> slow</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-36. 有效的数独</title>
    <link href="https://ferrerobomb.github.io/2022/03/11/leetcode-36.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/"/>
    <id>https://ferrerobomb.github.io/2022/03/11/leetcode-36. 有效的数独/</id>
    <published>2022-03-11T12:53:48.000Z</published>
    <updated>2022-03-11T12:55:39.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-36-有效的数独"><a href="#leetcode-36-有效的数独" class="headerlink" title="leetcode-36. 有效的数独"></a>leetcode-36. 有效的数独</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。</p><p>数字 1-9 在每一行只能出现一次。<br>数字 1-9 在每一列只能出现一次。<br>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）</p><p>注意：</p><p>一个有效的数独（部分已被填充）不一定是可解的。<br>只需要根据以上规则，验证已经填入的数字是否有效即可。<br>空白格用 ‘.’ 表示。</p><p>示例 1：</p><p>输入：board =<br>[[“5”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”]<br>,[“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”]<br>,[“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”]<br>,[“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”]<br>,[“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”]<br>,[“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”]<br>,[“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”]<br>,[“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”]<br>,[“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]<br>输出：true<br>示例 2：</p><p>输入：board =<br>[[“8”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”]<br>,[“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”]<br>,[“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”]<br>,[“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”]<br>,[“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”]<br>,[“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”]<br>,[“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”]<br>,[“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”]<br>,[“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]<br>输出：false<br>解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。</p><p>提示：</p><p>board.length == 9<br>board[i].length == 9<br>board[i][j] 是一位数字（1-9）或者 ‘.’</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/valid-sudoku" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-sudoku</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;character[][]&#125; board</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValidSudoku = <span class="function"><span class="keyword">function</span>(<span class="params">board</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 二维数组rows用于记录1-9行中数字1-9出现的次数</span></span><br><span class="line">  <span class="keyword">const</span> rows = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="number">0</span>).map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="number">0</span>));</span><br><span class="line">  <span class="comment">// 二维数组columns用于记录1-9列中数字1-9出现的次数</span></span><br><span class="line">  <span class="keyword">const</span> columns = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="number">0</span>).map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="number">0</span>));</span><br><span class="line">  <span class="comment">// 三维数组subboxes用于记录第1-3行第1-3列的九宫格中数字1-9出现的次数</span></span><br><span class="line">  <span class="keyword">const</span> subboxes = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">0</span>).map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">0</span>).map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="number">0</span>)));</span><br><span class="line">  <span class="comment">// 实际操作中由于index从0开始，所以所有涉及index的数值都需要减一</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; <span class="number">9</span>; row++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> column = <span class="number">0</span>; column &lt; <span class="number">9</span>; column++) &#123;</span><br><span class="line">      <span class="keyword">const</span> item = board[row][column];</span><br><span class="line">      <span class="keyword">if</span> (item !== <span class="string">'.'</span>) &#123;</span><br><span class="line">        <span class="comment">// 注意这里需要-1处理</span></span><br><span class="line">        <span class="keyword">const</span> index = <span class="built_in">Number</span>(item) - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// const index = item.charCodeAt() - '0'.charCodeAt() - 1;</span></span><br><span class="line">        rows[row][index]++;</span><br><span class="line">        columns[column][index]++;</span><br><span class="line">        subboxes[row / <span class="number">3</span> | <span class="number">0</span>][column / <span class="number">3</span> | <span class="number">0</span>][index]++;</span><br><span class="line">        <span class="comment">// 每次增加完之后判断一次，如果不符合要求则返回false</span></span><br><span class="line">        <span class="keyword">if</span> (rows[row][index] &gt; <span class="number">1</span> || columns[column][index] &gt; <span class="number">1</span> || subboxes[row / <span class="number">3</span> | <span class="number">0</span>][column / <span class="number">3</span> | <span class="number">0</span>][index] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-217. 存在重复元素</title>
    <link href="https://ferrerobomb.github.io/2022/03/10/leetcode-217.%20%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
    <id>https://ferrerobomb.github.io/2022/03/10/leetcode-217. 存在重复元素/</id>
    <published>2022-03-09T16:05:20.000Z</published>
    <updated>2022-03-09T16:08:15.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-217-存在重复元素"><a href="#leetcode-217-存在重复元素" class="headerlink" title="leetcode-217. 存在重复元素"></a>leetcode-217. 存在重复元素</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数数组 nums 。如果任一值在数组中出现 至少两次 ，返回 true ；如果数组中每个元素互不相同，返回 false 。</p><p>示例 1：</p><p>输入：nums = [1,2,3,1]<br>输出：true<br>示例 2：</p><p>输入：nums = [1,2,3,4]<br>输出：false<br>示例 3：</p><p>输入：nums = [1,1,1,3,3,4,3,2,4,2]<br>输出：true</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 105<br>-109 &lt;= nums[i] &lt;= 109</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/contains-duplicate" target="_blank" rel="noopener">https://leetcode-cn.com/problems/contains-duplicate</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> containsDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> hash = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> isDuplicate = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; nums.length; index++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hash[nums[index]]) &#123;</span><br><span class="line">      isDuplicate = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hash[nums[index]] = <span class="number">1</span></span><br><span class="line">  &#125;    </span><br><span class="line">  <span class="keyword">return</span> isDuplicate</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解2"><a href="#解2" class="headerlink" title="解2"></a>解2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在排序中判断，空间复杂度低</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> containsDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> hash = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> isDuplicate = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; nums.length; index++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hash[nums[index]]) &#123;</span><br><span class="line">      isDuplicate = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hash[nums[index]] = <span class="number">1</span></span><br><span class="line">  &#125;    </span><br><span class="line">  <span class="keyword">return</span> isDuplicate</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-196. 删除重复的电子邮箱</title>
    <link href="https://ferrerobomb.github.io/2022/03/09/leetcode-196.%20%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E7%9A%84%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1/"/>
    <id>https://ferrerobomb.github.io/2022/03/09/leetcode-196. 删除重复的电子邮箱/</id>
    <published>2022-03-09T15:44:31.000Z</published>
    <updated>2022-03-09T15:46:18.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-196-删除重复的电子邮箱"><a href="#leetcode-196-删除重复的电子邮箱" class="headerlink" title="leetcode-196. 删除重复的电子邮箱"></a>leetcode-196. 删除重复的电子邮箱</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>SQL架构</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Person (<span class="keyword">Id</span> <span class="built_in">int</span>, Email <span class="built_in">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Person</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">id</span>, email) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'john@example.com'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">id</span>, email) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'bob@example.com'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">id</span>, email) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'john@example.com'</span>)</span><br></pre></td></tr></table></figure><p>表: <code>Person</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| id          | int     |</span><br><span class="line">| email       | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">id是该表的主键列。</span><br><span class="line">该表的每一行包含一封电子邮件。电子邮件将不包含大写字母。</span><br></pre></td></tr></table></figure><p>编写一个SQL查询来 <strong>删除</strong> 所有重复的电子邮件，只保留一个id最小的唯一电子邮件。</p><p>以 <strong>任意顺序</strong> 返回结果表。</p><p>查询结果格式如下所示。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">Person 表:</span><br><span class="line">+----+------------------+</span><br><span class="line">| id | email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">| 3  | john@example.com |</span><br><span class="line">+----+------------------+</span><br><span class="line">输出: </span><br><span class="line">+----+------------------+</span><br><span class="line">| id | email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">+----+------------------+</span><br><span class="line">解释: john@example.com重复两次。我们保留最小的Id = 1。</span><br></pre></td></tr></table></figure><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><p>理解：想象成两层循环，p1为外层，p2为里层</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">DELETE</span> p1 <span class="keyword">FROM</span> Person p1,</span><br><span class="line">  Person p2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  p1.Email = p2.Email <span class="keyword">AND</span> p1.Id &gt; p2.Id</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-384. 打乱数组</title>
    <link href="https://ferrerobomb.github.io/2022/03/08/leetcode-384.%20%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/"/>
    <id>https://ferrerobomb.github.io/2022/03/08/leetcode-384. 打乱数组/</id>
    <published>2022-03-08T14:10:26.000Z</published>
    <updated>2022-03-08T14:45:17.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-384-打乱数组"><a href="#leetcode-384-打乱数组" class="headerlink" title="leetcode-384. 打乱数组"></a>leetcode-384. 打乱数组</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数数组 nums ，设计算法来打乱一个没有重复元素的数组。打乱后，数组的所有排列应该是 等可能 的。</p><p>实现 Solution class:</p><p>Solution(int[] nums) 使用整数数组 nums 初始化对象<br>int[] reset() 重设数组到它的初始状态并返回<br>int[] shuffle() 返回数组随机打乱后的结果</p><p>示例 1：</p><p>输入<br>[“Solution”, “shuffle”, “reset”, “shuffle”]<br>[[[1, 2, 3]], [], [], []]<br>输出<br>[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]</p><p>解释<br>Solution solution = new Solution([1, 2, 3]);<br>solution.shuffle();    // 打乱数组 [1,2,3] 并返回结果。任何 [1,2,3]的排列返回的概率应该相同。例如，返回 [3, 1, 2]<br>solution.reset();      // 重设数组到它的初始状态 [1, 2, 3] 。返回 [1, 2, 3]<br>solution.shuffle();    // 随机返回数组 [1, 2, 3] 打乱后的结果。例如，返回 [1, 3, 2]</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 200<br>-106 &lt;= nums[i] &lt;= 106<br>nums 中的所有元素都是 唯一的<br>最多可以调用 5 * 104 次 reset 和 shuffle</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/shuffle-an-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/shuffle-an-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1-暴力随机法"><a href="#解1-暴力随机法" class="headerlink" title="解1 暴力随机法"></a>解1 暴力随机法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> Solution = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.originArray = [...nums];</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Solution.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...this.originArray]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Solution.prototype.shuffle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> numsLen = <span class="keyword">this</span>.originArray.length</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> operationList = [...this.originArray];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numsLen; ++i) &#123;</span><br><span class="line">    <span class="comment">// 每次循环随出一个数当做位置，写入新数组</span></span><br><span class="line">    <span class="keyword">const</span> pos = <span class="built_in">Math</span>.random() * operationList.length;</span><br><span class="line">    res.push(operationList.splice(pos, <span class="number">1</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Your Solution object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment">* var obj = new Solution(nums)</span></span><br><span class="line"><span class="comment">* var param_1 = obj.reset()</span></span><br><span class="line"><span class="comment">* var param_2 = obj.shuffle()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="解2-Fisher-Yates-Knuth洗牌算法"><a href="#解2-Fisher-Yates-Knuth洗牌算法" class="headerlink" title="解2 Fisher-Yates-Knuth洗牌算法"></a>解2 Fisher-Yates-Knuth洗牌算法</h2><p>Fisher-Yates洗牌算法是由Ronald A.Fisher和Frank Yates于1938年发明的，后来由Knuth在《The Art of Computer Programming》中普及。（《计算机程序设计艺术》）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> Solution = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.originArray = [...nums];</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Solution.prototype.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [...this.originArray]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Solution.prototype.shuffle = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nums = [...this.originArray]</span><br><span class="line">  <span class="keyword">const</span> numsLen = nums.length</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numsLen; ++i) &#123;</span><br><span class="line">    <span class="keyword">const</span> j = (<span class="built_in">Math</span>.random() * (numsLen - i) | <span class="number">0</span>) + i;</span><br><span class="line">    <span class="keyword">const</span> temp = nums[i];</span><br><span class="line">    nums[i] = nums[j];</span><br><span class="line">    nums[j] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-504. 七进制数</title>
    <link href="https://ferrerobomb.github.io/2022/03/07/leetcode-504.%20%E4%B8%83%E8%BF%9B%E5%88%B6%E6%95%B0/"/>
    <id>https://ferrerobomb.github.io/2022/03/07/leetcode-504. 七进制数/</id>
    <published>2022-03-07T08:47:55.000Z</published>
    <updated>2022-03-07T08:49:17.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-504-七进制数"><a href="#leetcode-504-七进制数" class="headerlink" title="leetcode-504. 七进制数"></a>leetcode-504. 七进制数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数 num，将其转化为 7 进制，并以字符串形式输出。</p><p>示例 1:</p><p>输入: num = 100<br>输出: “202”<br>示例 2:</p><p>输入: num = -7<br>输出: “-10”</p><p>提示：</p><p>-107 &lt;= num &lt;= 107</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/base-7" target="_blank" rel="noopener">https://leetcode-cn.com/problems/base-7</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; num</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> convertToBase7 = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 正负号</span></span><br><span class="line">  <span class="keyword">let</span> symbol = num &lt; <span class="number">0</span> ? <span class="string">'-'</span> : <span class="string">''</span>;</span><br><span class="line">  num = <span class="built_in">Math</span>.abs(num);</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    res.unshift(num % <span class="number">7</span>);</span><br><span class="line">    num = num / <span class="number">7</span> | <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  res.unshift(symbol)</span><br><span class="line">  <span class="keyword">return</span> res.join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-2148. 元素计数</title>
    <link href="https://ferrerobomb.github.io/2022/03/06/leetcode-2148.%20%E5%85%83%E7%B4%A0%E8%AE%A1%E6%95%B0/"/>
    <id>https://ferrerobomb.github.io/2022/03/06/leetcode-2148. 元素计数/</id>
    <published>2022-03-06T09:30:55.000Z</published>
    <updated>2022-03-07T09:32:18.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-2148-元素计数"><a href="#leetcode-2148-元素计数" class="headerlink" title="leetcode-2148. 元素计数"></a>leetcode-2148. 元素计数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数数组 nums ，统计并返回在 nums 中同时至少具有一个严格较小元素和一个严格较大元素的元素数目。</p><p>示例 1：</p><p>输入：nums = [11,7,2,15]<br>输出：2<br>解释：元素 7 ：严格较小元素是元素 2 ，严格较大元素是元素 11 。<br>元素 11 ：严格较小元素是元素 7 ，严格较大元素是元素 15 。<br>总计有 2 个元素都满足在 nums 中同时存在一个严格较小元素和一个严格较大元素。<br>示例 2：</p><p>输入：nums = [-3,3,3,90]<br>输出：2<br>解释：元素 3 ：严格较小元素是元素 -3 ，严格较大元素是元素 90 。<br>由于有两个元素的值为 3 ，总计有 2 个元素都满足在 nums 中同时存在一个严格较小元素和一个严格较大元素。</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 100<br>-105 &lt;= nums[i] &lt;= 105</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/count-elements-with-strictly-smaller-and-greater-elements" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-elements-with-strictly-smaller-and-greater-elements</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1-先排序，然后去掉相同的最大值和相同的最小值，取长度"><a href="#解1-先排序，然后去掉相同的最大值和相同的最小值，取长度" class="headerlink" title="解1 先排序，然后去掉相同的最大值和相同的最小值，取长度"></a>解1 先排序，然后去掉相同的最大值和相同的最小值，取长度</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 先排序，然后去掉相同的最大值和相同的最小值，取长度</span></span><br><span class="line"><span class="keyword">var</span> countElements = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(countElements([11,7,2,15]));</span></span><br></pre></td></tr></table></figure><h2 id="解2"><a href="#解2" class="headerlink" title="解2"></a>解2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countElements = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> max = <span class="built_in">Math</span>.max(...nums)</span><br><span class="line">  <span class="keyword">let</span> min = <span class="built_in">Math</span>.min(...nums)</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] &gt; min &amp;&amp; nums[i] &lt; max) &#123;</span><br><span class="line">      res++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(countElements([11,7,2,15]));</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-193. 有效电话号码</title>
    <link href="https://ferrerobomb.github.io/2022/03/05/leetcode-193.%20%E6%9C%89%E6%95%88%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81/"/>
    <id>https://ferrerobomb.github.io/2022/03/05/leetcode-193. 有效电话号码/</id>
    <published>2022-03-04T19:51:47.000Z</published>
    <updated>2022-03-09T15:59:53.637Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-193-有效电话号码"><a href="#leetcode-193-有效电话号码" class="headerlink" title="leetcode-193. 有效电话号码"></a>leetcode-193. 有效电话号码</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个包含电话号码列表（一行一个电话号码）的文本文件 file.txt，写一个单行 bash 脚本输出所有有效的电话号码。</p><p>你可以假设一个有效的电话号码必须满足以下两种格式： (xxx) xxx-xxxx 或 xxx-xxx-xxxx。（x 表示一个数字）</p><p>你也可以假设每行前后没有多余的空格字符。</p><p>示例：</p><p>假设 file.txt 内容如下：</p><p>987-123-4567<br>123 456 7890<br>(123) 456-7890<br>你的脚本应当输出下列有效的电话号码：</p><p>987-123-4567<br>(123) 456-7890</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/valid-phone-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-phone-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><ul><li>[0-9]{3}<ul><li>三位数字</li></ul></li><li>[0-9]{3}-<ul><li>三位数字后面加一个-</li></ul></li><li>\([0-9]{3}\)<ul><li>小括号里面三位数字</li></ul></li><li>([0-9]{3}-|\([0-9]{3}\))<ul><li>或</li></ul></li><li>[0-9]{3}-[0-9]{4}<ul><li>三位数字-四位数字</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Read from the file file.txt and output all valid phone numbers to stdout.</span></span><br><span class="line">grep -P <span class="string">'^([0-9]&#123;3&#125;-|\([0-9]&#123;3&#125;\))[0-9]&#123;3&#125;-[0-9]&#123;4&#125;$'</span> file.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-202. 快乐数</title>
    <link href="https://ferrerobomb.github.io/2022/03/04/leetcode-202.%20%E5%BF%AB%E4%B9%90%E6%95%B0/"/>
    <id>https://ferrerobomb.github.io/2022/03/04/leetcode-202. 快乐数/</id>
    <published>2022-03-04T04:11:17.000Z</published>
    <updated>2022-03-04T04:11:36.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-202-快乐数"><a href="#leetcode-202-快乐数" class="headerlink" title="leetcode-202. 快乐数"></a>leetcode-202. 快乐数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个算法来判断一个数 n 是不是快乐数。</p><p>「快乐数」 定义为：</p><p>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。<br>然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。<br>如果这个过程 结果为 1，那么这个数就是快乐数。<br>如果 n 是 快乐数 就返回 true ；不是，则返回 false 。</p><p>示例 1：</p><p>输入：n = 19<br>输出：true<br>解释：<br>12 + 92 = 82<br>82 + 22 = 68<br>62 + 82 = 100<br>12 + 02 + 02 = 1<br>示例 2：</p><p>输入：n = 2<br>输出：false</p><p>提示：</p><p>1 &lt;= n &lt;= 231 - 1</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/happy-number" target="_blank" rel="noopener">https://leetcode-cn.com/problems/happy-number</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isHappy = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> calculate = <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> digit = num % <span class="number">10</span>;</span><br><span class="line">      res += digit ** <span class="number">2</span>;</span><br><span class="line">      num = num / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = n</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">set</span> = new Set()</span><br><span class="line">  while(res !== 1 &amp;&amp; !<span class="keyword">set</span>.has(res)) &#123;</span><br><span class="line">    <span class="comment">// 判断一下循环过了 或无限循环</span></span><br><span class="line">    <span class="keyword">set</span>.add(res)</span><br><span class="line">    res = calculate(res)</span><br><span class="line">  &#125;</span><br><span class="line">  return res === 1</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// isHappy(19)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>

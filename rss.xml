<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>橙柚养乐多的博客</title>
  
  <subtitle>记录与领悟</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="https://ferrerobomb.github.io/"/>
  <updated>2022-01-29T14:34:50.201Z</updated>
  <id>https://ferrerobomb.github.io/</id>
  
  <author>
    <name>橙柚养乐多</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode-53. 最大子数组和</title>
    <link href="https://ferrerobomb.github.io/2022/01/29/leetcode-53.%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
    <id>https://ferrerobomb.github.io/2022/01/29/leetcode-53.最大子数组和/</id>
    <published>2022-01-29T11:53:21.000Z</published>
    <updated>2022-01-29T14:34:50.201Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-53-最大子数组和"><a href="#leetcode-53-最大子数组和" class="headerlink" title="leetcode-53. 最大子数组和"></a>leetcode-53. 最大子数组和</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p>子数组 是数组中的一个连续部分。</p><p>示例 1：</p><p>输入：nums = [-2,1,-3,4,-1,2,1,-5,4]<br>输出：6<br>解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。<br>示例 2：</p><p>输入：nums = [1]<br>输出：1<br>示例 3：</p><p>输入：nums = [5,4,-1,7,8]<br>输出：23</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 105<br>-104 &lt;= nums[i] &lt;= 104</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/maximum-subarray" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-subarray</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 确定dp数组（dp table）以及下标的含义</span></span><br><span class="line">  <span class="comment">// 确定递推公式</span></span><br><span class="line">  <span class="comment">// dp数组如何初始化</span></span><br><span class="line">  <span class="comment">// 确定遍历顺序</span></span><br><span class="line">  <span class="comment">// 举例推导dp数组</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 动态规划的是首先对数组进行遍历，当前最大连续子序列和为 sum，结果为 ans</span></span><br><span class="line">  <span class="comment">// 如果 sum &gt; 0，则说明 sum 对结果有增益效果，则 sum 保留并加上当前遍历数字</span></span><br><span class="line">  <span class="comment">// 如果 sum &lt;= 0，则说明 sum 对结果无增益效果，需要舍弃，则 sum 直接更新为当前遍历数字</span></span><br><span class="line">  <span class="comment">// 每次比较 sum 和 ans的大小，将最大值置为ans，遍历结束返回结果</span></span><br><span class="line">  <span class="comment">// 时间复杂度：O(n)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义sum为临时最大值， result为最后输出最大值</span></span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>, result = nums[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> nums) &#123;</span><br><span class="line">      <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 当前（截止上一轮计算的）sum是正数，则sum+num为新的最大</span></span><br><span class="line">          sum += num</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 当前sum为负  则前面的必不是最大，中断连续，重置sum为num(新连续的开始)</span></span><br><span class="line">          sum = num </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 每轮比较大小 取最大数为最终答案</span></span><br><span class="line">      result = <span class="built_in">Math</span>.max(result, sum)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(maxSubArray([<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-3</span>,<span class="number">4</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-5</span>,<span class="number">4</span>]));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-3.无重复字符的最长子串</title>
    <link href="https://ferrerobomb.github.io/2022/01/26/leetcode-3.%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <id>https://ferrerobomb.github.io/2022/01/26/leetcode-3.无重复字符的最长子串/</id>
    <published>2022-01-26T15:10:26.000Z</published>
    <updated>2022-01-28T15:06:43.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-3-无重复字符的最长子串"><a href="#leetcode-3-无重复字符的最长子串" class="headerlink" title="leetcode-3.无重复字符的最长子串"></a>leetcode-3.无重复字符的最长子串</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。</p><p>示例 1:</p><p>输入: s = “abcabcbb”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。<br>示例 2:</p><p>输入: s = “bbbbb”<br>输出: 1<br>解释: 因为无重复字符的最长子串是 “b”，所以其长度为 1。<br>示例 3:</p><p>输入: s = “pwwkew”<br>输出: 3<br>解释: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>     请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。<br>示例 4:</p><p>输入: s = “”<br>输出: 0</p><p>提示：</p><p>0 &lt;= s.length &lt;= 5 * 104<br>s 由英文字母、数字、符号和空格组成</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//  方法1 滑动窗口</span></span><br><span class="line"><span class="comment">// 思考 如果要求输出最长的子串值该如何做</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []; <span class="comment">// 定义数组用作滑动窗口</span></span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>; <span class="comment">// 最大长度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = arr.indexOf(s[i]) <span class="comment">// 滑动窗口内有没有重复</span></span><br><span class="line">        <span class="keyword">if</span>(index !== <span class="number">-1</span>) &#123; <span class="comment">// 有重复的 则只保留重复字符+1 到结尾的元素</span></span><br><span class="line">            arr.splice(<span class="number">0</span>, index+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        arr.push(s.charAt(i)) <span class="comment">// 新增元素</span></span><br><span class="line">        max = <span class="built_in">Math</span>.max(arr.length, max) <span class="comment">// max和新数组长度比较大小</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-322.零钱兑换</title>
    <link href="https://ferrerobomb.github.io/2022/01/26/leetcode-322-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/"/>
    <id>https://ferrerobomb.github.io/2022/01/26/leetcode-322-零钱兑换/</id>
    <published>2022-01-26T15:10:26.000Z</published>
    <updated>2022-01-27T15:47:23.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-322-零钱兑换"><a href="#leetcode-322-零钱兑换" class="headerlink" title="leetcode-322.零钱兑换"></a>leetcode-322.零钱兑换</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数数组 coins ，表示不同面额的硬币；以及一个整数 amount ，表示总金额。</p><p>计算并返回可以凑成总金额所需的 最少的硬币个数 。如果没有任何一种硬币组合能组成总金额，返回 -1 。</p><p>你可以认为每种硬币的数量是无限的。</p><p>示例 1：</p><p>输入：coins = [1, 2, 5], amount = 11<br>输出：3<br>解释：11 = 5 + 5 + 1<br>示例 2：</p><p>输入：coins = [2], amount = 3<br>输出：-1<br>示例 3：</p><p>输入：coins = [1], amount = 0<br>输出：0<br>示例 4：</p><p>输入：coins = [1], amount = 1<br>输出：1<br>示例 5：</p><p>输入：coins = [1], amount = 2<br>输出：2</p><p>提示：</p><p>1 &lt;= coins.length &lt;= 12<br>1 &lt;= coins[i] &lt;= 231 - 1<br>0 &lt;= amount &lt;= 104</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/coin-change" target="_blank" rel="noopener">https://leetcode-cn.com/problems/coin-change</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; coins</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; amount</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="comment">// dp[i] = min(dp[i-1],dp[i-2],dp[i-5])+1</span></span><br><span class="line"><span class="comment">// 方法1 依次循环的动态规划 dp[i] = Min(dp[i], dp[i-num])</span></span><br><span class="line"><span class="keyword">var</span> coinChange = <span class="function"><span class="keyword">function</span>(<span class="params">coins, amount</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(amount+<span class="number">1</span>).fill(<span class="built_in">Number</span>.MAX_SAFE_INTEGER);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> coins) &#123;</span><br><span class="line">        <span class="comment">// console.log(`let $&#123;num&#125; of [$&#123;coins&#125;]`)</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=num; i&lt;=amount; i++) &#123;</span><br><span class="line">            dp[i] = <span class="built_in">Math</span>.min(dp[i],dp[i-num]+<span class="number">1</span>);</span><br><span class="line">            <span class="comment">// console.log(`dp[$&#123;i&#125;] = Math.min(dp[$&#123;i&#125;],dp[$&#123;i&#125;-$&#123;num&#125;]+1)`, dp[i])</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[amount] === <span class="built_in">Number</span>.MAX_SAFE_INTEGER ? <span class="number">-1</span> : dp[amount];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-模板</title>
    <link href="https://ferrerobomb.github.io/2022/01/26/leetcode-%E6%A8%A1%E7%89%88/"/>
    <id>https://ferrerobomb.github.io/2022/01/26/leetcode-模版/</id>
    <published>2022-01-26T15:10:26.000Z</published>
    <updated>2022-01-28T15:07:34.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-模板"><a href="#leetcode-模板" class="headerlink" title="leetcode-模板"></a>leetcode-模板</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-2.两数相加</title>
    <link href="https://ferrerobomb.github.io/2022/01/25/leetcode-2.%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <id>https://ferrerobomb.github.io/2022/01/25/leetcode-2.两数相加/</id>
    <published>2022-01-25T12:16:23.000Z</published>
    <updated>2022-01-27T15:47:31.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-2-两数相加"><a href="#leetcode-2-两数相加" class="headerlink" title="leetcode-2.两数相加"></a>leetcode-2.两数相加</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例 1：</p><p>输入：l1 = [2,4,3], l2 = [5,6,4]<br>输出：[7,0,8]<br>解释：342 + 465 = 807.<br>示例 2：</p><p>输入：l1 = [0], l2 = [0]<br>输出：[0]<br>示例 3：</p><p>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>输出：[8,9,9,9,0,0,0,1]</p><p>提示：</p><p>每个链表中的节点数在范围 [1, 100] 内<br>0 &lt;= Node.val &lt;= 9<br>题目数据保证列表表示的数字不含前导零</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-two-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; l1</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; l2</span></span><br><span class="line"><span class="comment"> * @return &#123;ListNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//  注意审题  逆序</span></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = l1;</span><br><span class="line">    <span class="keyword">let</span> p2 = l2;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> ListNode(<span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">let</span> p = dummy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> carry = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(p1 !== <span class="literal">null</span> || p2 !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> val = carry</span><br><span class="line">        <span class="keyword">if</span> (p1 !== <span class="literal">null</span>) &#123;</span><br><span class="line">            val += p1.val</span><br><span class="line">            p1 = p1.next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (p2 !== <span class="literal">null</span>) &#123;</span><br><span class="line">            val += p2.val</span><br><span class="line">            p2 = p2.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理数值和进位</span></span><br><span class="line">        carry = <span class="built_in">Math</span>.floor(val / <span class="number">10</span>)</span><br><span class="line">        val = val % <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 去掉头部虚拟节点</span></span><br><span class="line">        p.next = <span class="keyword">new</span> ListNode(val)</span><br><span class="line">        p = p.next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dummy.next</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-70.爬楼梯</title>
    <link href="https://ferrerobomb.github.io/2022/01/24/leetcode-70.%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
    <id>https://ferrerobomb.github.io/2022/01/24/leetcode-70.爬楼梯/</id>
    <published>2022-01-24T15:10:26.000Z</published>
    <updated>2022-01-27T15:47:39.994Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-70-爬楼梯"><a href="#leetcode-70-爬楼梯" class="headerlink" title="leetcode-70.爬楼梯"></a>leetcode-70.爬楼梯</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>假设你正在爬楼梯。需要 n 阶你才能到达楼顶。</p><p>每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>示例 1：</p><p>输入：n = 2<br>输出：2<br>解释：有两种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶</li><li>2 阶<br>示例 2：</li></ol><p>输入：n = 3<br>输出：3<br>解释：有三种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶 + 1 阶</li><li>1 阶 + 2 阶</li><li>2 阶 + 1 阶</li></ol><p>提示：</p><p>1 &lt;= n &lt;= 45</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/climbing-stairs" target="_blank" rel="noopener">https://leetcode-cn.com/problems/climbing-stairs</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>).fill(<span class="number">0</span>)</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dp[i] = dp[i<span class="number">-1</span>] + dp[i - <span class="number">2</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-79.单词搜索</title>
    <link href="https://ferrerobomb.github.io/2022/01/23/leetcode-79.%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2/"/>
    <id>https://ferrerobomb.github.io/2022/01/23/leetcode-79.单词搜索/</id>
    <published>2022-01-22T16:00:00.000Z</published>
    <updated>2022-01-27T15:48:32.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-79-单词搜索"><a href="#leetcode-79-单词搜索" class="headerlink" title="leetcode-79.单词搜索"></a>leetcode-79.单词搜索</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true ；否则，返回 false 。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><p>示例 1：</p><p>输入：board = [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word = “ABCCED”<br>输出：true<br>示例 2：</p><p>输入：board = [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word = “SEE”<br>输出：true<br>示例 3：</p><p>输入：board = [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word = “ABCB”<br>输出：false</p><p>提示：</p><p>m == board.length<br>n = board[i].length<br>1 &lt;= m, n &lt;= 6<br>1 &lt;= word.length &lt;= 15<br>board 和 word 仅由大小写英文字母组成</p><p>进阶：你可以使用搜索剪枝的技术来优化解决方案，使其在 board 更大的情况下可以更快解决问题？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/word-search" target="_blank" rel="noopener">https://leetcode-cn.com/problems/word-search</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;character[][]&#125; board</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; word</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> exist = <span class="function"><span class="keyword">function</span>(<span class="params">board, word</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;board.length;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;board[<span class="number">0</span>].length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dfs(board,word,i,j,<span class="number">0</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">board,word,i,j,k</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 递归的base case，处理边界和核心匹配逻辑</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span>||j&lt;<span class="number">0</span>||i&gt;=board.length||j&gt;=board[<span class="number">0</span>].length||board[i][j]!==word[k])&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 成功匹配结尾 跳出</span></span><br><span class="line">        <span class="keyword">if</span>(k===word.length<span class="number">-1</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        board[i][j] =<span class="string">''</span> <span class="comment">// 标记下已经查找过的</span></span><br><span class="line">        <span class="comment">// !上下左右 每次进去 k+1==&gt;表示 走了多少步</span></span><br><span class="line">        <span class="keyword">let</span> res =dfs(board,word,i<span class="number">-1</span>,j,k+<span class="number">1</span>)||dfs(board,word,i+<span class="number">1</span>,j,k+<span class="number">1</span>)||dfs(board,word,i,j<span class="number">-1</span>,k+<span class="number">1</span>)||dfs(board,word,i,j+<span class="number">1</span>,k+<span class="number">1</span>)</span><br><span class="line">        <span class="comment">// 每批递归结束后 还原word</span></span><br><span class="line">        board[i][j]=word[k]</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-22.括号生成</title>
    <link href="https://ferrerobomb.github.io/2022/01/22/leetcode-22.%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/"/>
    <id>https://ferrerobomb.github.io/2022/01/22/leetcode-22.括号生成/</id>
    <published>2022-01-21T16:00:00.000Z</published>
    <updated>2022-01-27T15:48:46.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-22-括号生成"><a href="#leetcode-22-括号生成" class="headerlink" title="leetcode-22.括号生成"></a>leetcode-22.括号生成</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</p><p>示例 1：</p><p>输入：n = 3<br>输出：[“((()))”,”(()())”,”(())()”,”()(())”,”()()()”]<br>示例 2：</p><p>输入：n = 1<br>输出：[“()”]</p><p>提示：</p><p>1 &lt;= n &lt;= 8</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/generate-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/generate-parentheses</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;string[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法1 回溯递归</span></span><br><span class="line"><span class="keyword">var</span> generateParenthesis = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dfs = <span class="function">(<span class="params">lRemain, rRemain, str</span>) =&gt;</span> &#123; <span class="comment">// 左右括号所剩的数量，str是当前构建的字符串</span></span><br><span class="line">    <span class="comment">// console.log(str)</span></span><br><span class="line">    <span class="keyword">if</span> (str.length == <span class="number">2</span> * n) &#123; <span class="comment">// 字符串构建完成</span></span><br><span class="line">      res.push(str);           <span class="comment">// 加入解集</span></span><br><span class="line">      <span class="keyword">return</span>;                  <span class="comment">// 结束当前递归分支</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lRemain &gt; <span class="number">0</span>) &#123;         <span class="comment">// 只要左括号有剩，就可以选它，然后继续做选择（递归）</span></span><br><span class="line">      dfs(lRemain - <span class="number">1</span>, rRemain, str + <span class="string">"("</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lRemain &lt; rRemain) &#123;   <span class="comment">// 右括号比左括号剩的多，才能选右括号</span></span><br><span class="line">      dfs(lRemain, rRemain - <span class="number">1</span>, str + <span class="string">")"</span>); <span class="comment">// 然后继续做选择（递归）</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  dfs(n, n, <span class="string">""</span>); <span class="comment">// 递归的入口，剩余数量都是n，初始字符串是空串</span></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;string[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//  方法2 动态规划</span></span><br><span class="line"><span class="comment">// dp[n] = (dp[p]) + dp[q] </span></span><br><span class="line"><span class="comment">// p+q+1=n</span></span><br><span class="line"><span class="keyword">var</span> generateParenthesis = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  data.set(<span class="number">0</span>, [<span class="string">''</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">let</span> center = data.get(j);</span><br><span class="line">      <span class="keyword">let</span> right = data.get(i - <span class="number">1</span> - j);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; center.length; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> t = <span class="number">0</span>; t &lt; right.length; t++) &#123;</span><br><span class="line">          result.push(<span class="string">`(<span class="subst">$&#123;center[k]&#125;</span>)<span class="subst">$&#123;right[t]&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    data.set(i, result);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data.get(n);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-62.不同路径</title>
    <link href="https://ferrerobomb.github.io/2022/01/21/leetcode-62.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/"/>
    <id>https://ferrerobomb.github.io/2022/01/21/leetcode-62.不同路径/</id>
    <published>2022-01-20T16:00:00.000Z</published>
    <updated>2022-01-27T15:48:57.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-62-不同路径"><a href="#leetcode-62-不同路径" class="headerlink" title="leetcode-62.不同路径"></a>leetcode-62.不同路径</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p><p>问总共有多少条不同的路径？</p><p>示例 1：</p><p>输入：m = 3, n = 7<br>输出：28<br>示例 2：</p><p>输入：m = 3, n = 2<br>输出：3<br>解释：<br>从左上角开始，总共有 3 条路径可以到达右下角。</p><ol><li>向右 -&gt; 向下 -&gt; 向下</li><li>向下 -&gt; 向下 -&gt; 向右</li><li>向下 -&gt; 向右 -&gt; 向下<br>示例 3：</li></ol><p>输入：m = 7, n = 3<br>输出：28<br>示例 4：</p><p>输入：m = 3, n = 3<br>输出：6</p><p>提示：</p><p>1 &lt;= m, n &lt;= 100<br>题目数据保证答案小于等于 2 * 109</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/unique-paths" target="_blank" rel="noopener">https://leetcode-cn.com/problems/unique-paths</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法1 画图法 二维矩阵 【数学分析】</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2 动态规划</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; m</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> uniquePaths = <span class="function"><span class="keyword">function</span>(<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 确定dp数组以及下标含义；</span></span><br><span class="line">    <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(m).fill(<span class="number">0</span>).map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="number">0</span>))</span><br><span class="line">    <span class="comment">// 确定递推公式；</span></span><br><span class="line">    <span class="comment">// dp[i][j] = dp[i-1][j] + dp[i][j-1]</span></span><br><span class="line">    <span class="comment">// dp初始化；</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        dp[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 确定遍历的顺序；</span></span><br><span class="line">    <span class="comment">// 举例推导dp数组；</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j<span class="number">-1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1.两数之和</title>
    <link href="https://ferrerobomb.github.io/2022/01/20/leetcode-1.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>https://ferrerobomb.github.io/2022/01/20/leetcode-1.两数之和/</id>
    <published>2022-01-19T16:00:00.000Z</published>
    <updated>2022-01-27T15:49:15.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1-两数之和"><a href="#leetcode-1-两数之和" class="headerlink" title="leetcode-1. 两数之和"></a>leetcode-1. 两数之和</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p>示例 1：</p><p>输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。<br>示例 2：</p><p>输入：nums = [3,2,4], target = 6<br>输出：[1,2]<br>示例 3：</p><p>输入：nums = [3,3], target = 6<br>输出：[0,1]</p><p>提示：</p><p>2 &lt;= nums.length &lt;= 104<br>-109 &lt;= nums[i] &lt;= 109<br>-109 &lt;= target &lt;= 109<br>只会存在一个有效答案<br>进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//  方法一</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> other = target - nums[i];</span><br><span class="line">        <span class="keyword">let</span> index2 = nums.indexOf(other)</span><br><span class="line">        <span class="comment">// console.log(i, index2)</span></span><br><span class="line">        <span class="keyword">if</span> (index2 === <span class="number">-1</span> || i === index2) &#123;</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [i, index2]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//  方法2 哈希</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, len = nums.length; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(map.has(target - nums[i]))&#123;</span><br><span class="line">            <span class="keyword">return</span> [i, map.get(target - nums[i])];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            map.set(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-面试题01.04.回文排列</title>
    <link href="https://ferrerobomb.github.io/2022/01/19/leetcode-%E9%9D%A2%E8%AF%95%E9%A2%9801-04-%E5%9B%9E%E6%96%87%E6%8E%92%E5%88%97/"/>
    <id>https://ferrerobomb.github.io/2022/01/19/leetcode-面试题01-04-回文排列/</id>
    <published>2022-01-19T14:39:38.000Z</published>
    <updated>2022-01-27T15:49:33.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-面试题01-04-回文排列"><a href="#leetcode-面试题01-04-回文排列" class="headerlink" title="leetcode-面试题01.04.回文排列"></a>leetcode-面试题01.04.回文排列</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个字符串，编写一个函数判定其是否为某个回文串的排列之一。</p><p>回文串是指正反两个方向都一样的单词或短语。排列是指字母的重新排列。</p><p>回文串不一定是字典当中的单词。</p><p>示例1：</p><p>输入：”tactcoa”<br>输出：true（排列有”tacocat”、”atcocta”，等等）</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/palindrome-permutation-lcci" target="_blank" rel="noopener">https://leetcode-cn.com/problems/palindrome-permutation-lcci</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解法1 两个数组</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canPermutePalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr1 = [], arr2 = [];</span><br><span class="line">    <span class="keyword">let</span> arr = s.split(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr1.indexOf(arr[i]) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            arr1.push(arr[i])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr1.splice(arr1.indexOf(arr[i]), <span class="number">1</span>)</span><br><span class="line">            arr2.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> arr1.length === <span class="number">1</span> || arr1.length === <span class="number">0</span> &amp;&amp; arr2.length !== <span class="number">0</span></span><br><span class="line">   </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解2"><a href="#解2" class="headerlink" title="解2"></a>解2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解法2 哈希</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canPermutePalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> val = s[i]</span><br><span class="line">        <span class="keyword">if</span>(obj[val])&#123;</span><br><span class="line">        <span class="keyword">delete</span> obj[val]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj[val]=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(obj).length &lt;= <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-20.有效的括号</title>
    <link href="https://ferrerobomb.github.io/2022/01/18/leetcode-20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>https://ferrerobomb.github.io/2022/01/18/leetcode-20-有效的括号/</id>
    <published>2022-01-18T15:48:10.000Z</published>
    <updated>2022-01-27T15:49:39.469Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-20-有效的括号"><a href="#leetcode-20-有效的括号" class="headerlink" title="leetcode-20.有效的括号"></a>leetcode-20.有效的括号</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。</p><p>示例 1：</p><p>输入：s = “()”<br>输出：true<br>示例 2：</p><p>输入：s = “()[]{}”<br>输出：true<br>示例 3：</p><p>输入：s = “(]”<br>输出：false<br>示例 4：</p><p>输入：s = “([)]”<br>输出：false<br>示例 5：</p><p>输入：s = “{[]}”<br>输出：true</p><p>提示：</p><p>1 &lt;= s.length &lt;= 104<br>s 仅由括号 ‘()[]{}’ 组成</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/valid-parentheses" target="_blank" rel="noopener">https://leetcode-cn.com/problems/valid-parentheses</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 解法一</span></span><br><span class="line">    <span class="keyword">let</span> stack = [], length = s.length;</span><br><span class="line">    <span class="keyword">if</span>(length % <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> s)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(item)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"&#123;"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"["</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"("</span>:</span><br><span class="line">                stack.push(item);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"&#125;"</span>:</span><br><span class="line">                <span class="keyword">if</span>(stack.pop() !== <span class="string">"&#123;"</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"]"</span>:</span><br><span class="line">                <span class="keyword">if</span>(stack.pop() !== <span class="string">"["</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">")"</span>:</span><br><span class="line">                <span class="keyword">if</span>(stack.pop() !== <span class="string">"("</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !stack.length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// // 解法二</span></span><br><span class="line"><span class="comment">// var isValid = function(s) &#123;</span></span><br><span class="line"><span class="comment">//     s = s.split('');</span></span><br><span class="line"><span class="comment">//     let sl = s.length;</span></span><br><span class="line"><span class="comment">//     if (sl % 2) return false;</span></span><br><span class="line"><span class="comment">//     let map = new Map([[')', '('], [']', '['], ['&#125;', '&#123;']]);</span></span><br><span class="line"><span class="comment">//     let stack = [];</span></span><br><span class="line"><span class="comment">//     for(let i of s)&#123;</span></span><br><span class="line"><span class="comment">//         if (map.get(i)) &#123;</span></span><br><span class="line"><span class="comment">//             if (stack[stack.length - 1] !== map.get(i)) return false;</span></span><br><span class="line"><span class="comment">//             else stack.pop();</span></span><br><span class="line"><span class="comment">//         &#125; else &#123;</span></span><br><span class="line"><span class="comment">//             stack.push(i);</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     return !stack.length;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-54.螺旋矩阵</title>
    <link href="https://ferrerobomb.github.io/2022/01/17/leetcode-54-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
    <id>https://ferrerobomb.github.io/2022/01/17/leetcode-54-螺旋矩阵/</id>
    <published>2022-01-17T15:10:43.000Z</published>
    <updated>2022-01-27T15:49:45.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-54-螺旋矩阵"><a href="#leetcode-54-螺旋矩阵" class="headerlink" title="leetcode-54.螺旋矩阵"></a>leetcode-54.螺旋矩阵</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。</p><p>示例 1：</p><p>输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]<br>输出：[1,2,3,6,9,8,7,4,5]<br>示例 2：</p><p>输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]<br>输出：[1,2,3,4,8,12,11,10,9,5,6,7]</p><p>提示：</p><p>m == matrix.length<br>n == matrix[i].length<br>1 &lt;= m, n &lt;= 10<br>-100 &lt;= matrix[i][j] &lt;= 100</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/spiral-matrix" target="_blank" rel="noopener">https://leetcode-cn.com/problems/spiral-matrix</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-for=&quot;(row, index) in matrix&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">  &lt;div v-for=&quot;(item, index) in row&quot; :key=&quot;index&quot; style=&quot;display: inline-block; width: 22px; border: 1px solid red;text-align: center&quot;&gt;</span><br><span class="line">    &#123;&#123;item&#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一 直接遍历法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; matrix</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> spiralOrder = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">if</span>(matrix==<span class="literal">null</span> || matrix.length===<span class="number">0</span>) <span class="keyword">return</span> result;</span><br><span class="line">    <span class="comment">/* 设置上下左右四个指针 */</span></span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> right = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> top = <span class="number">0</span>; <span class="comment">// 第几行</span></span><br><span class="line">    <span class="keyword">let</span> bottom = matrix.length - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* 矩阵中未处理元素总个数，长*宽，循环用 */</span></span><br><span class="line">    <span class="keyword">let</span> numEle = matrix.length * matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">while</span> (numEle &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">/* 从(0, 0) 开始遍历，按题目顺序为 上 右 下 左。</span></span><br><span class="line"><span class="comment">          注意边界处理。每步操作之后要重新设置上面5个配置项</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt;= right &amp;&amp; numEle &gt;= <span class="number">1</span>; i++) &#123;</span><br><span class="line">        result.push(matrix[top][i]);</span><br><span class="line">        numEle--;</span><br><span class="line">      &#125;</span><br><span class="line">      top++;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = top; i &lt;= bottom &amp;&amp; numEle &gt;= <span class="number">1</span>; i++) &#123;</span><br><span class="line">        result.push(matrix[i][right]);</span><br><span class="line">        numEle--;</span><br><span class="line">      &#125;</span><br><span class="line">      right--;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = right; i &gt;= left &amp;&amp; numEle &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        result.push(matrix[bottom][i]);</span><br><span class="line">        numEle--;</span><br><span class="line">      &#125;</span><br><span class="line">      bottom--;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = bottom; i &gt;= top &amp;&amp; numEle &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        result.push(matrix[i][left]);</span><br><span class="line">        numEle--;</span><br><span class="line">      &#125;</span><br><span class="line">      left++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-198.打家劫舍</title>
    <link href="https://ferrerobomb.github.io/2022/01/16/leetcode-198-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/"/>
    <id>https://ferrerobomb.github.io/2022/01/16/leetcode-198-打家劫舍/</id>
    <published>2022-01-16T15:10:13.000Z</published>
    <updated>2022-01-27T15:49:52.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-198-打家劫舍"><a href="#leetcode-198-打家劫舍" class="headerlink" title="leetcode-198.打家劫舍"></a>leetcode-198.打家劫舍</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。</p><p>示例 1：</p><p>输入：[1,2,3,1]<br>输出：4<br>解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>     偷窃到的最高金额 = 1 + 3 = 4 。<br>示例 2：</p><p>输入：[2,7,9,3,1]<br>输出：12<br>解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。<br>     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 100<br>0 &lt;= nums[i] &lt;= 400</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/house-robber" target="_blank" rel="noopener">https://leetcode-cn.com/problems/house-robber</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment">     * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment">     * 2 7 9 3 1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">// 解法一 递归 溢出</span></span><br><span class="line"><span class="comment">// rob(nums) &#123;</span></span><br><span class="line"><span class="comment">//   // console.log('nums ===', nums);</span></span><br><span class="line"><span class="comment">//   if (nums === null || nums.length === 0) &#123;</span></span><br><span class="line"><span class="comment">//     return 0</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   if (nums.length === 1) &#123;</span></span><br><span class="line"><span class="comment">//     return nums[0]</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   if (nums.length === 2) &#123;</span></span><br><span class="line"><span class="comment">//     return Math.max(nums[0], nums[1])</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   let num1 = [...nums];</span></span><br><span class="line"><span class="comment">//   num1.splice(nums.length-2,2);</span></span><br><span class="line"><span class="comment">//   let num2 = [...nums];</span></span><br><span class="line"><span class="comment">//   num2.splice(nums.length-1,1);</span></span><br><span class="line"><span class="comment">//   let num3 = [...nums];</span></span><br><span class="line"><span class="comment">//   // console.log('num1 ===', num1);</span></span><br><span class="line"><span class="comment">//   // console.log('num2 ===', num2);</span></span><br><span class="line"><span class="comment">//   return Math.max(this.rob(num1) + num3[num3.length - 1], this.rob(num2))</span></span><br><span class="line"><span class="comment">// &#125;,</span></span><br><span class="line"><span class="comment">// 解法2 正确动态规划</span></span><br><span class="line">rob(nums) &#123;</span><br><span class="line">  <span class="comment">// console.log('rob开始');</span></span><br><span class="line">  <span class="comment">// console.log(nums);</span></span><br><span class="line">  <span class="keyword">const</span> len = nums.length</span><br><span class="line">  <span class="keyword">if</span> (len === <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(len + <span class="number">1</span>)</span><br><span class="line">  dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  dp[<span class="number">1</span>] = nums[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= len; i++) &#123;</span><br><span class="line">    dp[i] = <span class="built_in">Math</span>.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i - <span class="number">1</span>])</span><br><span class="line">    <span class="comment">// console.log(`dp[$&#123;i&#125;]`,dp[i]);</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[len]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1688-比赛中的配对次数</title>
    <link href="https://ferrerobomb.github.io/2022/01/15/leetcode-1688-%E6%AF%94%E8%B5%9B%E4%B8%AD%E7%9A%84%E9%85%8D%E5%AF%B9%E6%AC%A1%E6%95%B0/"/>
    <id>https://ferrerobomb.github.io/2022/01/15/leetcode-1688-比赛中的配对次数/</id>
    <published>2022-01-15T13:10:02.000Z</published>
    <updated>2022-01-27T15:49:59.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1688-比赛中的配对次数"><a href="#leetcode-1688-比赛中的配对次数" class="headerlink" title="leetcode-1688-比赛中的配对次数"></a>leetcode-1688-比赛中的配对次数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数 n ，表示比赛中的队伍数。比赛遵循一种独特的赛制：</p><p>如果当前队伍数是 偶数 ，那么每支队伍都会与另一支队伍配对。总共进行 n / 2 场比赛，且产生 n / 2 支队伍进入下一轮。<br>如果当前队伍数为 奇数 ，那么将会随机轮空并晋级一支队伍，其余的队伍配对。总共进行 (n - 1) / 2 场比赛，且产生 (n - 1) / 2 + 1 支队伍进入下一轮。<br>返回在比赛中进行的配对次数，直到决出获胜队伍为止。</p><p>示例 1：</p><p>输入：n = 7<br>输出：6<br>解释：比赛详情：</p><ul><li>第 1 轮：队伍数 = 7 ，配对次数 = 3 ，4 支队伍晋级。</li><li>第 2 轮：队伍数 = 4 ，配对次数 = 2 ，2 支队伍晋级。</li><li>第 3 轮：队伍数 = 2 ，配对次数 = 1 ，决出 1 支获胜队伍。<br>总配对次数 = 3 + 2 + 1 = 6<br>示例 2：</li></ul><p>输入：n = 14<br>输出：13<br>解释：比赛详情：</p><ul><li>第 1 轮：队伍数 = 14 ，配对次数 = 7 ，7 支队伍晋级。</li><li>第 2 轮：队伍数 = 7 ，配对次数 = 3 ，4 支队伍晋级。 </li><li>第 3 轮：队伍数 = 4 ，配对次数 = 2 ，2 支队伍晋级。</li><li>第 4 轮：队伍数 = 2 ，配对次数 = 1 ，决出 1 支获胜队伍。<br>总配对次数 = 7 + 3 + 2 + 1 = 13</li></ul><p>提示：</p><p>1 &lt;= n &lt;= 200</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/count-of-matches-in-tournament" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-of-matches-in-tournament</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法1 最简单的递归 性能很差 耗内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numberOfMatches = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断奇偶</span></span><br><span class="line">    <span class="comment">// 奇数</span></span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (n<span class="number">-1</span>)/<span class="number">2</span> + numberOfMatches(((n<span class="number">-1</span>)/<span class="number">2</span>) + <span class="number">1</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 偶数</span></span><br><span class="line">        <span class="keyword">return</span> n/<span class="number">2</span> + numberOfMatches(n/<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行用时：48 ms, 在所有 JavaScript 提交中击败了100.00%的用户</p><p>内存消耗：40.9 MB, 在所有 JavaScript 提交中击败了5.26%的用户</p><p>通过测试用例：200 / 200</p><h2 id="解2"><a href="#解2" class="headerlink" title="解2"></a>解2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法2 一次循环</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numberOfMatches = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">            result += (n<span class="number">-1</span>)/<span class="number">2</span></span><br><span class="line">            n = (n<span class="number">-1</span>)/<span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 偶数</span></span><br><span class="line">            result += n/<span class="number">2</span></span><br><span class="line">            n = n/<span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行用时：64 ms, 在所有 JavaScript 提交中击败了93.68%的用户</p><p>内存消耗：41.1 MB, 在所有 JavaScript 提交中击败了5.26%的用户</p><p>通过测试用例：200 / 200</p><h2 id="解3"><a href="#解3" class="headerlink" title="解3"></a>解3</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法3 动脑思考，比一次淘汰一支队伍，最后只剩一支队伍，所以一共要比n-1次</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numberOfMatches = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n<span class="number">-1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-33.搜索旋转排序数组</title>
    <link href="https://ferrerobomb.github.io/2022/01/14/leetcode-33.%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://ferrerobomb.github.io/2022/01/14/leetcode-33.搜索旋转排序数组/</id>
    <published>2022-01-14T15:19:04.000Z</published>
    <updated>2022-01-29T15:19:09.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-33-搜索旋转排序数组"><a href="#leetcode-33-搜索旋转排序数组" class="headerlink" title="leetcode-33.搜索旋转排序数组"></a>leetcode-33.搜索旋转排序数组</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>整数数组 nums 按升序排列，数组中的值 互不相同 。</p><p>在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;= k &lt; nums.length）上进行了 旋转，使数组变为 [nums[k], nums[k+1], …, nums[n-1], nums[0], nums[1], …, nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。</p><p>给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。</p><p>示例 1：</p><p>输入：nums = [4,5,6,7,0,1,2], target = 0<br>输出：4<br>示例 2：</p><p>输入：nums = [4,5,6,7,0,1,2], target = 3<br>输出：-1<br>示例 3：</p><p>输入：nums = [1], target = 0<br>输出：-1</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 5000<br>-10^4 &lt;= nums[i] &lt;= 10^4<br>nums 中的每个值都 独一无二<br>题目数据保证 nums 在预先未知的某个下标上进行了旋转<br>-10^4 &lt;= target &lt;= 10^4</p><p>进阶：你可以设计一个时间复杂度为 O(log n) 的解决方案吗？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array" target="_blank" rel="noopener">https://leetcode-cn.com/problems/search-in-rotated-sorted-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> search = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nums.indexOf(target)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> search = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// console.log(nums, target);</span></span><br><span class="line">  <span class="keyword">if</span> (!nums.length) <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">  <span class="keyword">let</span> [left, right] = [<span class="number">0</span>, nums.length - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">let</span> mid</span><br><span class="line">  <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">    </span><br><span class="line">    mid = <span class="built_in">Math</span>.floor((left+right) / <span class="number">2</span>)</span><br><span class="line">    <span class="comment">// console.log(left, mid, right, `nums[mid]=$&#123;nums[mid]&#125;`, `target=$&#123;target&#125;`);</span></span><br><span class="line">    <span class="keyword">if</span> (nums[mid] === target) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nums[mid] &gt;= nums[left]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (target &gt;= nums[left] &amp;&amp; target &lt; nums[mid]) &#123;</span><br><span class="line">          right = mid - <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          left = mid + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (target &gt; nums[mid] &amp;&amp; target &lt;= nums[right]) &#123;</span><br><span class="line">          left = mid + <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          right = mid - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(search([4,5,6,7,0,1,2], 0));</span></span><br><span class="line"><span class="comment">// console.log(search([5,6,7,0,1,2,3], 0));</span></span><br><span class="line"><span class="built_in">console</span>.log(search([<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通二分查找</span></span><br><span class="line"><span class="comment">// var search = function(nums, target) &#123;</span></span><br><span class="line"><span class="comment">//   console.log(nums, target);</span></span><br><span class="line"><span class="comment">//   if (!nums.length) return -1</span></span><br><span class="line"><span class="comment">//   let [left, right] = [0, nums.length - 1];</span></span><br><span class="line"><span class="comment">//   let mid</span></span><br><span class="line"><span class="comment">//   while (left &lt;= right) &#123;</span></span><br><span class="line"><span class="comment">//     mid = Math.floor((left+right) / 2)</span></span><br><span class="line"><span class="comment">//     // console.log(left, mid, right, `nums[mid]=$&#123;nums[mid]&#125;`, `target=$&#123;target&#125;`);</span></span><br><span class="line"><span class="comment">//     if (nums[mid] === target) &#123;</span></span><br><span class="line"><span class="comment">//         return mid</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     if (nums[mid] &lt; target) &#123;</span></span><br><span class="line"><span class="comment">//         left = mid + 1</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     if (nums[mid] &gt; target) &#123;</span></span><br><span class="line"><span class="comment">//         right = mid - 1</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   return -1</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-516.最长回文子序列</title>
    <link href="https://ferrerobomb.github.io/2021/08/19/leetcode-516-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>https://ferrerobomb.github.io/2021/08/19/leetcode-516-最长回文子序列/</id>
    <published>2021-08-19T15:33:02.000Z</published>
    <updated>2021-08-19T15:33:32.641Z</updated>
    
    <content type="html"><![CDATA[<p>/*</p><p>此内容无用</p><p>为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字</p><p>*/</p><ul><li><p><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-palindromic-subsequence/</a></p></li><li><p>动态规划 - 二位数组的数据结构</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">judge(s) &#123;</span><br><span class="line">  <span class="keyword">const</span> n = s.length;</span><br><span class="line">  <span class="keyword">const</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="number">0</span>).map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="number">0</span>));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`外层i=<span class="subst">$&#123;i&#125;</span>`</span>);</span><br><span class="line">    dp[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> c1 = s[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="keyword">const</span> c2 = s[j];</span><br><span class="line">      <span class="keyword">if</span> (c1 === c2) &#123;</span><br><span class="line">        dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dp[i][j] = <span class="built_in">Math</span>.max(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`i=<span class="subst">$&#123;i&#125;</span>, j=<span class="subst">$&#123;j&#125;</span>, c1=<span class="subst">$&#123;c1&#125;</span>, c2=<span class="subst">$&#123;c2&#125;</span>`</span>, <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(dp)));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[<span class="number">0</span>][n - <span class="number">1</span>];</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id><a href="#" class="headerlink" title=" "></a> </h1>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>leetcode-413.等差数列划分</title>
    <link href="https://ferrerobomb.github.io/2021/08/19/leetcode-413-%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%E5%88%92%E5%88%86/"/>
    <id>https://ferrerobomb.github.io/2021/08/19/leetcode-413-等差数列划分/</id>
    <published>2021-08-19T15:30:53.000Z</published>
    <updated>2021-08-19T15:32:42.328Z</updated>
    
    <content type="html"><![CDATA[<p>/*</p><p>此内容无用</p><p>为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字为了不出bug的占位文字</p><p>*/</p><ul><li><p><a href="https://leetcode-cn.com/problems/arithmetic-slices/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/arithmetic-slices/</a></p></li><li><p>动态规划解法</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numberOfArithmeticSlices = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(nums.length).fill(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i + <span class="number">1</span>] - nums[i] === nums[i] - nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">            array[i + <span class="number">1</span>] = array[i] + <span class="number">1</span>;</span><br><span class="line">            sum += array[i + <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>windows窗口在屏幕外小技巧</title>
    <link href="https://ferrerobomb.github.io/2021/08/08/windows%E7%AA%97%E5%8F%A3%E5%9C%A8%E5%B1%8F%E5%B9%95%E5%A4%96%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://ferrerobomb.github.io/2021/08/08/windows窗口在屏幕外小技巧/</id>
    <published>2021-08-08T03:31:22.000Z</published>
    <updated>2021-08-08T03:35:30.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="切换到当前窗口"><a href="#切换到当前窗口" class="headerlink" title="切换到当前窗口"></a>切换到当前窗口</h1><p>在使用多个屏幕的时候，插拔显示器链接线，屏幕会切来切去的，有的时候有的窗口就切没了，打开之后显示器上不显示。后来发现是跑到了屏幕外面。</p><p>或者手欠瞎拖也可能拖到屏幕外面。</p><p>（常见于Windows，Mac印象中好像没出过这问题</p><p>按照以下操作即可</p><ol start="0"><li><p>打开窗口进程</p></li><li><p>alt+空格</p></li><li><p>M</p></li><li><p>键盘上下左右按键</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="技巧" scheme="https://ferrerobomb.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript双等号==到底是怎么工作的---关于【抽象相等比较算法】</title>
    <link href="https://ferrerobomb.github.io/2021/08/08/JavaScript%E5%8F%8C%E7%AD%89%E5%8F%B7%E5%88%B0%E5%BA%95%E6%98%AF%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%84_%E5%85%B3%E4%BA%8E%E3%80%90%E6%8A%BD%E8%B1%A1%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83%E7%AE%97%E6%B3%95%E3%80%91/"/>
    <id>https://ferrerobomb.github.io/2021/08/08/JavaScript双等号到底是怎么工作的_关于【抽象相等比较算法】/</id>
    <published>2021-08-08T03:14:41.000Z</published>
    <updated>2021-08-19T15:45:28.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript双等号-到底是怎么工作的—关于【抽象相等比较算法】"><a href="#JavaScript双等号-到底是怎么工作的—关于【抽象相等比较算法】" class="headerlink" title="JavaScript双等号==到底是怎么工作的—关于【抽象相等比较算法】"></a>JavaScript双等号==到底是怎么工作的—关于【抽象相等比较算法】</h1><p>前置知识（没有也可以）</p><ul><li>数据类型与引用</li><li>数组,函数与对象是什么</li><li>内存</li></ul><p>正文</p><p>双等号==使用的抽象相等比较算法如下.PS:github可能显示不出图片，可以顺着链接看到，懒得弄cdn了- -</p><ul><li>最早的ES5.1标准</li></ul><p>​                 <img src="https://docimg1.docs.qq.com/image/sMQkdAD9WyI2yJkBPIW0TQ?w=1816&amp;h=1394" alt="img">        </p><ul><li>目前的最新标准-2021年08月05日</li></ul><p>​                 <img src="https://docimg9.docs.qq.com/image/_U3Fx0f7vdfylc8R6sPOVg?w=2162&amp;h=1376" alt="img">        </p><p>以下为个人实现，可能有出入，且作为一种探索。</p><ul><li>ES5</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> value2 = <span class="string">'1'</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">'abstractCompare5'</span>)[<span class="number">0</span>]</span><br><span class="line">    .addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'结果:'</span>, <span class="keyword">this</span>.abstractCompare5(value1, value2));</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eslint-disable-next-line no-unused-vars</span></span><br><span class="line">toPrimitive(input, type = <span class="string">'number'</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> primitiveTypeArray = [</span><br><span class="line">    <span class="string">'[object Null]'</span>,</span><br><span class="line">    <span class="string">'[object Undefined]'</span>,</span><br><span class="line">    <span class="string">'[object Boolean]'</span>,</span><br><span class="line">    <span class="string">'[object String]'</span>,</span><br><span class="line">    <span class="string">'[object Number]'</span>,</span><br><span class="line">  ]</span><br><span class="line">  <span class="comment">// type default is number</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(input) === <span class="string">'[object Date]'</span>) &#123;</span><br><span class="line">    type = <span class="string">'string'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">'number'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (input.valueOf) &#123;</span><br><span class="line">      <span class="keyword">if</span> (primitiveTypeArray.includes(<span class="built_in">Object</span>.prototype.toString.call(input.valueOf()))) &#123;</span><br><span class="line">        <span class="keyword">return</span> input.valueOf()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (input.toString) &#123;</span><br><span class="line">      <span class="keyword">if</span> (primitiveTypeArray.includes(<span class="built_in">Object</span>.prototype.toString.call(input.toString()))) &#123;</span><br><span class="line">        <span class="keyword">return</span> input.toString()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log('这里应当抛出异常');</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (input.toString) &#123;</span><br><span class="line">      <span class="keyword">if</span> (primitiveTypeArray.includes(<span class="built_in">Object</span>.prototype.toString.call(input.toString()))) &#123;</span><br><span class="line">        <span class="keyword">return</span> input.toString()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (input.valueOf) &#123;</span><br><span class="line">      <span class="keyword">if</span> (primitiveTypeArray.includes(<span class="built_in">Object</span>.prototype.toString.call(input.valueOf()))) &#123;</span><br><span class="line">        <span class="keyword">return</span> input.valueOf()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log('这里应当抛出异常');</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log('这里应当抛出异常');</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">abstractCompare5(x, y) &#123;</span><br><span class="line">  <span class="comment">// 1.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="built_in">Object</span>.prototype.toString.call(y)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Undefined]'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Null]'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Number]'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">isNaN</span>(x)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">isNaN</span>(x)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 这里如何判断数值相等可能要修改</span></span><br><span class="line">      <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// eslint-disable-next-line no-compare-neg-zero</span></span><br><span class="line">      <span class="keyword">if</span> (x === +<span class="number">0</span> &amp;&amp; y === <span class="number">-0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// eslint-disable-next-line no-compare-neg-zero</span></span><br><span class="line">      <span class="keyword">if</span> (x === <span class="number">-0</span> &amp;&amp; y === +<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object String]'</span>) &#123;</span><br><span class="line">      <span class="comment">// 这里如何判断字符串长度和字符位置相等可能要修改</span></span><br><span class="line">      <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Boolean]'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (x === <span class="literal">true</span> &amp;&amp; y === <span class="literal">true</span> || x === <span class="literal">false</span> &amp;&amp; y === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// *******这里 无法获得地址，故而无法判断是否为相同引用，等待解决</span></span><br><span class="line">    <span class="keyword">return</span> x === y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2.</span></span><br><span class="line">  <span class="keyword">if</span> (x === <span class="literal">null</span> &amp;&amp; y === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3.</span></span><br><span class="line">  <span class="keyword">if</span> (x === <span class="literal">undefined</span> &amp;&amp; y === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Number]'</span> &amp;&amp;</span><br><span class="line">      <span class="built_in">Object</span>.prototype.toString.call(y) === <span class="string">'[object String]'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.abstractCompare5(x, <span class="built_in">Number</span>(y))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 5.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object String]'</span> &amp;&amp;</span><br><span class="line">      <span class="built_in">Object</span>.prototype.toString.call(y) === <span class="string">'[object Number]'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.abstractCompare5(<span class="built_in">Number</span>(x), y)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 6.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Boolean]'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.abstractCompare5(<span class="built_in">Number</span>(x), y)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 7.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(y) === <span class="string">'[object Boolean]'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.abstractCompare5(x, <span class="built_in">Number</span>(y))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 8.</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object String]'</span> ||</span><br><span class="line">      <span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Number]'</span>) &amp;&amp;</span><br><span class="line">      <span class="keyword">typeof</span> y === <span class="string">'object'</span> &amp;&amp; y !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// ToPrimitive第二参数默认为number</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.abstractCompare5(x, <span class="keyword">this</span>.toPrimitive(y))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 9.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'object'</span> &amp;&amp; x !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">      (<span class="built_in">Object</span>.prototype.toString.call(y) === <span class="string">'[object String]'</span> ||</span><br><span class="line">       <span class="built_in">Object</span>.prototype.toString.call(y) === <span class="string">'[object Number]'</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// ToPrimitive第二参数默认为number</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.abstractCompare5(<span class="keyword">this</span>.toPrimitive(x), y)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 10.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>ES2021</li></ul><p>参考链接</p><p>ES5 规范 11.9.3 节 — <a href="https://262.ecma-international.org/5.1/#sec-11.9.3" target="_blank" rel="noopener">https://262.ecma-international.org/5.1/#sec-11.9.3</a></p><p><a href="http://es5.github.io/" target="_blank" rel="noopener">http://es5.github.io/</a> </p><p><a href="https://262.ecma-international.org/5.1/#sec-9" target="_blank" rel="noopener">https://262.ecma-international.org/5.1/#sec-9</a>  转换相关</p><p><a href="https://262.ecma-international.org/" target="_blank" rel="noopener">https://262.ecma-international.org/</a>  最新规范ES2021</p><p><a href="https://chromium.googlesource.com/v8/v8/+/refs/heads/main/src" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/refs/heads/main/src</a> v8源码</p><p><a href="https://gitee.com/xiaofengwuy/v8/tree/master/src" target="_blank" rel="noopener">https://gitee.com/xiaofengwuy/v8/tree/master/src</a> v8</p><p><a href="https://dorey.github.io/JavaScript-Equality-Table/" target="_blank" rel="noopener">https://dorey.github.io/JavaScript-Equality-Table/</a> 测试集</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://ferrerobomb.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>

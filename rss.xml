<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>橙柚养乐多的博客</title>
  
  <subtitle>记录</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="https://ferrerobomb.github.io/"/>
  <updated>2021-08-08T03:35:30.652Z</updated>
  <id>https://ferrerobomb.github.io/</id>
  
  <author>
    <name>橙柚养乐多</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>windows窗口在屏幕外小技巧</title>
    <link href="https://ferrerobomb.github.io/2021/08/08/windows%E7%AA%97%E5%8F%A3%E5%9C%A8%E5%B1%8F%E5%B9%95%E5%A4%96%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://ferrerobomb.github.io/2021/08/08/windows窗口在屏幕外小技巧/</id>
    <published>2021-08-08T03:31:22.000Z</published>
    <updated>2021-08-08T03:35:30.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="切换到当前窗口"><a href="#切换到当前窗口" class="headerlink" title="切换到当前窗口"></a>切换到当前窗口</h1><p>在使用多个屏幕的时候，插拔显示器链接线，屏幕会切来切去的，有的时候有的窗口就切没了，打开之后显示器上不显示。后来发现是跑到了屏幕外面。</p><p>或者手欠瞎拖也可能拖到屏幕外面。</p><p>（常见于Windows，Mac印象中好像没出过这问题</p><p>按照以下操作即可</p><ol start="0"><li><p>打开窗口进程</p></li><li><p>alt+空格</p></li><li><p>M</p></li><li><p>键盘上下左右按键</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="技巧" scheme="https://ferrerobomb.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://ferrerobomb.github.io/2021/08/08/JavaScript%E5%8F%8C%E7%AD%89%E5%8F%B7==%E5%88%B0%E5%BA%95%E6%98%AF%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%84---%E5%85%B3%E4%BA%8E%E3%80%90%E6%8A%BD%E8%B1%A1%E7%9B%B8%E7%AD%89%E6%AF%94%E8%BE%83%E7%AE%97%E6%B3%95%E3%80%91/"/>
    <id>https://ferrerobomb.github.io/2021/08/08/JavaScript双等号==到底是怎么工作的---关于【抽象相等比较算法】/</id>
    <published>2021-08-08T03:14:41.000Z</published>
    <updated>2021-08-08T03:29:47.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript双等号-到底是怎么工作的—关于【抽象相等比较算法】"><a href="#JavaScript双等号-到底是怎么工作的—关于【抽象相等比较算法】" class="headerlink" title="JavaScript双等号==到底是怎么工作的—关于【抽象相等比较算法】"></a>JavaScript双等号==到底是怎么工作的—关于【抽象相等比较算法】</h1><p>前置知识（没有也可以）</p><ul><li>数据类型与引用</li><li>数组,函数与对象是什么</li><li>内存</li></ul><p>正文</p><p>双等号==使用的抽象相等比较算法如下.PS:github可能显示不出图片，可以顺着链接看到，懒得弄cdn了- -</p><ul><li>最早的ES5.1标准</li></ul><p>​                 <img src="https://docimg1.docs.qq.com/image/sMQkdAD9WyI2yJkBPIW0TQ?w=1816&amp;h=1394" alt="img">        </p><ul><li>目前的最新标准-2021年08月05日</li></ul><p>​                 <img src="https://docimg9.docs.qq.com/image/_U3Fx0f7vdfylc8R6sPOVg?w=2162&amp;h=1376" alt="img">        </p><p>以下为个人实现，可能有出入，且作为一种探索。</p><ul><li>ES5</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> value2 = <span class="string">'1'</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">'abstractCompare5'</span>)[<span class="number">0</span>]</span><br><span class="line">    .addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'结果:'</span>, <span class="keyword">this</span>.abstractCompare5(value1, value2));</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eslint-disable-next-line no-unused-vars</span></span><br><span class="line">toPrimitive(input, type = <span class="string">'number'</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> primitiveTypeArray = [</span><br><span class="line">    <span class="string">'[object Null]'</span>,</span><br><span class="line">    <span class="string">'[object Undefined]'</span>,</span><br><span class="line">    <span class="string">'[object Boolean]'</span>,</span><br><span class="line">    <span class="string">'[object String]'</span>,</span><br><span class="line">    <span class="string">'[object Number]'</span>,</span><br><span class="line">  ]</span><br><span class="line">  <span class="comment">// type default is number</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(input) === <span class="string">'[object Date]'</span>) &#123;</span><br><span class="line">    type = <span class="string">'string'</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">'number'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (input.valueOf) &#123;</span><br><span class="line">      <span class="keyword">if</span> (primitiveTypeArray.includes(<span class="built_in">Object</span>.prototype.toString.call(input.valueOf()))) &#123;</span><br><span class="line">        <span class="keyword">return</span> input.valueOf()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (input.toString) &#123;</span><br><span class="line">      <span class="keyword">if</span> (primitiveTypeArray.includes(<span class="built_in">Object</span>.prototype.toString.call(input.toString()))) &#123;</span><br><span class="line">        <span class="keyword">return</span> input.toString()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log('这里应当抛出异常');</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (input.toString) &#123;</span><br><span class="line">      <span class="keyword">if</span> (primitiveTypeArray.includes(<span class="built_in">Object</span>.prototype.toString.call(input.toString()))) &#123;</span><br><span class="line">        <span class="keyword">return</span> input.toString()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (input.valueOf) &#123;</span><br><span class="line">      <span class="keyword">if</span> (primitiveTypeArray.includes(<span class="built_in">Object</span>.prototype.toString.call(input.valueOf()))) &#123;</span><br><span class="line">        <span class="keyword">return</span> input.valueOf()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log('这里应当抛出异常');</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log('这里应当抛出异常');</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;,</span><br><span class="line">abstractCompare5(x, y) &#123;</span><br><span class="line">  <span class="comment">// 1.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="built_in">Object</span>.prototype.toString.call(y)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Undefined]'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Null]'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Number]'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">isNaN</span>(x)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">isNaN</span>(x)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 这里如何判断数值相等可能要修改</span></span><br><span class="line">      <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// eslint-disable-next-line no-compare-neg-zero</span></span><br><span class="line">      <span class="keyword">if</span> (x === +<span class="number">0</span> &amp;&amp; y === <span class="number">-0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// eslint-disable-next-line no-compare-neg-zero</span></span><br><span class="line">      <span class="keyword">if</span> (x === <span class="number">-0</span> &amp;&amp; y === +<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object String]'</span>) &#123;</span><br><span class="line">      <span class="comment">// 这里如何判断字符串长度和字符位置相等可能要修改</span></span><br><span class="line">      <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Boolean]'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (x === <span class="literal">true</span> &amp;&amp; y === <span class="literal">true</span> || x === <span class="literal">false</span> &amp;&amp; y === <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// *******这里 无法获得地址，故而无法判断是否为相同引用，等待解决</span></span><br><span class="line">    <span class="keyword">return</span> x === y</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 2.</span></span><br><span class="line">  <span class="keyword">if</span> (x === <span class="literal">null</span> &amp;&amp; y === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3.</span></span><br><span class="line">  <span class="keyword">if</span> (x === <span class="literal">undefined</span> &amp;&amp; y === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 4.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Number]'</span> &amp;&amp;</span><br><span class="line">      <span class="built_in">Object</span>.prototype.toString.call(y) === <span class="string">'[object String]'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.abstractCompare5(x, <span class="built_in">Number</span>(y))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 5.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object String]'</span> &amp;&amp;</span><br><span class="line">      <span class="built_in">Object</span>.prototype.toString.call(y) === <span class="string">'[object Number]'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.abstractCompare5(<span class="built_in">Number</span>(x), y)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 6.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Boolean]'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.abstractCompare5(<span class="built_in">Number</span>(x), y)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 7.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(y) === <span class="string">'[object Boolean]'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.abstractCompare5(x, <span class="built_in">Number</span>(y))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 8.</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object String]'</span> ||</span><br><span class="line">      <span class="built_in">Object</span>.prototype.toString.call(x) === <span class="string">'[object Number]'</span>) &amp;&amp;</span><br><span class="line">      <span class="keyword">typeof</span> y === <span class="string">'object'</span> &amp;&amp; y !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// ToPrimitive第二参数默认为number</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.abstractCompare5(x, <span class="keyword">this</span>.toPrimitive(y))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 9.</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">'object'</span> &amp;&amp; x !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">      (<span class="built_in">Object</span>.prototype.toString.call(y) === <span class="string">'[object String]'</span> ||</span><br><span class="line">       <span class="built_in">Object</span>.prototype.toString.call(y) === <span class="string">'[object Number]'</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// ToPrimitive第二参数默认为number</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.abstractCompare5(<span class="keyword">this</span>.toPrimitive(x), y)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 10.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>ES2021</li></ul><p>参考链接</p><p>ES5 规范 11.9.3 节 — <a href="https://262.ecma-international.org/5.1/#sec-11.9.3" target="_blank" rel="noopener">https://262.ecma-international.org/5.1/#sec-11.9.3</a></p><p><a href="http://es5.github.io/" target="_blank" rel="noopener">http://es5.github.io/</a> </p><p><a href="https://262.ecma-international.org/5.1/#sec-9" target="_blank" rel="noopener">https://262.ecma-international.org/5.1/#sec-9</a>  转换相关</p><p><a href="https://262.ecma-international.org/" target="_blank" rel="noopener">https://262.ecma-international.org/</a>  最新规范ES2021</p><p><a href="https://chromium.googlesource.com/v8/v8/+/refs/heads/main/src" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/refs/heads/main/src</a> v8源码</p><p><a href="https://gitee.com/xiaofengwuy/v8/tree/master/src" target="_blank" rel="noopener">https://gitee.com/xiaofengwuy/v8/tree/master/src</a> v8</p><p><a href="https://dorey.github.io/JavaScript-Equality-Table/" target="_blank" rel="noopener">https://dorey.github.io/JavaScript-Equality-Table/</a> 测试集</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://ferrerobomb.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>输入框按下键盘的事件</title>
    <link href="https://ferrerobomb.github.io/2021/05/12/%E8%BE%93%E5%85%A5%E6%A1%86%E6%8C%89%E4%B8%8B%E9%94%AE%E7%9B%98%E7%9A%84%E4%BA%8B%E4%BB%B6/"/>
    <id>https://ferrerobomb.github.io/2021/05/12/输入框按下键盘的事件/</id>
    <published>2021-05-11T16:29:08.000Z</published>
    <updated>2021-05-11T16:46:11.770Z</updated>
    
    <content type="html"><![CDATA[<p>一个经常遇到的场景，输入框按下回车</p><p>一个经常遇到的场景，输入框按下回车</p><p>一个经常遇到的场景，输入框按下回车</p><p>一个经常遇到的场景，输入框按下回车</p><p>一个经常遇到的场景，输入框按下回车</p><p>那么按下回车之后会发生什么，有三个事件，按以下顺序触发，可自行尝试</p><ul><li>keydown </li><li>keypress</li><li>keyup </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue </span></span><br><span class="line"><span class="comment">// 仅尝试了chrome环境</span></span><br><span class="line"><span class="comment">// @keydown.native="handleKeyDown($event)"</span></span><br><span class="line"><span class="comment">// @keypress.native="handleKeyDown($event)"</span></span><br><span class="line"><span class="comment">// @keyup.native="handleKeyDown($event)"</span></span><br><span class="line"><span class="comment">// 这个需求是用户想ctrl+enter是换行，直接按enter是发送</span></span><br><span class="line"><span class="comment">// 关于判断的方法，最新的推荐写法是直接判断key，都写上的原因是增加兼容性</span></span><br><span class="line"><span class="comment">// 还可以增加防抖</span></span><br><span class="line"></span><br><span class="line">handleKeyDown (event) &#123;</span><br><span class="line">  <span class="keyword">let</span> e = <span class="built_in">arguments</span>[<span class="number">0</span>]</span><br><span class="line">  <span class="comment">// console.log(e.key, e)</span></span><br><span class="line">  <span class="keyword">if</span> (e.key === <span class="string">'Enter'</span> || e.code === <span class="string">'Enter'</span> || e.keyCode === <span class="number">13</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.ctrlKey) &#123;</span><br><span class="line">      <span class="keyword">this</span>.textarea += <span class="string">'\n'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 点击了enter触发</span></span><br><span class="line">      event.preventDefault() <span class="comment">// 默认换行，阻止</span></span><br><span class="line">      <span class="keyword">this</span>.sendData()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>用keydown遇到一个坑，用户输入的时候会有中英文一起输入的时候。这种情况标准操作肯定是输入完中文，切换到英文输入法，再输入英文，再切换中文输入法，再循环。但是我们经常一直使用中文输入法，遇到英文就打出来再按回车，这种情况会出现将输入框中已经写好的中文发送出去，同时将英文写进输入框，不符合要求。</p><p>【解决方法】换成keypress即可</p><p>不同浏览器环境等待研究</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JSON.stringify模拟实现的学习与研究</title>
    <link href="https://ferrerobomb.github.io/2021/04/02/JSON-stringify%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E7%A0%94%E7%A9%B6/"/>
    <id>https://ferrerobomb.github.io/2021/04/02/JSON-stringify模拟实现的学习与研究/</id>
    <published>2021-04-02T08:42:28.000Z</published>
    <updated>2021-04-13T08:50:29.298Z</updated>
    
    <content type="html"><![CDATA[<ul><li>JSON.stringify模拟实现的学习与研究</li><li>JSON.stringify模拟实现的学习与研究</li><li>JSON.stringify模拟实现的学习与研究</li></ul><p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=5001771&auto=1&height=66"></iframe><br>模拟实现的JSON.stringify涉及到JavaScript的类型判断和递归知识，还有一些展示形式为什么会这样，比如是否有引号，单引号双引号<br>吃透这个方法感觉能有不错的帮助。这篇就打算彻底写清楚数据类型，表现形式以及为什么</p><p>关于JavaScript的数据类型，随着JavaScript的发展，数据类型不断增多，截止到2021年4月11日</p><p>分为基础数据类型和引用数据类型 ，大类只有以下7种</p><ul><li>基础数据类型（简单数据类型、原始数据类型）：数据存放于栈内存<ul><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li><li>Symbol</li></ul></li></ul><ul><li><p>引用数据类型（复杂数据类型）：数据存放于堆内存</p><ul><li>Object</li><li>Date（Object）</li><li>RegExp（Object）</li><li>Array（Object）</li><li>Function（Object）</li><li>Map、WeakMap（Object）</li><li>Set、WeakSet（Object）</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object.prototype.toString.call()方法</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>)); <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) === <span class="string">'[object Undefined]'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">//基础数据类型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>)); <span class="comment">// [object Undefined]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>)); <span class="comment">// [object Null]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>)); <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="number">123</span>));    <span class="comment">// [object Number]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="string">'123'</span>)) ;   <span class="comment">// [object String]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Symbol</span>())) ;   <span class="comment">// [object String]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(BigInt(<span class="number">9007199254740991</span>))) ;   <span class="comment">// [object BigInt]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="number">9007199254740991</span>n)) ;   <span class="comment">// [object BigInt]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>n)) ;   <span class="comment">// [object BigInt]</span></span><br><span class="line"><span class="comment">//引用数据类型</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Object</span>())) ;   <span class="comment">// [object Object]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>())); <span class="comment">// [object Date]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">RegExp</span>())); <span class="comment">// [object RegExp]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">0</span>))); <span class="comment">// [object Array]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call([])); <span class="comment">// [object Array]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Function</span>())); <span class="comment">// [object Function]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Set</span>())); <span class="comment">// [object Set]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">WeakSet</span>())); <span class="comment">// [object WeakSet]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Map</span>())); <span class="comment">// [object Map]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">WeakMap</span>())); <span class="comment">// [object WeakMap]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Error</span>())); <span class="comment">// [object Error]</span></span><br></pre></td></tr></table></figure><p>一些重要说明 </p><ul><li>使用Object.prototype.toString.call()判断类型</li><li>typeof null === ‘object’ 的原因是null值表示一个空对象指针，有指针语义。（对他就是一个bug）</li><li><p>对象的属性可以是数值或字符串，数值会默认转换为字符串</p></li><li><p>未声明undeclared和未定义undefined不是一回事，在不同情况下需要注意一下，比如调用未声明的变量会报错，type of未声明的变量返回undefined</p></li><li>Infinity和-Infinity属于Number，NaN属于Number</li><li>Bigint</li><li>function属于Object类型，function是可调用的对象，具有内部属性[[Call]]</li><li>Array也属于Object，</li><li>json</li><li></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">easyJSONStringify</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> type = <span class="keyword">typeof</span> data;</span><br><span class="line">  <span class="keyword">if</span> (type !== <span class="string">'object'</span>) &#123; <span class="comment">// 基础数据类型</span></span><br><span class="line">    <span class="keyword">let</span> result = data;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Number</span>.isNaN(data) || data === <span class="literal">Infinity</span>) &#123;</span><br><span class="line">      result = <span class="string">'null'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">      type === <span class="string">'function'</span> ||</span><br><span class="line">      type === <span class="string">'undefined'</span> ||</span><br><span class="line">      type === <span class="string">'symbol'</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'string'</span>) &#123;</span><br><span class="line">      result = <span class="string">'"'</span> + data + <span class="string">'"'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(result);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// type === 'object' 引用数据类型</span></span><br><span class="line">    <span class="keyword">if</span> (data === <span class="literal">null</span>) &#123; <span class="comment">// 考虑 typeof null === 'object'</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">'null'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data.toJSON &amp;&amp; <span class="keyword">typeof</span> data.toJSON === <span class="string">'function'</span>) &#123; <span class="comment">// Date</span></span><br><span class="line">      <span class="keyword">return</span> easyJSONStringify(data.toJSON())</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(data)) &#123;</span><br><span class="line">      <span class="keyword">let</span> result = [];</span><br><span class="line">      data.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> typeItem = <span class="keyword">typeof</span> item;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          typeItem === <span class="string">'function'</span> ||</span><br><span class="line">          typeItem === <span class="string">'undefined'</span> ||</span><br><span class="line">          typeItem === <span class="string">'symbol'</span></span><br><span class="line">        ) &#123;</span><br><span class="line">          result[index] =  <span class="string">'null'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result[index] = easyJSONStringify(item);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> (<span class="string">`[<span class="subst">$&#123;result&#125;</span>]`</span>).replace(<span class="regexp">/'/g</span>, <span class="string">'\"'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// object</span></span><br><span class="line">      <span class="keyword">let</span> result = [];</span><br><span class="line">      <span class="built_in">Object</span>.keys(data).forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">        result.push(<span class="string">'"'</span> + item + <span class="string">'":'</span> + easyJSONStringify(data[item]));</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> (<span class="string">`&#123;<span class="subst">$&#123;result&#125;</span>&#125;`</span>).replace(<span class="regexp">/'/g</span>, <span class="string">'\"'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> de = [<span class="number">1</span>, <span class="literal">undefined</span>, <span class="literal">NaN</span>, [<span class="number">1</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="string">"b"</span>: &#123;<span class="attr">c</span> : &#123;<span class="number">1</span>: <span class="number">1</span>, <span class="string">"1"</span>: <span class="string">'2'</span>&#125;&#125;&#125;], <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(de))    <span class="comment">//[1,null,null,[1,&#123;"a":1,"b":&#123;"c":&#123;"1":"2"&#125;&#125;&#125;],3]</span></span><br><span class="line"><span class="built_in">console</span>.log(easyJSONStringify(de)) <span class="comment">//[1,null,null,[1,&#123;"a":1,"b":&#123;"c":&#123;"1":"2"&#125;&#125;&#125;],3]</span></span><br></pre></td></tr></table></figure><p>遗留问题池</p><ul><li>如何解决{1: 1, “1”: ‘2’} 后面覆盖前面的问题</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>发现hexo博客框架melody的问题</title>
    <link href="https://ferrerobomb.github.io/2021/04/02/%E5%8F%91%E7%8E%B0hexo%E5%8D%9A%E5%AE%A2%E6%A1%86%E6%9E%B6melody%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://ferrerobomb.github.io/2021/04/02/发现hexo博客框架melody的问题/</id>
    <published>2021-04-02T08:40:37.000Z</published>
    <updated>2021-04-02T08:41:58.496Z</updated>
    
    <content type="html"><![CDATA[<p>在摘要中不能出现代码框，要不然会出现移动端适配问题。（不换行）。要是有code就在每篇前面多写点吧！</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>整理完毕！</title>
    <link href="https://ferrerobomb.github.io/2021/03/31/%E6%95%B4%E7%90%86%E5%AE%8C%E6%AF%95%EF%BC%81/"/>
    <id>https://ferrerobomb.github.io/2021/03/31/整理完毕！/</id>
    <published>2021-03-31T15:56:44.000Z</published>
    <updated>2021-03-31T16:00:12.612Z</updated>
    
    <content type="html"><![CDATA[<p>本来在mac上都整理完了，由于改了环境和或者是别的什么原因（目前没查出来），又给搞炸了。<br>重新弄一下。以后这种消耗意志力的操作就Ban掉吧，老老实实一个平台发布。毕竟这台windows环境比较简单</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>重新拾起</title>
    <link href="https://ferrerobomb.github.io/2021/03/30/2021%E5%B9%B403%E6%9C%8830%E6%97%A5%E9%87%8D%E6%96%B0%E6%8B%BE%E8%B5%B7/"/>
    <id>https://ferrerobomb.github.io/2021/03/30/2021年03月30日重新拾起/</id>
    <published>2021-03-30T12:33:32.000Z</published>
    <updated>2021-03-30T16:19:33.974Z</updated>
    
    <content type="html"><![CDATA[<p>【文章链接】<br>之前那篇多终端同步有点小小的问题要修改一下。</p><ul><li>记录一下这个mac这次拾起遇到的问题<br>在外层博客模板项目拉取时遇到问题 git pull 失败，<br>报错GitHub: Permission denied (publickey). fatal: Could not read from remote repository blablabla<br>【原因】<br>【解决方法】<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for https protocol</span><br><span class="line">git remote set-url origin https://github.com/username/repository.git</span><br><span class="line">for ssh protocol</span><br><span class="line">git remote set-url origin git@github.com:username/repository.git</span><br></pre></td></tr></table></figure></li></ul><p>第二步又遇到问题<br>内层公开博客项目拉取失败。同样的报错<br>这回上面的不管用了。研究了一下是ssh key的问题，于是把本mac上的id_rsa.pub去博客项目github账号里new了一个ssh。就好了</p><p>下面进行下一步 更新博客操作。这篇文章就是测试文。</p><ul><li>测试失败<br>好了测试失败。实际结果出现了问题，虽然新的提交更新上去了，但是部署之后丢失了大量文章。直接去模板仓库看了一下发现仓库居然不是全的，这是怎么回事。</li></ul><p>虽然在19年确实重建了博客，但是之前的也做过迁移了。应该是迁移在另一台电脑做的，没有上传的问题。所以换个电脑再试试</p><p>好了现在来到了新电脑。<br>刚刚发生了惊悚事件！<br>本地新建了一个仓库直接push到线上  直接把git仓库覆盖了 ，令人窒息的操作，还好有备份<br>备份真的很重要，还有就是使用git push -f一定要谨慎，尤其是和别人合作的时候，我这个自己一个人维护的 还好</p><p>又遇到错误 部署的时候<br>FATAL Something’s wrong. Maybe you can find the solution here: <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">https://hexo.io/docs/troubleshooting.html</a><br>TypeError [ERR_INVALID_ARG_TYPE]: The “mode” argument must be integer. Received an instance of Object<br>【原因】是由于node版本过高导致<br>【解决】删除node14 下载node12<br>【想法】这有点不行，居然不能支持新版本 得想想办法</p><p>node版本切换到12，问题解决，重新上传这个新文件试试。<br>OK。成功了。至此一次重新拾起就做完了。<br>这次还比较顺利。多亏了多终端同步博客操作这篇文章记得好。要不不知还要花费多少时间。</p><p>这次准备做的事情<br>1.把这几年的旧博客梳理一下，删除一些没有必要的文章。比如一些类似于草稿或者测试之类的东西。<br>2.梳理博客的功能，之前由于没有想清楚导致造成了一些额外阻力。现在打算日记类还是记在另一个私人文档里。这里放一些技术产出、技术类思考、一些备忘代码和练习结果。<br>3.在独立页面多做技术尝试，把独立页面好好用起来</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>‘coolq机器人和流程自动化</title>
    <link href="https://ferrerobomb.github.io/2020/04/13/%E2%80%98coolq%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%92%8C%E6%B5%81%E7%A8%8B%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <id>https://ferrerobomb.github.io/2020/04/13/‘coolq机器人和流程自动化/</id>
    <published>2020-04-13T07:41:58.000Z</published>
    <updated>2020-04-13T07:42:00.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>第二本书《活着》</title>
    <link href="https://ferrerobomb.github.io/2020/04/13/%E7%AC%AC%E4%BA%8C%E6%9C%AC%E4%B9%A6%E3%80%8A%E6%B4%BB%E7%9D%80%E3%80%8B/"/>
    <id>https://ferrerobomb.github.io/2020/04/13/第二本书《活着》/</id>
    <published>2020-04-13T07:39:01.000Z</published>
    <updated>2020-04-13T07:40:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>只是很平淡的讲述了福贵多灾多难的一生，算是开始能够从文字中体会到一些当时的情景，有些灾难还是很可怕。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="note" scheme="https://ferrerobomb.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>MongoDBAtlas</title>
    <link href="https://ferrerobomb.github.io/2020/02/27/MongoDBAtlas/"/>
    <id>https://ferrerobomb.github.io/2020/02/27/MongoDBAtlas/</id>
    <published>2020-02-27T09:07:37.000Z</published>
    <updated>2020-04-13T09:00:12.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>MongoDBAtlas</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="note" scheme="https://ferrerobomb.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>终于正式读完了人生的第一本书</title>
    <link href="https://ferrerobomb.github.io/2020/02/27/%E7%BB%88%E4%BA%8E%E6%AD%A3%E5%BC%8F%E8%AF%BB%E5%AE%8C%E4%BA%86%E4%BA%BA%E7%94%9F%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9C%AC%E4%B9%A6/"/>
    <id>https://ferrerobomb.github.io/2020/02/27/终于正式读完了人生的第一本书/</id>
    <published>2020-02-27T09:07:37.000Z</published>
    <updated>2020-02-27T09:12:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>终于读完了《乔布斯传》，用了……2年？</p><p>开始选下一本书。</p><p>想写点什么，但是又不会写。乔布斯是一个伟大的人，他创造了伟大的产品，改变了世界。他身上有种种优点，和种种缺点。他一生都在追随者自己内心的想法走，和种种偶然的成功不一样，他的成功，是一种必然。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="note" scheme="https://ferrerobomb.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-94/144/145-二叉树的遍历</title>
    <link href="https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <id>https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-二叉树的遍历/</id>
    <published>2020-02-26T07:56:33.000Z</published>
    <updated>2020-02-26T08:37:32.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal" target="_blank" rel="noopener">二叉树的前序遍历</a></li><li>解1.递归</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> root? [root.val, ...preorderTraversal(root.left), ...preorderTraversal(root.right)] : [];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>解2.迭代</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        stack.push(root)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = stack.pop()</span><br><span class="line">        result.push(node.val)</span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">        stack.push(node.right)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">        stack.push(node.left)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal" target="_blank" rel="noopener">二叉树的中序遍历</a></li><li>解1.递归</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> root? [...inorderTraversal(root.left), root.val, ...inorderTraversal(root.right)] : [];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal" target="_blank" rel="noopener">二叉树的后序遍历</a></li><li>解1.递归</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> root? [...postorderTraversal(root.left), ...postorderTraversal(root.right), root.val] : [];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>解2.前序遍历稍作修改</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">if</span> (root) &#123;</span><br><span class="line">        stack.push(root)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = stack.pop()</span><br><span class="line">        result.push(node.val)</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">        stack.push(node.left)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">        stack.push(node.right)</span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.reverse()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-面试题32-II-从上到下打印二叉树II</title>
    <link href="https://ferrerobomb.github.io/2020/02/25/leetcode-%E9%9D%A2%E8%AF%95%E9%A2%9832-II-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91II/"/>
    <id>https://ferrerobomb.github.io/2020/02/25/leetcode-面试题32-II-从上到下打印二叉树II/</id>
    <published>2020-02-25T04:15:05.000Z</published>
    <updated>2021-04-02T08:38:18.942Z</updated>
    
    <content type="html"><![CDATA[<p>由于摘要有bug 所以多写点字多写点字多写点字多写点字多写点字多写点字多写点字多写点字<br>由于摘要有bug 所以多写点字多写点字多写点字多写点字多写点字多写点字多写点字多写点字<br>由于摘要有bug 所以多写点字多写点字多写点字多写点字多写点字多写点字多写点字多写点字<br>由于摘要有bug 所以多写点字多写点字多写点字多写点字多写点字多写点字多写点字多写点字<br>由于摘要有bug 所以多写点字多写点字多写点字多写点字多写点字多写点字多写点字多写点字<br>由于摘要有bug 所以多写点字多写点字多写点字多写点字多写点字多写点字多写点字多写点字<br>由于摘要有bug 所以多写点字多写点字多写点字多写点字多写点字多写点字多写点字多写点字</p><ul><li><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof" target="_blank" rel="noopener">从上到下打印二叉树 II</a></li><li>解1。用另一题稍作修改<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Definition for a binary tree node.</span><br><span class="line"> * function TreeNode(val) &#123;</span><br><span class="line"> *     this.val = val;</span><br><span class="line"> *     this.left = this.right = null;</span><br><span class="line"> * &#125;</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;TreeNode&#125; root</span><br><span class="line"> * @return &#123;number[][]&#125;</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var levelOrder = function(root) &#123;</span><br><span class="line">    if (!root) &#123;</span><br><span class="line">        return [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    let result = [];</span><br><span class="line">    let row = 1;</span><br><span class="line">    let queue = [root];</span><br><span class="line">    while (queue.length) &#123;</span><br><span class="line">        let rowArr = [];</span><br><span class="line">        let length = queue.length</span><br><span class="line">        for (let i = 0; i &lt; length;i++) &#123;</span><br><span class="line">            let node = queue.shift();</span><br><span class="line">            if (row % 2 === 1) &#123;</span><br><span class="line">                rowArr.push(node.val);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                rowArr.push(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">            if(node.left) queue.push(node.left);</span><br><span class="line">            if(node.right) queue.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        result.push(rowArr);</span><br><span class="line">        row++</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-面试题68-I二叉搜索树的最近公共祖先</title>
    <link href="https://ferrerobomb.github.io/2020/02/24/leetcode-%E9%9D%A2%E8%AF%95%E9%A2%9868-I%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>https://ferrerobomb.github.io/2020/02/24/leetcode-面试题68-I二叉搜索树的最近公共祖先/</id>
    <published>2020-02-24T08:29:36.000Z</published>
    <updated>2020-02-25T03:54:28.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/submissions/" target="_blank" rel="noopener">面试题68 - II. 二叉搜索树的最近公共祖先</a></li><li>二叉搜索树特性：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。</li><li>解1</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root, p, q)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type p: TreeNode</span></span><br><span class="line"><span class="string">        :type q: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> root.val &gt; p.val <span class="keyword">and</span> root.val &gt; q.val:</span><br><span class="line">            <span class="keyword">return</span> self.lowestCommonAncestor(root.left, p, q)</span><br><span class="line">        <span class="keyword">elif</span> root.val &lt; p.val <span class="keyword">and</span> root.val &lt; q.val:</span><br><span class="line">            <span class="keyword">return</span> self.lowestCommonAncestor(root.right, p, q)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-面试题68 - II. 二叉树的最近公共祖先</title>
    <link href="https://ferrerobomb.github.io/2020/02/19/leetcode-%E9%9D%A2%E8%AF%95%E9%A2%9868-II%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
    <id>https://ferrerobomb.github.io/2020/02/19/leetcode-面试题68-II二叉树的最近公共祖先/</id>
    <published>2020-02-19T15:45:03.000Z</published>
    <updated>2020-02-19T15:45:28.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h4 id="面试题68-II-二叉树的最近公共祖先"><a href="#面试题68-II-二叉树的最近公共祖先" class="headerlink" title="面试题68 - II. 二叉树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/" target="_blank" rel="noopener">面试题68 - II. 二叉树的最近公共祖先</a></h4></li><li><h4 id="解1："><a href="#解1：" class="headerlink" title="解1："></a>解1：</h4></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> lowestCommonAncestor = <span class="function"><span class="keyword">function</span>(<span class="params">root, p, q</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(root, p, q);</span></span><br><span class="line">    <span class="keyword">if</span> (!root || root === p || root === q) &#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> left = lowestCommonAncestor(root.left,p,q);</span><br><span class="line">    <span class="keyword">let</span> right = lowestCommonAncestor(root.right,p,q);</span><br><span class="line">    <span class="keyword">if</span> (!left) <span class="keyword">return</span> right;</span><br><span class="line">    <span class="keyword">if</span> (!right) <span class="keyword">return</span> left;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode中国版目录</title>
    <link href="https://ferrerobomb.github.io/2020/02/19/leetcode%E4%B8%AD%E5%9B%BD%E7%89%88%E7%9B%AE%E5%BD%95/"/>
    <id>https://ferrerobomb.github.io/2020/02/19/leetcode中国版目录/</id>
    <published>2020-02-19T15:44:03.000Z</published>
    <updated>2020-02-26T08:00:02.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><table><thead><tr><th>序号</th><th>题目</th></tr></thead><tbody><tr><td>94</td><td><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal" target="_blank" rel="noopener">二叉树的中序遍历</a> <a href="https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-二叉树的遍历/">解法地址</a></td></tr><tr><td>144</td><td><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal" target="_blank" rel="noopener">二叉树的前序遍历</a> <a href="https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-二叉树的遍历/">解法地址</a></td></tr><tr><td>145</td><td><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal" target="_blank" rel="noopener">二叉树的后序遍历</a> <a href="https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-二叉树的遍历/">解法地址</a></td></tr><tr><td>面试题30</td><td><a href="https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof" target="_blank" rel="noopener">包含min函数的栈</a> <a href="https://ferrerobomb.github.io/2020/02/15/leetcode-面试题30-包含min函数的栈/">解法地址</a></td></tr><tr><td>面试题32 - II</td><td><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof" target="_blank" rel="noopener">从上到下打印二叉树 II</a> <a href="https://ferrerobomb.github.io/2020/02/25/leetcode-面试题32-II-从上到下打印二叉树II/">解法地址</a></td></tr><tr><td>面试题32 - III</td><td><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof" target="_blank" rel="noopener">从上到下打印二叉树 III</a> <a href="https://ferrerobomb.github.io/2020/02/18/leetcode-%E9%9D%A2%E8%AF%95%E9%A2%9832-III-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91III/">解法地址</a></td></tr><tr><td>面试题37</td><td><a href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof" target="_blank" rel="noopener">序列化二叉树</a> <a href="https://ferrerobomb.github.io/2020/02/17/leetcode-%E9%9D%A2%E8%AF%95%E9%A2%9837-%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/">解法地址</a></td></tr><tr><td>面试题55 - II</td><td><a href="https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof" target="_blank" rel="noopener">平衡二叉树</a> <a href="https://ferrerobomb.github.io/2020/02/15/leetcode-%E9%9D%A2%E8%AF%95%E9%A2%9855-II-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/">解法地址</a></td></tr><tr><td>面试题67</td><td>把字符串转换成整数 <a href="https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/" target="_blank" rel="noopener">题目地址</a> <a href="https://ferrerobomb.github.io/2020/02/19/leetcode-面试题67-把字符串转换成整数/">解法地址</a></td></tr><tr><td>面试题68 - I</td><td>二叉搜索树的最近公共祖先 <a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/submissions/" target="_blank" rel="noopener">题目地址</a> <a href="https://ferrerobomb.github.io/2020/02/24/leetcode-%E9%9D%A2%E8%AF%95%E9%A2%9868-I%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/">解法地址</a></td></tr><tr><td>面试题68 - II</td><td>二叉树的最近公共祖先 <a href="https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/" target="_blank" rel="noopener">题目地址</a> <a href="https://ferrerobomb.github.io/2020/02/19/leetcode-%E9%9D%A2%E8%AF%95%E9%A2%9868-II%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/">解法地址</a></td></tr><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-面试题67-把字符串转换成整数</title>
    <link href="https://ferrerobomb.github.io/2020/02/19/leetcode-%E9%9D%A2%E8%AF%95%E9%A2%9867-%E6%8A%8A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B4%E6%95%B0/"/>
    <id>https://ferrerobomb.github.io/2020/02/19/leetcode-面试题67-把字符串转换成整数/</id>
    <published>2020-02-19T08:29:36.000Z</published>
    <updated>2020-02-24T10:23:40.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/" target="_blank" rel="noopener">面试题67-把字符串转换成整数</a></li><li>解1。耍赖解法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; str</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> strToInt = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(<span class="built_in">Math</span>.min(<span class="built_in">parseInt</span>(str) || <span class="number">0</span>, <span class="number">2147483647</span>), <span class="number">-2147483648</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-面试题32-III-从上到下打印二叉树III</title>
    <link href="https://ferrerobomb.github.io/2020/02/18/leetcode-%E9%9D%A2%E8%AF%95%E9%A2%9832-III-%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91III/"/>
    <id>https://ferrerobomb.github.io/2020/02/18/leetcode-面试题32-III-从上到下打印二叉树III/</id>
    <published>2020-02-18T03:54:09.000Z</published>
    <updated>2020-02-25T03:55:56.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof" target="_blank" rel="noopener">从上到下打印二叉树 III</a></li><li>解1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> row = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> queue = [root];</span><br><span class="line">    <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> rowArr = [];</span><br><span class="line">        <span class="keyword">let</span> length = queue.length</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length;i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> node = queue.shift();</span><br><span class="line">            <span class="keyword">if</span> (row % <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">                rowArr.push(node.val);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                rowArr.unshift(node.val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(node.left) queue.push(node.left);</span><br><span class="line">            <span class="keyword">if</span>(node.right) queue.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        result.push(rowArr);</span><br><span class="line">        row++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-面试题37-序列化二叉树</title>
    <link href="https://ferrerobomb.github.io/2020/02/17/leetcode-%E9%9D%A2%E8%AF%95%E9%A2%9837-%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://ferrerobomb.github.io/2020/02/17/leetcode-面试题37-序列化二叉树/</id>
    <published>2020-02-17T05:34:22.000Z</published>
    <updated>2020-02-25T03:58:58.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof" target="_blank" rel="noopener">序列化二叉树</a></li><li>解1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> Codec = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> node = root;</span><br><span class="line">    <span class="keyword">let</span> queue = [node];</span><br><span class="line">    <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> front = queue.shift();</span><br><span class="line">        <span class="keyword">if</span> (front) &#123;</span><br><span class="line">            result.push(front.val);</span><br><span class="line">            queue.push(front.left);</span><br><span class="line">            queue.push(front.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = result.length<span class="number">-1</span>; i &gt; <span class="number">0</span>;i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (result[i]===<span class="literal">null</span>) &#123;</span><br><span class="line">            result.pop();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-面试题55-II-平衡二叉树</title>
    <link href="https://ferrerobomb.github.io/2020/02/15/leetcode-%E9%9D%A2%E8%AF%95%E9%A2%9830-%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"/>
    <id>https://ferrerobomb.github.io/2020/02/15/leetcode-面试题30-包含min函数的栈/</id>
    <published>2020-02-15T07:16:01.000Z</published>
    <updated>2020-02-25T04:00:52.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof" target="_blank" rel="noopener">平衡二叉树</a></li><li>解1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isBalanced = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> left = root.left;</span><br><span class="line">    <span class="keyword">let</span> right = root.right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(height(left) - height(right)) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isBalanced(root.left) &amp;&amp; isBalanced(root.right)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> height = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">Math</span>.max(height(root.left), height(root.right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>

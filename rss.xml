<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>橙柚养乐多的博客</title>
  
  <subtitle>记录与领悟</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="https://ferrerobomb.github.io/"/>
  <updated>2023-02-01T07:21:14.567Z</updated>
  <id>https://ferrerobomb.github.io/</id>
  
  <author>
    <name>橙柚养乐多</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode中国版目录</title>
    <link href="https://ferrerobomb.github.io/2099/02/19/leetcode%E4%B8%AD%E5%9B%BD%E7%89%88%E7%9B%AE%E5%BD%95/"/>
    <id>https://ferrerobomb.github.io/2099/02/19/leetcode中国版目录/</id>
    <published>2099-02-19T15:44:03.000Z</published>
    <updated>2023-02-01T07:21:14.567Z</updated>
    
    <content type="html"><![CDATA[<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><table><thead><tr><th>序号.题目.leetcode地址</th><th>lc难度</th><th>题目.解法.地址</th></tr></thead><tbody><tr><td><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">1. 两数之和</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/20/leetcode-1.两数之和/">leetcode-1.两数之和</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">2. 两数相加</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/25/leetcode-2.两数相加/">leetcode-2.两数相加</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3. 无重复字符的最长子串</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/28/leetcode-3.无重复字符的最长子串/">leetcode-3.无重复字符的最长子串</a></td></tr><tr><td><a href="https://leetcode.cn/problems/longest-palindromic-substring/" target="_blank" rel="noopener">5. 最长回文子串</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/zigzag-conversion/" target="_blank" rel="noopener">6. Z 字形变换</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-6.Z字形变换/">leetcode-6.Z字形变换</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/reverse-integer/" target="_blank" rel="noopener">7. 整数反转</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/07/leetcode-7. 整数反转/">leetcode-7. 整数反转</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/palindrome-number/" target="_blank" rel="noopener">9. 回文数</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/04/leetcode-9.回文数/">leetcode-9.回文数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/roman-to-integer/" target="_blank" rel="noopener">13. 罗马数字转整数</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/05/leetcode-13. 罗马数字转整数/">leetcode-13. 罗马数字转整数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener">14. 最长公共前缀</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/17/leetcode-14. 最长公共前缀/">leetcode-14. 最长公共前缀</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">17. 电话号码的字母组合</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/24/leetcode-17. 电话号码的字母组合/">leetcode-17. 电话号码的字母组合</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">20. 有效的括号</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-20-有效的括号/">leetcode-20.有效的括号</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">21. 合并两个有序链表</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/19/leetcode-21.合并两个有序链表/">leetcode-21.合并两个有序链表</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/generate-parentheses/" target="_blank" rel="noopener">22. 括号生成</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/22/leetcode-22.括号生成/">leetcode-22.括号生成</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">26. 删除有序数组中的重复项</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/02/leetcode-26. 删除有序数组中的重复项/">leetcode-26. 删除有序数组中的重复项</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/remove-element/" target="_blank" rel="noopener">27. 移除元素</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/12/leetcode-27. 移除元素/">leetcode-27. 移除元素</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/implement-strstr/" target="_blank" rel="noopener">28. 实现 strStr()</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/06/leetcode-28. 实现 strStr(">leetcode-28. 实现 strStr()</a>/)</td></tr><tr><td><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="noopener">33. 搜索旋转排序数组</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/14/leetcode-33.搜索旋转排序数组/">leetcode-33.搜索旋转排序数组</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">34. 在排序数组中查找元素的第一个和最后一个位置</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/02/leetcode-34. 在排序数组中查找元素的第一个和最后一个位置/">leetcode-34. 在排序数组中查找元素的第一个和最后一个位置</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/search-insert-position/" target="_blank" rel="noopener">35. 搜索插入位置</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/27/leetcode-35. 搜索插入位置/">leetcode-35. 搜索插入位置</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/valid-sudoku" target="_blank" rel="noopener">36. 有效的数独</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/11/leetcode-36. 有效的数独/">leetcode-36. 有效的数独</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/multiply-strings/" target="_blank" rel="noopener">43. 字符串相乘</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/23/leetcode-43. 字符串相乘/">leetcode-43. 字符串相乘</a></td></tr><tr><td><a href="https://leetcode.cn/problems/jump-game-ii/" target="_blank" rel="noopener">45. 跳跃游戏 II</a></td><td></td><td><a href="https://ferrerobomb.github.io/2023/01/14/leetcode-45-跳跃游戏-II/">leetcode-45-跳跃游戏-II</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">46. 全排列</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/01/leetcode-46. 全排列/">leetcode-46. 全排列</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/rotate-image/" target="_blank" rel="noopener">48. 旋转图像</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/04/leetcode-48. 旋转图像/">leetcode-48. 旋转图像</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/powx-n/" target="_blank" rel="noopener">50. Pow(x, n)</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/28/leetcode-50. Pow(x, n">leetcode-50. Pow(x, n)</a>/)</td></tr><tr><td><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">53. 最大子数组和</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/29/leetcode-53.最大子数组和/">leetcode-53. 最大子数组和</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/spiral-matrix/" target="_blank" rel="noopener">54. 螺旋矩阵</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-54-螺旋矩阵/">leetcode-54.螺旋矩阵</a></td></tr><tr><td><a href="https://leetcode.cn/problems/jump-game/" target="_blank" rel="noopener">55. 跳跃游戏</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/merge-intervals/" target="_blank" rel="noopener">56. 合并区间</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/10/leetcode-56. 合并区间/">leetcode-56. 合并区间</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/length-of-last-word/" target="_blank" rel="noopener">58. 最后一个单词的长度</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/28/leetcode-58. 最后一个单词的长度/">leetcode-58. 最后一个单词的长度</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/unique-paths/" target="_blank" rel="noopener">62. 不同路径</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/21/leetcode-62.不同路径/">leetcode-62.不同路径</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/plus-one/" target="_blank" rel="noopener">66. 加一</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/27/leetcode-66.加一/">leetcode-66. 加一</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener">70. 爬楼梯</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/24/leetcode-70.爬楼梯/">leetcode-70.爬楼梯</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/sort-colors/" target="_blank" rel="noopener">75. 颜色分类</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/30/leetcode-75.颜色分类/">leetcode-75.颜色分类</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/subsets/" target="_blank" rel="noopener">78. 子集</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/08/leetcode-78.子集/">leetcode-78.子集</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/word-search/" target="_blank" rel="noopener">79. 单词搜索</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/23/leetcode-79.单词搜索/">leetcode-79.单词搜索</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener">83. 删除排序链表中的重复元素</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/25/leetcode-83. 删除排序链表中的重复元素/">leetcode-83.删除排序链表中的重复元素</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/merge-sorted-array/" target="_blank" rel="noopener">88. 合并两个有序数组</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/01/leetcode-88.合并两个有序数组/">leetcode-88.合并两个有序数组</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal" target="_blank" rel="noopener">94. 二叉树的中序遍历</a></td><td></td><td><a href="https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-二叉树的遍历/">leetcode-94/144/145-二叉树的遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/" target="_blank" rel="noopener">98. 验证二叉搜索树</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/26/leetcode-98. 验证二叉搜索树/">leetcode-98. 验证二叉搜索树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/same-tree/" target="_blank" rel="noopener">100. 相同的树</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/22/leetcode-100. 相同的树/">leetcode-100. 相同的树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/symmetric-tree/" target="_blank" rel="noopener">101. 对称二叉树</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/21/leetcode-101. 对称二叉树/">leetcode-101. 对称二叉树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">102. 二叉树的层序遍历</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/11/leetcode-102.二叉树的层序遍历/">leetcode-102.二叉树的层序遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/pascals-triangle/" target="_blank" rel="noopener">118. 杨辉三角</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-118.杨辉三角/">leetcode-118.杨辉三角</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">136. 只出现一次的数字</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/20/leetcode-136.只出现一次的数字/">leetcode-136.只出现一次的数字</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/single-number-ii/" target="_blank" rel="noopener">137. 只出现一次的数字 II</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/08/leetcode-137. 只出现一次的数字 II/">leetcode-137. 只出现一次的数字 II</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal" target="_blank" rel="noopener">144. 二叉树的前序遍历</a></td><td></td><td><a href="https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-二叉树的遍历/">leetcode-94/144/145-二叉树的遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal" target="_blank" rel="noopener">145. 二叉树的后序遍历</a></td><td></td><td><a href="https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-二叉树的遍历/">leetcode-94/144/145-二叉树的遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/compare-version-numbers/" target="_blank" rel="noopener">165. 比较版本号</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/07/leetcode-165.比较版本号/">leetcode-165.比较版本号</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/excel-sheet-column-title/" target="_blank" rel="noopener">168. Excel表列名称</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/31/leetcode-168.Excel表列名称/">leetcode-168.Excel表列名称</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/majority-element/" target="_blank" rel="noopener">169. 多数元素</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/30/leetcode-169. 多数元素/">leetcode-169. 多数元素</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/excel-sheet-column-number/" target="_blank" rel="noopener">171. Excel 表列序号</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/03/leetcode-171.Excel 表列序号/">leetcode-171.Excel 表列序号</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/combine-two-tables/" target="_blank" rel="noopener">175. 组合两个表</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode.cn/problems/second-highest-salary/" target="_blank" rel="noopener">176. 第二高的薪水</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode.cn/problems/nth-highest-salary/" target="_blank" rel="noopener">177. 第N高的薪水</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/employees-earning-more-than-their-managers/" target="_blank" rel="noopener">181. 超过经理收入的员工</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/duplicate-emails/" target="_blank" rel="noopener">182. 查找重复的电子邮箱</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/02/leetcode-182.查找重复的电子邮箱/">leetcode-182.查找重复的电子邮箱</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/customers-who-never-order/" target="_blank" rel="noopener">183. 从不订购的客户</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode.cn/problems/number-of-1-bits/" target="_blank" rel="noopener">191. 位1的个数</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/word-frequency/" target="_blank" rel="noopener">192. 统计词频</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/06/leetcode-192.统计词频/">leetcode-192.统计词频</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/valid-phone-numbers/" target="_blank" rel="noopener">193. 有效电话号码</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/05/leetcode-193. 有效电话号码/">leetcode-193. 有效电话号码</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/tenth-line/" target="_blank" rel="noopener">195. 第十行</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/delete-duplicate-emails/" target="_blank" rel="noopener">196. 删除重复的电子邮箱</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/09/leetcode-196. 删除重复的电子邮箱/">leetcode-196. 删除重复的电子邮箱</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/house-robber/" target="_blank" rel="noopener">198. 打家劫舍</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-198-打家劫舍/">leetcode-198.打家劫舍</a></td></tr><tr><td><a href="https://leetcode.cn/problems/number-of-islands/" target="_blank" rel="noopener">200. 岛屿数量</a></td><td>中等</td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/happy-number/" target="_blank" rel="noopener">202. 快乐数</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/04/leetcode-202. 快乐数/">leetcode-202. 快乐数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">206. 反转链表</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/18/leetcode-206.反转链表/">leetcode-206.反转链表</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/contains-duplicate/" target="_blank" rel="noopener">217. 存在重复元素</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/10/leetcode-217. 存在重复元素/">leetcode-217. 存在重复元素</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/" target="_blank" rel="noopener">222. 完全二叉树的节点个数</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/14/leetcode-222.完全二叉树的节点个数/">leetcode-222.完全二叉树的节点个数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/add-digits/" target="_blank" rel="noopener">258. 各位相加</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/03/leetcode-258. 各位相加/">leetcode-258. 各位相加</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/move-zeroes" target="_blank" rel="noopener">283. 移动零</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/09/leetcode-283.移动零/">leetcode-283.移动零</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/nim-game/" target="_blank" rel="noopener">292. Nim 游戏</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/04/04/leetcode-292. Nim 游戏/">leetcode-292. Nim 游戏</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener">322. 零钱兑换</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-322-零钱兑换/">leetcode-322.零钱兑换</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/shuffle-an-array/" target="_blank" rel="noopener">384. 打乱数组</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/08/leetcode-384. 打乱数组/">leetcode-384. 打乱数组</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/lexicographical-numbers/" target="_blank" rel="noopener">386. 字典序排数</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/find-the-difference/" target="_blank" rel="noopener">389. 找不同</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/04/02/leetcode-389. 找不同/">leetcode-389. 找不同</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/is-subsequence/" target="_blank" rel="noopener">392. 判断子序列</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/04/01/leetcode-392. 判断子序列/">leetcode-392. 判断子序列</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/arithmetic-slices" target="_blank" rel="noopener">413. 等差数列划分</a></td><td></td><td><a href="https://ferrerobomb.github.io/2021/08/19/leetcode-413-等差数列划分/">leetcode-413.等差数列划分</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/third-maximum-number/" target="_blank" rel="noopener">414. 第三大的数</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/22/leetcode-414. 第三大的数/">leetcode-414. 第三大的数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/" target="_blank" rel="noopener">429. N 叉树的层序遍历</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/17/leetcode-429.N叉树的层序遍历/">leetcode-429.N叉树的层序遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/number-of-segments-in-a-string/" target="_blank" rel="noopener">434. 字符串中的单词数</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/04/09/leetcode-434. 字符串中的单词数/">leetcode-434. 字符串中的单词数</a></td></tr><tr><td>*<a href="https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order/" target="_blank" rel="noopener">440. 字典序的第K小数字</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/23/leetcode-440. 字典序的第K小数字/">leetcode-440. 字典序的第K小数字</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/arranging-coins/" target="_blank" rel="noopener">441. 排列硬币</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/04/08/leetcode-441. 排列硬币/">leetcode-441. 排列硬币</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/add-two-numbers-ii/" target="_blank" rel="noopener">445. 两数相加 II</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/10/leetcode-445.两数相加 II/">leetcode-445.两数相加 II</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/assign-cookies/" target="_blank" rel="noopener">455. 分发饼干</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode.cn/problems/max-consecutive-ones/" target="_blank" rel="noopener">485. 最大连续 1 的个数</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/base-7/" target="_blank" rel="noopener">504. 七进制数</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/07/leetcode-504. 七进制数/">leetcode-504. 七进制数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/game-play-analysis-i/" target="_blank" rel="noopener">511. 游戏玩法分析 I</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/04/07/leetcode-511. 游戏玩法分析 I/">leetcode-511. 游戏玩法分析 I</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence" target="_blank" rel="noopener">516. 最长回文子序列</a></td><td></td><td><a href="https://ferrerobomb.github.io/2021/08/19/leetcode-516-最长回文子序列/">leetcode-516.最长回文子序列</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/" target="_blank" rel="noopener">559. N 叉树的最大深度</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/16/leetcode-559.N叉树的最大深度/">leetcode-559.N叉树的最大深度</a></td></tr><tr><td><a href="https://leetcode.cn/problems/employee-bonus/" target="_blank" rel="noopener">577. 员工奖金</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/find-customer-referee/" target="_blank" rel="noopener">584. 寻找用户推荐人</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/customer-placing-the-largest-number-of-orders/" target="_blank" rel="noopener">586. 订单最多的客户</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/" target="_blank" rel="noopener">589. N 叉树的前序遍历</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/13/leetcode-589.N叉树的前序遍历/">leetcode-589.N叉树的前序遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/" target="_blank" rel="noopener">590. N 叉树的后序遍历</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/15/leetcode-590.N叉树的后序遍历/">leetcode-590.N叉树的后序遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/big-countries/" target="_blank" rel="noopener">595. 大的国家</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/01/leetcode-595. 大的国家/">leetcode-595. 大的国家</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/classes-more-than-5-students/" target="_blank" rel="noopener">596. 超过5名学生的课</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/" target="_blank" rel="noopener">599. 两个列表的最小索引总和</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/14/leetcode-599. 两个列表的最小索引总和/">leetcode-599. 两个列表的最小索引总和</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/construct-string-from-binary-tree/" target="_blank" rel="noopener">606. 根据二叉树创建字符串</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/19/leetcode-606. 根据二叉树创建字符串/">leetcode-606. 根据二叉树创建字符串</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/sales-person/" target="_blank" rel="noopener">607. 销售员</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/not-boring-movies/" target="_blank" rel="noopener">620. 有趣的电影</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/swap-salary/" target="_blank" rel="noopener">627. 变更性别</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/04/06/leetcode-627. 变更性别/">leetcode-627. 变更性别</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/image-smoother" target="_blank" rel="noopener">661. 图片平滑器</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/24/leetcode-661. 图片平滑器/">leetcode-661. 图片平滑器</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/" target="_blank" rel="noopener">653. 两数之和 IV - 输入 BST</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/20/leetcode-653. 两数之和 IV - 输入 BST/">leetcode-653. 两数之和 IV - 输入 BST</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/baseball-game/" target="_blank" rel="noopener">682. 棒球比赛</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/26/leetcode-682. 棒球比赛/">leetcode-682. 棒球比赛</a></td></tr><tr><td><a href="https://leetcode.cn/problems/degree-of-an-array/" target="_blank" rel="noopener">697. 数组的度</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-search/" target="_blank" rel="noopener">704. 二分查找</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/18/leetcode-704. 二分查找/">leetcode-704. 二分查找</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/to-lower-case/" target="_blank" rel="noopener">709. 转换成小写字母</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/16/leetcode-709. 转换成小写字母/">leetcode-709. 转换成小写字母</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/self-dividing-numbers/" target="_blank" rel="noopener">728. 自除数</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/31/leetcode-728. 自除数/">leetcode-728. 自除数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/min-cost-climbing-stairs/" target="_blank" rel="noopener">746. 使用最小花费爬楼梯</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/04/05/leetcode-746. 使用最小花费爬楼梯/">leetcode-746. 使用最小花费爬楼梯</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/jewels-and-stones/" target="_blank" rel="noopener">771. 宝石与石头</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/04/12/leetcode-771. 宝石与石头/">leetcode-771. 宝石与石头</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/rotate-string/" target="_blank" rel="noopener">796. 旋转字符串</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/04/03/leetcode-796. 旋转字符串/">leetcode-796. 旋转字符串</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/shortest-distance-to-a-character/" target="_blank" rel="noopener">821. 字符的最短距离</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/flipping-an-image/" target="_blank" rel="noopener">832. 翻转图像</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/04/10/leetcode-832. 翻转图像/">leetcode-832. 翻转图像</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/rectangle-overlap/" target="_blank" rel="noopener">836. 矩形重叠</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/04/11/leetcode-836. 矩形重叠/">leetcode-836. 矩形重叠</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/push-dominoes/" target="_blank" rel="noopener">838. 推多米诺</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/21/leetcode-838. 推多米诺/">leetcode-838. 推多米诺</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/sort-an-array/" target="_blank" rel="noopener">912. 排序数组</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/13/leetcode-912.排序数组/">leetcode-912.排序数组</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/" target="_blank" rel="noopener">1004. 最大连续1的个数 III</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/29/leetcode-1004. 最大连续1的个数 III/">leetcode-1004. 最大连续1的个数 III</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/print-in-order/" target="_blank" rel="noopener">1114. 按序打印</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/15/leetcode-1114. 按序打印/">leetcode-1114. 按序打印</a></td></tr><tr><td><a href="https://leetcode.cn/problems/user-activity-for-the-past-30-days-i/" target="_blank" rel="noopener">1141. 查询近30天活跃用户数</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/remove-sub-folders-from-the-filesystem/" target="_blank" rel="noopener">1233. 删除子文件夹</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/09/leetcode-1233. 删除子文件夹/">leetcode-1233. 删除子文件夹</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-to-zero/" target="_blank" rel="noopener">1342. 将数字变成 0 的操作次数</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/11/leetcode-1342.将数字变成0的操作次数/">leetcode-1342.将数字变成0的操作次数</a></td></tr><tr><td><a href="https://leetcode.cn/problems/running-sum-of-1d-array/" target="_blank" rel="noopener">1480. 一维数组的动态和</a></td><td>简单</td><td></td></tr><tr><td><a href="https://leetcode.cn/problems/ways-to-make-a-fair-array/" target="_blank" rel="noopener">1664. 生成平衡数组的方案数</a></td><td></td><td>doing</td></tr><tr><td><a href="https://leetcode-cn.com/problems/richest-customer-wealth/" target="_blank" rel="noopener">1672. 最富有客户的资产总量</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/04/13/leetcode-1672. 最富有客户的资产总量/">leetcode-1672. 最富有客户的资产总量</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/count-of-matches-in-tournament/" target="_blank" rel="noopener">1688. 比赛中的配对次数</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/25/leetcode-1688-比赛中的配对次数/">leetcode-1688-比赛中的配对次数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/second-largest-digit-in-a-string/" target="_blank" rel="noopener">1796. 字符串中第二大的数字</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/03/leetcode-1796. 字符串中第二大的数字/">leetcode-1796. 字符串中第二大的数字</a></td></tr><tr><td><a href="https://leetcode.cn/problems/sentence-similarity-iii/" target="_blank" rel="noopener">1813. 句子相似性 III</a></td><td>中等</td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/maximum-difference-between-increasing-elements/" target="_blank" rel="noopener">2016. 增量元素之间的最大差值</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/02/25/leetcode-2016. 增量元素之间的最大差值/">leetcode-2016. 增量元素之间的最大差值</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/check-if-all-as-appears-before-all-bs/" target="_blank" rel="noopener">2124. 检查是否所有 A 都在 B 之前</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/12/leetcode-2124.检查是否所有A都在B之前/">leetcode-2124.检查是否所有A都在B之前</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/count-elements-with-strictly-smaller-and-greater-elements/" target="_blank" rel="noopener">2148. 元素计数</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/06/leetcode-2148. 元素计数/">leetcode-2148. 元素计数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/keep-multiplying-found-values-by-two/" target="_blank" rel="noopener">2154. 将找到的值乘以 2</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/31/leetcode-2154.将找到的值乘以2/">leetcode-2154.将找到的值乘以2</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/partition-array-according-to-given-pivot/" target="_blank" rel="noopener">2161. 根据给定数字划分数组</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/03/13/leetcode-2161. 根据给定数字划分数组/">leetcode-2161. 根据给定数字划分数组</a></td></tr><tr><td><a href="https://leetcode.cn/problems/calculate-amount-paid-in-taxes/" target="_blank" rel="noopener">2303. 计算应缴税款总额</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode.cn/problems/greatest-english-letter-in-upper-and-lower-case/" target="_blank" rel="noopener">2309. 兼具大小写的最好英文字母</a></td><td></td><td></td></tr><tr><td><a href="https://leetcode.cn/problems/decode-the-message/" target="_blank" rel="noopener">2325. 解密消息</a></td><td>简单</td><td></td></tr><tr><td>面试题30</td><td></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/" target="_blank" rel="noopener">剑指 Offer 32 - II. 从上到下打印二叉树 II</a></td><td></td><td><a href="https://ferrerobomb.github.io/2020/02/25/leetcode-面试题32-II-从上到下打印二叉树II/">leetcode-面试题32-II-从上到下打印二叉树II</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/" target="_blank" rel="noopener">剑指 Offer 32 - III. 从上到下打印二叉树 III</a></td><td></td><td><a href="https://ferrerobomb.github.io/2020/02/18/leetcode-面试题32-III-从上到下打印二叉树III/">leetcode-面试题32-III-从上到下打印二叉树III</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 37. 序列化二叉树</a></td><td></td><td><a href="https://ferrerobomb.github.io/2020/02/17/leetcode-面试题37-序列化二叉树/">leetcode-面试题37-序列化二叉树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 55 - II. 平衡二叉树</a></td><td></td><td><a href="https://ferrerobomb.github.io/2020/02/15/leetcode-面试题30-包含min函数的栈/">leetcode-面试题55-II-平衡二叉树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 67. 把字符串转换成整数</a></td><td></td><td><a href="https://ferrerobomb.github.io/2020/02/19/leetcode-面试题67-把字符串转换成整数/">leetcode-面试题67-把字符串转换成整数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/" target="_blank" rel="noopener">剑指 Offer 68 - I. 二叉搜索树的最近公共祖先</a></td><td></td><td><a href="https://ferrerobomb.github.io/2020/02/24/leetcode-面试题68-I二叉搜索树的最近公共祖先/">leetcode-面试题68-I二叉搜索树的最近公共祖先</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/" target="_blank" rel="noopener">剑指 Offer 68 - II. 二叉树的最近公共祖先</a></td><td></td><td><a href="https://ferrerobomb.github.io/2020/02/19/leetcode-面试题68-II二叉树的最近公共祖先/">leetcode-面试题68 - II. 二叉树的最近公共祖先</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/SsGoHC/" target="_blank" rel="noopener">剑指 Offer II 074. 合并区间</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/10/leetcode-剑指 Offer II 074. 合并区间/">leetcode-剑指 Offer II 074. 合并区间</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/palindrome-permutation-lcci/" target="_blank" rel="noopener">面试题 01.04. 回文排列</a></td><td></td><td><a href="https://ferrerobomb.github.io/2022/01/25/leetcode-面试题01-04-回文排列/">leetcode-面试题01.04.回文排列</a></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-2325. 解密消息</title>
    <link href="https://ferrerobomb.github.io/2023/02/01/leetcode-2325.%20%E8%A7%A3%E5%AF%86%E6%B6%88%E6%81%AF/"/>
    <id>https://ferrerobomb.github.io/2023/02/01/leetcode-2325. 解密消息/</id>
    <published>2023-02-01T06:32:44.000Z</published>
    <updated>2023-02-01T06:33:18.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-2325-解密消息"><a href="#leetcode-2325-解密消息" class="headerlink" title="leetcode-2325. 解密消息"></a>leetcode-2325. 解密消息</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你字符串 key 和 message ，分别表示一个加密密钥和一段加密消息。解密 message 的步骤如下：</p><p>使用 key 中 26 个英文小写字母第一次出现的顺序作为替换表中的字母 顺序 。<br>将替换表与普通英文字母表对齐，形成对照表。<br>按照对照表 替换 message 中的每个字母。<br>空格 ‘ ‘ 保持不变。<br>例如，key = “happy boy”（实际的加密密钥会包含字母表中每个字母 至少一次），据此，可以得到部分对照表（’h’ -&gt; ‘a’、’a’ -&gt; ‘b’、’p’ -&gt; ‘c’、’y’ -&gt; ‘d’、’b’ -&gt; ‘e’、’o’ -&gt; ‘f’）。<br>返回解密后的消息。</p><p>示例 1：</p><p>输入：key = “the quick brown fox jumps over the lazy dog”, message = “vkbs bs t suepuv”<br>输出：”this is a secret”<br>解释：对照表如上图所示。<br>提取 “the quick brown fox jumps over the lazy dog” 中每个字母的首次出现可以得到替换表。<br>示例 2：</p><p>输入：key = “eljuxhpwnyrdgtqkviszcfmabo”, message = “zwx hnfx lqantp mnoeius ycgk vcnjrdb”<br>输出：”the five boxing wizards jump quickly”<br>解释：对照表如上图所示。<br>提取 “eljuxhpwnyrdgtqkviszcfmabo” 中每个字母的首次出现可以得到替换表。</p><p>提示：</p><p>26 &lt;= key.length &lt;= 2000<br>key 由小写英文字母及 ‘ ‘ 组成<br>key 包含英文字母表中每个字符（’a’ 到 ‘z’）至少一次<br>1 &lt;= message.length &lt;= 2000<br>message 由小写英文字母和 ‘ ‘ 组成</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/decode-the-message" target="_blank" rel="noopener">https://leetcode.cn/problems/decode-the-message</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1-哈希"><a href="#解1-哈希" class="headerlink" title="解1 哈希"></a>解1 哈希</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; key</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; message</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> decodeMessage = <span class="function"><span class="keyword">function</span>(<span class="params">key, message</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 建立哈希</span></span><br><span class="line">  <span class="keyword">let</span> currentKey = <span class="string">'a'</span></span><br><span class="line">  <span class="keyword">let</span> keyHash = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; key.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[i] === <span class="string">' '</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!keyHash.has(key[i])) &#123;</span><br><span class="line">      keyHash.set(key[i], currentKey)</span><br><span class="line">      currentKey = <span class="built_in">String</span>.fromCharCode(currentKey.charCodeAt() + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 读取</span></span><br><span class="line">  <span class="keyword">let</span> ans = <span class="string">''</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; message.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (message[i] === <span class="string">' '</span>) &#123;</span><br><span class="line">      ans += message[i]</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    ans += keyHash.get(message[i])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(decodeMessage(<span class="string">"the quick brown fox jumps over the lazy dog"</span>,<span class="string">"vkbs bs t suepuv"</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1480. 一维数组的动态和</title>
    <link href="https://ferrerobomb.github.io/2023/01/31/leetcode-1480.%20%E4%B8%80%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%8A%A8%E6%80%81%E5%92%8C/"/>
    <id>https://ferrerobomb.github.io/2023/01/31/leetcode-1480. 一维数组的动态和/</id>
    <published>2023-01-31T07:20:36.000Z</published>
    <updated>2023-02-01T07:20:55.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1480-一维数组的动态和"><a href="#leetcode-1480-一维数组的动态和" class="headerlink" title="leetcode-1480. 一维数组的动态和"></a>leetcode-1480. 一维数组的动态和</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</p><p>请返回 nums 的动态和。</p><p>示例 1：</p><p>输入：nums = [1,2,3,4]<br>输出：[1,3,6,10]<br>解释：动态和计算过程为 [1, 1+2, 1+2+3, 1+2+3+4] 。<br>示例 2：</p><p>输入：nums = [1,1,1,1,1]<br>输出：[1,2,3,4,5]<br>解释：动态和计算过程为 [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1] 。<br>示例 3：</p><p>输入：nums = [3,1,2,10,1]<br>输出：[3,4,6,16,17]</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 1000<br>-10^6 &lt;= nums[i] &lt;= 10^6</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/running-sum-of-1d-array" target="_blank" rel="noopener">https://leetcode.cn/problems/running-sum-of-1d-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> runningSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> preSum = <span class="number">0</span> <span class="comment">// 之前的累加</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    preSum = nums[i] + preSum</span><br><span class="line">    nums[i] = preSum</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nums</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(runningSum([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-697. 数组的度</title>
    <link href="https://ferrerobomb.github.io/2023/01/28/leetcode-697.%20%E6%95%B0%E7%BB%84%E7%9A%84%E5%BA%A6/"/>
    <id>https://ferrerobomb.github.io/2023/01/28/leetcode-697. 数组的度/</id>
    <published>2023-01-28T06:27:23.000Z</published>
    <updated>2023-01-28T06:32:41.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-697-数组的度"><a href="#leetcode-697-数组的度" class="headerlink" title="leetcode-697. 数组的度"></a>leetcode-697. 数组的度</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个非空且只包含非负数的整数数组 nums，数组的 度 的定义是指数组里任一元素出现频数的最大值。</p><p>你的任务是在 nums 中找到与 nums 拥有相同大小的度的最短连续子数组，返回其长度。</p><p>示例 1：</p><p>输入：nums = [1,2,2,3,1]<br>输出：2<br>解释：<br>输入数组的度是 2 ，因为元素 1 和 2 的出现频数最大，均为 2 。<br>连续子数组里面拥有相同度的有如下所示：<br>[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]<br>最短连续子数组 [2, 2] 的长度为 2 ，所以返回 2 。<br>示例 2：</p><p>输入：nums = [1,2,2,3,1,4,2]<br>输出：6<br>解释：<br>数组的度是 3 ，因为元素 2 重复出现 3 次。<br>所以 [2,2,3,1,4,2] 是最短子数组，因此返回 6 。</p><p>提示：</p><p>nums.length 在 1 到 50,000 范围内。<br>nums[i] 是一个在 0 到 49,999 范围内的整数。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/degree-of-an-array" target="_blank" rel="noopener">https://leetcode.cn/problems/degree-of-an-array</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解2-有些复杂感觉可以优化的解法-哈希表"><a href="#解2-有些复杂感觉可以优化的解法-哈希表" class="headerlink" title="解2  有些复杂感觉可以优化的解法 哈希表"></a>解2  有些复杂感觉可以优化的解法 哈希表</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findShortestSubArray = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* 1. 统计元素出现的次数 */</span> </span><br><span class="line">  <span class="keyword">const</span> hash = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="comment">// const element = nums[i];</span></span><br><span class="line">    <span class="keyword">if</span> (!hash[nums[i]]) &#123;</span><br><span class="line">      hash[nums[i]] = <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      hash[nums[i]]++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 2. 统计最大度数和相应元素 */</span> </span><br><span class="line">  <span class="keyword">let</span> maxDegree = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> maxDegreeNumber = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> hash) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.hasOwnProperty.call(hash, key)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (hash[key] &gt; maxDegree) &#123;</span><br><span class="line">        maxDegree = hash[key]</span><br><span class="line">        maxDegreeNumber = [<span class="built_in">Number</span>(key)]</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hash[key] === maxDegree) &#123;</span><br><span class="line">        maxDegreeNumber.push(<span class="built_in">Number</span>(key))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 3. 获取长度，并取最短长度 */</span> </span><br><span class="line">  <span class="keyword">let</span> ans = <span class="literal">Infinity</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; maxDegreeNumber.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> allIndexArr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[j] === maxDegreeNumber[i]) &#123;</span><br><span class="line">        allIndexArr.push(j)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> temp = <span class="built_in">Math</span>.max(...allIndexArr) - <span class="built_in">Math</span>.min(...allIndexArr)</span><br><span class="line">    <span class="keyword">if</span> (temp &lt; ans) &#123;</span><br><span class="line">      ans = temp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(findShortestSubArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-2309. 兼具大小写的最好英文字母</title>
    <link href="https://ferrerobomb.github.io/2023/01/27/leetcode-2309.%20%E5%85%BC%E5%85%B7%E5%A4%A7%E5%B0%8F%E5%86%99%E7%9A%84%E6%9C%80%E5%A5%BD%E8%8B%B1%E6%96%87%E5%AD%97%E6%AF%8D/"/>
    <id>https://ferrerobomb.github.io/2023/01/27/leetcode-2309. 兼具大小写的最好英文字母/</id>
    <published>2023-01-27T05:50:37.000Z</published>
    <updated>2023-01-27T05:51:11.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-2309-兼具大小写的最好英文字母"><a href="#leetcode-2309-兼具大小写的最好英文字母" class="headerlink" title="leetcode-2309. 兼具大小写的最好英文字母"></a>leetcode-2309. 兼具大小写的最好英文字母</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个由英文字母组成的字符串 s ，请你找出并返回 s 中的 最好 英文字母。返回的字母必须为大写形式。如果不存在满足条件的字母，则返回一个空字符串。</p><p>最好 英文字母的大写和小写形式必须 都 在 s 中出现。</p><p>英文字母 b 比另一个英文字母 a 更好 的前提是：英文字母表中，b 在 a 之 后 出现。</p><p>示例 1：</p><p>输入：s = “lEeTcOdE”<br>输出：”E”<br>解释：<br>字母 ‘E’ 是唯一一个大写和小写形式都出现的字母。<br>示例 2：</p><p>输入：s = “arRAzFif”<br>输出：”R”<br>解释：<br>字母 ‘R’ 是大写和小写形式都出现的最好英文字母。<br>注意 ‘A’ 和 ‘F’ 的大写和小写形式也都出现了，但是 ‘R’ 比 ‘F’ 和 ‘A’ 更好。<br>示例 3：</p><p>输入：s = “AbCdEfGhIjK”<br>输出：””<br>解释：<br>不存在大写和小写形式都出现的字母。</p><p>提示：</p><p>1 &lt;= s.length &lt;= 1000<br>s 由小写和大写英文字母组成</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/greatest-english-letter-in-upper-and-lower-case" target="_blank" rel="noopener">https://leetcode.cn/problems/greatest-english-letter-in-upper-and-lower-case</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> greatestLetter = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> hashSet = <span class="keyword">new</span> <span class="built_in">Set</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">    hashSet.add(s[i])</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">25</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="comment">// 根据题意，从最大的字母z开始遍历 如果大小写都有则返回</span></span><br><span class="line">    <span class="keyword">if</span> (hashSet.has(<span class="built_in">String</span>.fromCharCode(<span class="string">'a'</span>.charCodeAt() + i)) &amp;&amp; hashSet.has(<span class="built_in">String</span>.fromCharCode(<span class="string">'A'</span>.charCodeAt() + i))) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(<span class="string">'A'</span>.charCodeAt() + i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-2303. 计算应缴税款总额</title>
    <link href="https://ferrerobomb.github.io/2023/01/26/leetcode-2303.%20%E8%AE%A1%E7%AE%97%E5%BA%94%E7%BC%B4%E7%A8%8E%E6%AC%BE%E6%80%BB%E9%A2%9D/"/>
    <id>https://ferrerobomb.github.io/2023/01/26/leetcode-2303. 计算应缴税款总额/</id>
    <published>2023-01-26T08:47:34.000Z</published>
    <updated>2023-01-27T08:51:08.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-2303-计算应缴税款总额"><a href="#leetcode-2303-计算应缴税款总额" class="headerlink" title="leetcode-2303. 计算应缴税款总额"></a>leetcode-2303. 计算应缴税款总额</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个下标从 0 开始的二维整数数组 brackets ，其中 brackets[i] = [upperi, percenti] ，表示第 i 个税级的上限是 upperi ，征收的税率为 percenti 。税级按上限 从低到高排序（在满足 0 &lt; i &lt; brackets.length 的前提下，upperi-1 &lt; upperi）。</p><p>税款计算方式如下：</p><p>不超过 upper0 的收入按税率 percent0 缴纳<br>接着 upper1 - upper0 的部分按税率 percent1 缴纳<br>然后 upper2 - upper1 的部分按税率 percent2 缴纳<br>以此类推<br>给你一个整数 income 表示你的总收入。返回你需要缴纳的税款总额。与标准答案误差不超 10-5 的结果将被视作正确答案。</p><p>示例 1：</p><p>输入：brackets = [[3,50],[7,10],[12,25]], income = 10<br>输出：2.65000<br>解释：<br>前 $3 的税率为 50% 。需要支付税款 $3 <em> 50% = $1.50 。<br>接下来 $7 - $3 = $4 的税率为 10% 。需要支付税款 $4 </em> 10% = $0.40 。<br>最后 $10 - $7 = $3 的税率为 25% 。需要支付税款 $3 * 25% = $0.75 。<br>需要支付的税款总计 $1.50 + $0.40 + $0.75 = $2.65 。<br>示例 2：</p><p>输入：brackets = [[1,0],[4,25],[5,50]], income = 2<br>输出：0.25000<br>解释：<br>前 $1 的税率为 0% 。需要支付税款 $1 <em> 0% = $0 。<br>剩下 $1 的税率为 25% 。需要支付税款 $1 </em> 25% = $0.25 。<br>需要支付的税款总计 $0 + $0.25 = $0.25 。<br>示例 3：</p><p>输入：brackets = [[2,50]], income = 0<br>输出：0.00000<br>解释：<br>没有收入，无需纳税，需要支付的税款总计 $0 。</p><p>提示：</p><p>1 &lt;= brackets.length &lt;= 100<br>1 &lt;= upperi &lt;= 1000<br>0 &lt;= percenti &lt;= 100<br>0 &lt;= income &lt;= 1000<br>upperi 按递增顺序排列<br>upperi 中的所有值 互不相同<br>最后一个税级的上限大于等于 income</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/calculate-amount-paid-in-taxes" target="_blank" rel="noopener">https://leetcode.cn/problems/calculate-amount-paid-in-taxes</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; brackets</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; income</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> calculateTax = <span class="function"><span class="keyword">function</span>(<span class="params">brackets, income</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> deduct = <span class="number">0</span> <span class="comment">// 每次计算需要扣除的前部分</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; brackets.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> upper = brackets[i][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">const</span> percent = brackets[i][<span class="number">1</span>]</span><br><span class="line">    <span class="comment">// 计算当前区间的税</span></span><br><span class="line">    ans += ((<span class="built_in">Math</span>.min(income, upper) - deduct) * percent) / <span class="number">100</span></span><br><span class="line">    deduct = upper</span><br><span class="line">    <span class="keyword">if</span> (income &lt;= upper) &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1664. 生成平衡数组的方案数</title>
    <link href="https://ferrerobomb.github.io/2023/01/25/leetcode-1664.%20%E7%94%9F%E6%88%90%E5%B9%B3%E8%A1%A1%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/"/>
    <id>https://ferrerobomb.github.io/2023/01/25/leetcode-1664. 生成平衡数组的方案数/</id>
    <published>2023-01-25T09:58:19.000Z</published>
    <updated>2023-01-28T17:11:22.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1664-生成平衡数组的方案数"><a href="#leetcode-1664-生成平衡数组的方案数" class="headerlink" title="leetcode-1664. 生成平衡数组的方案数"></a>leetcode-1664. 生成平衡数组的方案数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解2"><a href="#解2" class="headerlink" title="解2"></a>解2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解3-直接法啊-不出意外憋死了"><a href="#解3-直接法啊-不出意外憋死了" class="headerlink" title="解3  直接法啊 不出意外憋死了"></a>解3  直接法啊 不出意外憋死了</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> waysToMakeFair = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span> <span class="comment">// 方案数</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 获取不同的方案 newArr</span></span><br><span class="line">    <span class="keyword">let</span> newArr = nums.filter(<span class="function">(<span class="params">num, index</span>) =&gt;</span> index !== i)</span><br><span class="line">    <span class="built_in">console</span>.log(newArr);</span><br><span class="line">    <span class="comment">// 分别计算奇数偶数元素的总和</span></span><br><span class="line">    <span class="keyword">let</span> even = <span class="number">0</span>, odd = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; newArr.length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j % <span class="number">2</span> === <span class="number">0</span>) &#123; <span class="comment">// 偶数</span></span><br><span class="line">        even += newArr[j]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        odd += newArr[j]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (even === odd) &#123;</span><br><span class="line">      ans++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(waysToMakeFair([<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">4</span>]));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-191. 位1的个数</title>
    <link href="https://ferrerobomb.github.io/2023/01/24/leetcode-191.%20%E4%BD%8D1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>https://ferrerobomb.github.io/2023/01/24/leetcode-191. 位1的个数/</id>
    <published>2023-01-24T14:21:44.000Z</published>
    <updated>2023-01-24T14:21:46.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-191-位1的个数"><a href="#leetcode-191-位1的个数" class="headerlink" title="leetcode-191. 位1的个数"></a>leetcode-191. 位1的个数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p><p>提示：</p><p>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。<br>在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。</p><p>示例 1：</p><p>输入：00000000000000000000000000001011<br>输出：3<br>解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 ‘1’。<br>示例 2：</p><p>输入：00000000000000000000000010000000<br>输出：1<br>解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 ‘1’。<br>示例 3：</p><p>输入：11111111111111111111111111111101<br>输出：31<br>解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 ‘1’。</p><p>提示：</p><p>输入必须是长度为 32 的 二进制串 。</p><p>进阶：</p><p>如果多次调用这个函数，你将如何优化你的算法？<br>通过次数307,542提交次数402,865</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/number-of-1-bits" target="_blank" rel="noopener">https://leetcode.cn/problems/number-of-1-bits</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hammingWeight = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line">    n &amp;= n - <span class="number">1</span>; <span class="comment">// 找规律 遍历做位与运算</span></span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-485. 最大连续 1 的个数</title>
    <link href="https://ferrerobomb.github.io/2023/01/23/leetcode-485.%20%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%201%20%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
    <id>https://ferrerobomb.github.io/2023/01/23/leetcode-485. 最大连续 1 的个数/</id>
    <published>2023-01-23T15:23:01.000Z</published>
    <updated>2023-01-24T15:25:20.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-485-最大连续-1-的个数"><a href="#leetcode-485-最大连续-1-的个数" class="headerlink" title="leetcode-485. 最大连续 1 的个数"></a>leetcode-485. 最大连续 1 的个数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二进制数组 nums ， 计算其中最大连续 1 的个数。</p><p>示例 1：</p><p>输入：nums = [1,1,0,1,1,1]<br>输出：3<br>解释：开头的两位和最后的三位都是连续 1 ，所以最大连续 1 的个数是 3.<br>示例 2:</p><p>输入：nums = [1,0,1,1,0,1]<br>输出：2</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 105<br>nums[i] 不是 0 就是 1.</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/max-consecutive-ones" target="_blank" rel="noopener">https://leetcode.cn/problems/max-consecutive-ones</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1-滑动窗口"><a href="#解1-滑动窗口" class="headerlink" title="解1 滑动窗口"></a>解1 滑动窗口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMaxConsecutiveOnes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> arr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] === <span class="number">1</span>) &#123;</span><br><span class="line">      arr.push(nums[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      arr.splice(<span class="number">0</span>, i)</span><br><span class="line">    &#125;</span><br><span class="line">    max = <span class="built_in">Math</span>.max(max, arr.length)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(findMaxConsecutiveOnes([<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]))</span><br></pre></td></tr></table></figure><h2 id="解2"><a href="#解2" class="headerlink" title="解2"></a>解2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMaxConsecutiveOnes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 将数组以0分割 ['11', '111']</span></span><br><span class="line">  <span class="keyword">var</span> temp = nums.join(<span class="string">''</span>).split(<span class="string">'0'</span>);</span><br><span class="line">  <span class="comment">// 获取数组中最长的字符串</span></span><br><span class="line">  <span class="keyword">var</span> max = temp.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b.length - a.length)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> max.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-577. 员工奖金</title>
    <link href="https://ferrerobomb.github.io/2023/01/22/leetcode-577.%20%E5%91%98%E5%B7%A5%E5%A5%96%E9%87%91/"/>
    <id>https://ferrerobomb.github.io/2023/01/22/leetcode-577. 员工奖金/</id>
    <published>2023-01-22T15:30:22.000Z</published>
    <updated>2023-01-24T15:32:14.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-577-员工奖金"><a href="#leetcode-577-员工奖金" class="headerlink" title="leetcode-577. 员工奖金"></a>leetcode-577. 员工奖金</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>SQL架构</p><p>选出所有 bonus &lt; 1000 的员工的 name 及其 bonus。</p><p><code>Employee</code> 表单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------+--------+-----------+--------+</span><br><span class="line">| empId |  name  | supervisor| salary |</span><br><span class="line">+-------+--------+-----------+--------+</span><br><span class="line">|   1   | John   |  3        | 1000   |</span><br><span class="line">|   2   | Dan    |  3        | 2000   |</span><br><span class="line">|   3   | Brad   |  null     | 4000   |</span><br><span class="line">|   4   | Thomas |  3        | 4000   |</span><br><span class="line">+-------+--------+-----------+--------+</span><br><span class="line">empId 是这张表单的主关键字</span><br></pre></td></tr></table></figure><p><code>Bonus</code> 表单</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-------+-------+</span><br><span class="line">| empId | bonus |</span><br><span class="line">+-------+-------+</span><br><span class="line">| 2     | 500   |</span><br><span class="line">| 4     | 2000  |</span><br><span class="line">+-------+-------+</span><br><span class="line">empId 是这张表单的主关键字</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-------+-------+</span><br><span class="line">| name  | bonus |</span><br><span class="line">+-------+-------+</span><br><span class="line">| John  | null  |</span><br><span class="line">| Dan   | 500   |</span><br><span class="line">| Brad  | null  |</span><br><span class="line">+-------+-------+</span><br></pre></td></tr></table></figure><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, bonus</span><br><span class="line"><span class="keyword">from</span> Employee <span class="keyword">left</span> <span class="keyword">join</span> Bonus</span><br><span class="line"><span class="keyword">on</span> Employee.EmpId = Bonus.EmpId</span><br><span class="line"><span class="keyword">where</span> bonus <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">or</span> bonus &lt; <span class="number">1000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-176. 第二高的薪水</title>
    <link href="https://ferrerobomb.github.io/2023/01/21/leetcode-176.%20%E7%AC%AC%E4%BA%8C%E9%AB%98%E7%9A%84%E8%96%AA%E6%B0%B4/"/>
    <id>https://ferrerobomb.github.io/2023/01/21/leetcode-176. 第二高的薪水/</id>
    <published>2023-01-21T05:59:38.000Z</published>
    <updated>2023-01-21T05:59:44.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-176-第二高的薪水"><a href="#leetcode-176-第二高的薪水" class="headerlink" title="leetcode-176. 第二高的薪水"></a>leetcode-176. 第二高的薪水</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>SQL架构</p><p><code>Employee</code> 表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+------+</span><br><span class="line">| Column Name | Type |</span><br><span class="line">+-------------+------+</span><br><span class="line">| id          | int  |</span><br><span class="line">| salary      | int  |</span><br><span class="line">+-------------+------+</span><br><span class="line">id 是这个表的主键。</span><br><span class="line">表的每一行包含员工的工资信息。</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，获取并返回 <code>Employee</code> 表中第二高的薪水 。如果不存在第二高的薪水，查询应该返回 <code>null</code> 。</p><p>查询结果如下例所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Employee 表：</span><br><span class="line">+----+--------+</span><br><span class="line">| id | salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+----+--------+</span><br><span class="line">输出：</span><br><span class="line">+---------------------+</span><br><span class="line">| SecondHighestSalary |</span><br><span class="line">+---------------------+</span><br><span class="line">| 200                 |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Employee 表：</span><br><span class="line">+----+--------+</span><br><span class="line">| id | salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">+----+--------+</span><br><span class="line">输出：</span><br><span class="line">+---------------------+</span><br><span class="line">| SecondHighestSalary |</span><br><span class="line">+---------------------+</span><br><span class="line">| null                |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><h2 id="解1-有可能没有第二项，用临时表解决这个问题"><a href="#解1-有可能没有第二项，用临时表解决这个问题" class="headerlink" title="解1 有可能没有第二项，用临时表解决这个问题"></a>解1 有可能没有第二项，用临时表解决这个问题</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">            Salary</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            Employee</span><br><span class="line">        <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">DESC</span></span><br><span class="line">        <span class="keyword">LIMIT</span> <span class="number">1</span> <span class="keyword">OFFSET</span> <span class="number">1</span>) <span class="keyword">AS</span> SecondHighestSalary</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h2 id="解2-IFNULL"><a href="#解2-IFNULL" class="headerlink" title="解2 IFNULL"></a>解2 IFNULL</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">IFNULL</span>(</span><br><span class="line">      (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Salary</span><br><span class="line">       <span class="keyword">FROM</span> Employee</span><br><span class="line">       <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">DESC</span></span><br><span class="line">        <span class="keyword">LIMIT</span> <span class="number">1</span> <span class="keyword">OFFSET</span> <span class="number">1</span>),</span><br><span class="line">    <span class="literal">NULL</span>) <span class="keyword">AS</span> SecondHighestSalary</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-5. 最长回文子串</title>
    <link href="https://ferrerobomb.github.io/2023/01/20/leetcode-5.%20%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <id>https://ferrerobomb.github.io/2023/01/20/leetcode-5. 最长回文子串/</id>
    <published>2023-01-20T06:10:47.000Z</published>
    <updated>2023-01-21T07:13:47.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-5-最长回文子串"><a href="#leetcode-5-最长回文子串" class="headerlink" title="leetcode-5. 最长回文子串"></a>leetcode-5. 最长回文子串</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串 s，找到 s 中最长的回文子串。</p><p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p><p>示例 1：</p><p>输入：s = “babad”<br>输出：”bab”<br>解释：”aba” 同样是符合题意的答案。<br>示例 2：</p><p>输入：s = “cbbd”<br>输出：”bb”</p><p>提示：</p><p>1 &lt;= s.length &lt;= 1000<br>s 仅由数字和英文字母组成</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/longest-palindromic-substring" target="_blank" rel="noopener">https://leetcode.cn/problems/longest-palindromic-substring</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1二维数组动态规划"><a href="#解1二维数组动态规划" class="headerlink" title="解1二维数组动态规划"></a>解1二维数组动态规划</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 如果不理解建议自己画一个图 二维数组</span></span><br><span class="line"><span class="keyword">var</span> longestPalindrome = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> sLength = s.length; <span class="comment">// 字符串s长度</span></span><br><span class="line">  <span class="keyword">if</span> (sLength === <span class="number">1</span>) &#123; <span class="comment">// 一个字符算回文</span></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 二维数组</span></span><br><span class="line">  <span class="comment">// const dp = new Array(sLength).fill(0).map(() =&gt; new Array(sLength).fill(false));</span></span><br><span class="line">  <span class="keyword">const</span> dp = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Array</span>(sLength), () =&gt; <span class="keyword">new</span> <span class="built_in">Array</span>(sLength).fill(<span class="literal">false</span>))</span><br><span class="line">  <span class="comment">// console.log(dp);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// dp[i][i]为长度为1的所有子串</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sLength; i++) &#123;</span><br><span class="line">    dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ans = s[<span class="number">0</span>] <span class="comment">// 从首位字符开始遍历</span></span><br><span class="line">  <span class="comment">// 从子串长度2开始构建状态转移方程</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> childStrLen = <span class="number">2</span>; childStrLen &lt;= sLength; childStrLen++) &#123;</span><br><span class="line">    <span class="comment">// 定义双指针left right 控制子串边界</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> left = <span class="number">0</span>; left &lt; sLength; left++) &#123;</span><br><span class="line">      <span class="keyword">let</span> right = left + childStrLen <span class="number">-1</span></span><br><span class="line">      <span class="keyword">if</span> (right &gt;= sLength) &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (childStrLen === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 子串长度为2时不符合判断条件  所以直接判断s[left] === s[right]即可</span></span><br><span class="line">        dp[left][right] = s[left] === s[right];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 核心方程 判断上一个状态是否为回文，然后左右如果加的是相同的字符 则当前状态为回文</span></span><br><span class="line">        dp[left][right] = dp[left + <span class="number">1</span>][right - <span class="number">1</span>] &amp;&amp; s[left] === s[right];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 遇到更长的回文子串则更新ans</span></span><br><span class="line">      <span class="keyword">if</span> (dp[left][right] &amp;&amp; childStrLen &gt; ans.length) &#123;</span><br><span class="line">        ans = s.slice(left, right + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(longestPalindrome(<span class="string">'abababa'</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-177. 第N高的薪水</title>
    <link href="https://ferrerobomb.github.io/2023/01/19/leetcode-177.%20%E7%AC%ACN%E9%AB%98%E7%9A%84%E8%96%AA%E6%B0%B4/"/>
    <id>https://ferrerobomb.github.io/2023/01/19/leetcode-177. 第N高的薪水/</id>
    <published>2023-01-19T07:22:01.000Z</published>
    <updated>2023-01-21T07:22:43.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-177-第N高的薪水"><a href="#leetcode-177-第N高的薪水" class="headerlink" title="leetcode-177. 第N高的薪水"></a>leetcode-177. 第N高的薪水</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>SQL架构</p><p>表: <code>Employee</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+------+</span><br><span class="line">| Column Name | Type |</span><br><span class="line">+-------------+------+</span><br><span class="line">| id          | int  |</span><br><span class="line">| salary      | int  |</span><br><span class="line">+-------------+------+</span><br><span class="line">Id是该表的主键列。</span><br><span class="line">该表的每一行都包含有关员工工资的信息。</span><br></pre></td></tr></table></figure><p>编写一个SQL查询来报告 <code>Employee</code> 表中第 <code>n</code> 高的工资。如果没有第 <code>n</code> 个最高工资，查询应该报告为 <code>null</code> 。</p><p>查询结果格式如下所示。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">Employee table:</span><br><span class="line">+----+--------+</span><br><span class="line">| id | salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+----+--------+</span><br><span class="line">n = 2</span><br><span class="line">输出: </span><br><span class="line">+------------------------+</span><br><span class="line">| getNthHighestSalary(2) |</span><br><span class="line">+------------------------+</span><br><span class="line">| 200                    |</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">Employee 表:</span><br><span class="line">+----+--------+</span><br><span class="line">| id | salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">+----+--------+</span><br><span class="line">n = 2</span><br><span class="line">输出: </span><br><span class="line">+------------------------+</span><br><span class="line">| getNthHighestSalary(2) |</span><br><span class="line">+------------------------+</span><br><span class="line">| null                   |</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><p>通过次数189,712</p><p>提交次数405,072</p><h2 id="解1-单表查询"><a href="#解1-单表查询" class="headerlink" title="解1 单表查询"></a>解1 单表查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getNthHighestSalary(N <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SET</span> N := N<span class="number">-1</span>;</span><br><span class="line">  RETURN (</span><br><span class="line">      <span class="comment"># Write your MySQL query statement below.</span></span><br><span class="line">      <span class="keyword">SELECT</span> </span><br><span class="line">            salary</span><br><span class="line">      <span class="keyword">FROM</span> </span><br><span class="line">            employee</span><br><span class="line">      <span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">            salary</span><br><span class="line">      <span class="keyword">ORDER</span> <span class="keyword">BY</span> </span><br><span class="line">            salary <span class="keyword">DESC</span></span><br><span class="line">      <span class="keyword">LIMIT</span> N, <span class="number">1</span></span><br><span class="line">  );</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1813. 句子相似性 III</title>
    <link href="https://ferrerobomb.github.io/2023/01/16/leetcode-1813.%20%E5%8F%A5%E5%AD%90%E7%9B%B8%E4%BC%BC%E6%80%A7%20III/"/>
    <id>https://ferrerobomb.github.io/2023/01/16/leetcode-1813. 句子相似性 III/</id>
    <published>2023-01-16T15:49:04.000Z</published>
    <updated>2023-01-16T15:56:06.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1813-句子相似性-III"><a href="#leetcode-1813-句子相似性-III" class="headerlink" title="leetcode-1813. 句子相似性 III"></a>leetcode-1813. 句子相似性 III</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>一个句子是由一些单词与它们之间的单个空格组成，且句子的开头和结尾没有多余空格。比方说，”Hello World” ，”HELLO” ，”hello world hello world” 都是句子。每个单词都 只 包含大写和小写英文字母。</p><p>如果两个句子 sentence1 和 sentence2 ，可以通过往其中一个句子插入一个任意的句子（可以是空句子）而得到另一个句子，那么我们称这两个句子是 相似的 。比方说，sentence1 = “Hello my name is Jane” 且 sentence2 = “Hello Jane” ，我们可以往 sentence2 中 “Hello” 和 “Jane” 之间插入 “my name is” 得到 sentence1 。</p><p>给你两个句子 sentence1 和 sentence2 ，如果 sentence1 和 sentence2 是相似的，请你返回 true ，否则返回 false 。</p><p>示例 1：</p><p>输入：sentence1 = “My name is Haley”, sentence2 = “My Haley”<br>输出：true<br>解释：可以往 sentence2 中 “My” 和 “Haley” 之间插入 “name is” ，得到 sentence1 。<br>示例 2：</p><p>输入：sentence1 = “of”, sentence2 = “A lot of words”<br>输出：false<br>解释：没法往这两个句子中的一个句子只插入一个句子就得到另一个句子。<br>示例 3：</p><p>输入：sentence1 = “Eating right now”, sentence2 = “Eating”<br>输出：true<br>解释：可以往 sentence2 的结尾插入 “right now” 得到 sentence1 。<br>示例 4：</p><p>输入：sentence1 = “Luky”, sentence2 = “Lucccky”<br>输出：false</p><p>提示：</p><p>1 &lt;= sentence1.length, sentence2.length &lt;= 100<br>sentence1 和 sentence2 都只包含大小写英文字母和空格。<br>sentence1 和 sentence2 中的单词都只由单个空格隔开。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/sentence-similarity-iii" target="_blank" rel="noopener">https://leetcode.cn/problems/sentence-similarity-iii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1-理解题意法"><a href="#解1-理解题意法" class="headerlink" title="解1 理解题意法"></a>解1 理解题意法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; sentence1</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; sentence2</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> areSentencesSimilar = <span class="function"><span class="keyword">function</span>(<span class="params">sentence1, sentence2</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 插入情况</span></span><br><span class="line">  <span class="comment">// 情况1：头部插入，尾部相同</span></span><br><span class="line">  <span class="comment">// 情况2：中间插入，则头尾相同</span></span><br><span class="line">  <span class="comment">// 情况3：尾部插入，头部相同</span></span><br><span class="line">  <span class="keyword">let</span> arrS1 = sentence1.split(<span class="string">" "</span>)</span><br><span class="line">  <span class="keyword">let</span> arrS2 = sentence2.split(<span class="string">" "</span>)</span><br><span class="line">  <span class="comment">// 双指针依次遍历，判断前半截和后半截。题目说明为向中间插入一段字符</span></span><br><span class="line">  <span class="comment">// let p1 = 0, p2 = 0</span></span><br><span class="line">  <span class="comment">// const minLength = Math.min(arrS1.length, arrS2.length)</span></span><br><span class="line">  <span class="keyword">while</span> (arrS1.length &amp;&amp; arrS2.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arrS1[<span class="number">0</span>] === arrS2[<span class="number">0</span>]) &#123;</span><br><span class="line">      <span class="comment">// 头部相同，移除后继续，如果使用指针的话可以不移除 指针++</span></span><br><span class="line">      arrS1.shift();</span><br><span class="line">      arrS2.shift();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arrS1[arrS1.length - <span class="number">1</span>] === arrS2[arrS2.length - <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="comment">// 尾部相同</span></span><br><span class="line">      arrS1.pop();</span><br><span class="line">      arrS2.pop();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 头尾都不相同 必定错误</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 遍历结束如果为返回则说明：某一个字符串遍历完了，且符合头部一直相同或尾部一直相同</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解2-双指针法"><a href="#解2-双指针法" class="headerlink" title="解2 双指针法"></a>解2 双指针法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let p1 = 0, p2 = 0</span></span><br><span class="line"><span class="comment">// const minLength = Math.min(arrS1.length, arrS2.length)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-55. 跳跃游戏</title>
    <link href="https://ferrerobomb.github.io/2023/01/15/leetcode-55.%20%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/"/>
    <id>https://ferrerobomb.github.io/2023/01/15/leetcode-55. 跳跃游戏/</id>
    <published>2023-01-15T06:23:01.000Z</published>
    <updated>2023-01-15T06:38:44.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-55-跳跃游戏"><a href="#leetcode-55-跳跃游戏" class="headerlink" title="leetcode-55. 跳跃游戏"></a>leetcode-55. 跳跃游戏</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个下标。</p><p>示例 1：</p><p>输入：nums = [2,3,1,1,4]<br>输出：true<br>解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。<br>示例 2：</p><p>输入：nums = [3,2,1,0,4]<br>输出：false<br>解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 3 * 104<br>0 &lt;= nums[i] &lt;= 105</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/jump-game" target="_blank" rel="noopener">https://leetcode.cn/problems/jump-game</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> jump = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// let steps = 0 // 输出的结果，最大步数</span></span><br><span class="line">  <span class="keyword">let</span> currentMaxDistance = <span class="number">0</span>; <span class="comment">// 当前位置（走过之后）覆盖的最大范围</span></span><br><span class="line">  <span class="keyword">let</span> nextMaxDistance = <span class="number">0</span>; <span class="comment">// 下个位置（还没走呢）覆盖到的最大范围</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123; <span class="comment">// 不必访问最后一个元素</span></span><br><span class="line">    nextMaxDistance = <span class="built_in">Math</span>.max(nums[i] + i, nextMaxDistance); <span class="comment">// 更新下一步覆盖的最远距离下标</span></span><br><span class="line">    <span class="keyword">if</span> (i === currentMaxDistance) &#123; <span class="comment">// 遇到当前覆盖的最远距离下标（理解为小范围的遍历，遍历每个位置i的范围，直到达到了最远距离）</span></span><br><span class="line">      currentMaxDistance = nextMaxDistance; <span class="comment">// 更新当前覆盖的最远距离下标</span></span><br><span class="line">      <span class="comment">// steps++;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> currentMaxDistance &gt;= nums.length - <span class="number">1</span>; <span class="comment">// 能否走到最后位置</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(jump([<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>]));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-45-跳跃游戏-II</title>
    <link href="https://ferrerobomb.github.io/2023/01/14/leetcode-45-%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F-II/"/>
    <id>https://ferrerobomb.github.io/2023/01/14/leetcode-45-跳跃游戏-II/</id>
    <published>2023-01-14T15:47:23.000Z</published>
    <updated>2023-01-15T06:35:27.532Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-45-跳跃游戏-II"><a href="#leetcode-45-跳跃游戏-II" class="headerlink" title="leetcode-45. 跳跃游戏 II"></a>leetcode-<a href="https://leetcode.cn/problems/jump-game-ii/" target="_blank" rel="noopener">45. 跳跃游戏 II</a></h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个长度为 n 的 0 索引整数数组 nums。初始位置为 nums[0]。</p><p>每个元素 nums[i] 表示从索引 i 向前跳转的最大长度。换句话说，如果你在 nums[i] 处，你可以跳转到任意 nums[i + j] 处:</p><p>0 &lt;= j &lt;= nums[i]<br>i + j &lt; n<br>返回到达 nums[n - 1] 的最小跳跃次数。生成的测试用例可以到达 nums[n - 1]。</p><p>示例 1:</p><p>输入: nums = [2,3,1,1,4]<br>输出: 2<br>解释: 跳到最后一个位置的最小跳跃数是 2。<br>     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。<br>示例 2:</p><p>输入: nums = [2,3,0,1,4]<br>输出: 2</p><p>提示:</p><p>1 &lt;= nums.length &lt;= 104<br>0 &lt;= nums[i] &lt;= 1000</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/jump-game-ii" target="_blank" rel="noopener">https://leetcode.cn/problems/jump-game-ii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> jump = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span> <span class="comment">// 输出的结果，最大步数</span></span><br><span class="line">  <span class="keyword">let</span> currentMaxDistance = <span class="number">0</span>; <span class="comment">// 当前位置覆盖到的最大范围</span></span><br><span class="line">  <span class="keyword">let</span> nextMaxDistance = <span class="number">0</span>; <span class="comment">// 下个位置覆盖到的最大范围</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123; <span class="comment">// 不必访问最后一个元素</span></span><br><span class="line">    nextMaxDistance = <span class="built_in">Math</span>.max(nums[i] + i, nextMaxDistance); <span class="comment">// 更新下一步覆盖的最远距离下标</span></span><br><span class="line">    <span class="keyword">if</span> (i === currentMaxDistance) &#123; <span class="comment">// 遇到当前覆盖的最远距离下标</span></span><br><span class="line">      currentMaxDistance = nextMaxDistance; <span class="comment">// 更新当前覆盖的最远距离下标</span></span><br><span class="line">      res++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(jump([<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>]));</span><br></pre></td></tr></table></figure><h2 id="解2-语义化与注释"><a href="#解2-语义化与注释" class="headerlink" title="解2  语义化与注释"></a>解2  语义化与注释</h2><p>如果不理解的话可以一天以后再来吸收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> jump = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> steps = <span class="number">0</span> <span class="comment">// 输出的结果，最大步数</span></span><br><span class="line">  <span class="keyword">let</span> currentMaxDistance = <span class="number">0</span>; <span class="comment">// 当前位置（走过之后）覆盖的最大范围</span></span><br><span class="line">  <span class="keyword">let</span> nextMaxDistance = <span class="number">0</span>; <span class="comment">// 下个位置（还没走呢）覆盖到的最大范围</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123; <span class="comment">// 不必访问最后一个元素 目前没想到更好的解释，暂且理解为 因为是计算最大范围，所以不用走出最后一步 。最后一步意思是能到达nums.length - 1位置了，所以不用计算nums.length - 1位置的范围</span></span><br><span class="line">    nextMaxDistance = <span class="built_in">Math</span>.max(nums[i] + i, nextMaxDistance); <span class="comment">// 更新下一步覆盖的最远距离下标</span></span><br><span class="line">    <span class="keyword">if</span> (i === currentMaxDistance) &#123; <span class="comment">// 遇到当前覆盖的最远距离下标（理解为小范围的遍历，遍历每个位置i的范围，直到达到了最远距离）</span></span><br><span class="line">      currentMaxDistance = nextMaxDistance; <span class="comment">// 更新当前覆盖的最远距离下标</span></span><br><span class="line">      steps++; <span class="comment">// 走</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> steps;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(jump([<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">4</span>]));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-200. 岛屿数量</title>
    <link href="https://ferrerobomb.github.io/2023/01/13/leetcode-200.%20%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/"/>
    <id>https://ferrerobomb.github.io/2023/01/13/leetcode-200. 岛屿数量/</id>
    <published>2023-01-13T13:19:08.000Z</published>
    <updated>2023-01-15T13:37:54.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-200-岛屿数量"><a href="#leetcode-200-岛屿数量" class="headerlink" title="leetcode-200. 岛屿数量"></a>leetcode-200. 岛屿数量</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><p>示例 1：</p><p>输入：grid = [<br>  [“1”,”1”,”1”,”1”,”0”],<br>  [“1”,”1”,”0”,”1”,”0”],<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“0”,”0”,”0”,”0”,”0”]<br>]<br>输出：1<br>示例 2：</p><p>输入：grid = [<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“0”,”0”,”1”,”0”,”0”],<br>  [“0”,”0”,”0”,”1”,”1”]<br>]<br>输出：3</p><p>提示：</p><p>m == grid.length<br>n == grid[i].length<br>1 &lt;= m, n &lt;= 300<br>grid[i][j] 的值为 ‘0’ 或 ‘1’</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/number-of-islands" target="_blank" rel="noopener">https://leetcode.cn/problems/number-of-islands</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1-DFS"><a href="#解1-DFS" class="headerlink" title="解1  DFS"></a>解1  DFS</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;character[][]&#125; grid</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> numIslands = <span class="function">(<span class="params">grid</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> islandCount = <span class="number">0</span> <span class="comment">// 岛屿数量</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">      <span class="comment">//循环网格</span></span><br><span class="line">      <span class="keyword">if</span> (grid[i][j] === <span class="string">'1'</span>) &#123;</span><br><span class="line">        islandCount++ <span class="comment">//如果为陆地，count++，</span></span><br><span class="line">        <span class="comment">// 然后DFS将ij周围的陆地都沉没，即置为0</span></span><br><span class="line">        changeToZero(i, j, grid) </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> islandCount</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeToZero</span>(<span class="params">i, j, grid</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//沉没四周的陆地</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    i &lt; <span class="number">0</span> ||</span><br><span class="line">    i &gt;= grid.length ||</span><br><span class="line">    j &lt; <span class="number">0</span> ||</span><br><span class="line">    j &gt;= grid[<span class="number">0</span>].length ||</span><br><span class="line">    grid[i][j] === <span class="string">'0'</span></span><br><span class="line">  )</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">// 检查坐标的合法性，如果已经是海水0了 则终止</span></span><br><span class="line">  grid[i][j] = <span class="string">'0'</span> <span class="comment">//让四周的陆地变为海水</span></span><br><span class="line">  changeToZero(i, j + <span class="number">1</span>, grid)</span><br><span class="line">  changeToZero(i, j - <span class="number">1</span>, grid)</span><br><span class="line">  changeToZero(i + <span class="number">1</span>, j, grid)</span><br><span class="line">  changeToZero(i - <span class="number">1</span>, j, grid)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解2-BFS"><a href="#解2-BFS" class="headerlink" title="解2  BFS"></a>解2  BFS</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numIslands = <span class="function">(<span class="params">grid</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> queue = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (grid[i][j] === <span class="string">'1'</span>) &#123;</span><br><span class="line">        count++</span><br><span class="line">        grid[i][j] = <span class="string">'0'</span> <span class="comment">// 做标记，避免重复遍历</span></span><br><span class="line">        queue.push([i, j]) <span class="comment">//加入队列</span></span><br><span class="line">        changeToZero(queue, grid)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeToZero</span>(<span class="params">queue, grid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dirs = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">-1</span>],</span><br><span class="line">    [<span class="number">-1</span>, <span class="number">0</span>],</span><br><span class="line">  ] <span class="comment">// 四个方向</span></span><br><span class="line">  <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">    <span class="comment">//当队列中还有元素的时候</span></span><br><span class="line">    <span class="keyword">const</span> cur = queue.shift() <span class="comment">//取出队首元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> dir <span class="keyword">of</span> dirs) &#123;</span><br><span class="line">      <span class="comment">//四个方向广度优先扩散</span></span><br><span class="line">      <span class="keyword">const</span> x = cur[<span class="number">0</span>] + dir[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">const</span> y = cur[<span class="number">1</span>] + dir[<span class="number">1</span>]</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        x &lt; <span class="number">0</span> ||</span><br><span class="line">        x &gt;= grid.length ||</span><br><span class="line">        y &lt; <span class="number">0</span> ||</span><br><span class="line">        y &gt;= grid[<span class="number">0</span>].length ||</span><br><span class="line">        grid[x][y] === <span class="string">'0'</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125; <span class="comment">//检查坐标合法性，如果已经是海水0了或出了地图边界 则终止</span></span><br><span class="line">      grid[x][y] = <span class="string">'0'</span> <span class="comment">//沉没陆地</span></span><br><span class="line">      queue.push([x, y]) <span class="comment">//四周的节点加入队列</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1141. 查询近30天活跃用户数</title>
    <link href="https://ferrerobomb.github.io/2022/05/09/leetcode-1141.%20%E6%9F%A5%E8%AF%A2%E8%BF%9130%E5%A4%A9%E6%B4%BB%E8%B7%83%E7%94%A8%E6%88%B7%E6%95%B0/"/>
    <id>https://ferrerobomb.github.io/2022/05/09/leetcode-1141. 查询近30天活跃用户数/</id>
    <published>2022-05-09T04:35:44.000Z</published>
    <updated>2022-05-09T06:20:50.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1141-查询近30天活跃用户数"><a href="#leetcode-1141-查询近30天活跃用户数" class="headerlink" title="leetcode-1141. 查询近30天活跃用户数"></a>leetcode-1141. 查询近30天活跃用户数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>活动记录表：Activity</p><p>+—————+———+<br>| Column Name   | Type    |<br>+—————+———+<br>| user_id       | int     |<br>| session_id    | int     |<br>| activity_date | date    |<br>| activity_type | enum    |<br>+—————+———+<br>该表是用户在社交网站的活动记录。<br>该表没有主键，可能包含重复数据。<br>activity_type 字段为以下四种值 (‘open_session’, ‘end_session’, ‘scroll_down’, ‘send_message’)。<br>每个 session_id 只属于一个用户。</p><p>请写SQL查询出截至 2019-07-27（包含2019-07-27），近 30 天的每日活跃用户数（当天只要有一条活动记录，即为活跃用户）。</p><p>以 任意顺序 返回结果表。</p><p>查询结果示例如下。</p><p>示例 1:</p><p>输入：<br>Activity table:<br>+———+————+—————+—————+<br>| user_id | session_id | activity_date | activity_type |<br>+———+————+—————+—————+<br>| 1       | 1          | 2019-07-20    | open_session  |<br>| 1       | 1          | 2019-07-20    | scroll_down   |<br>| 1       | 1          | 2019-07-20    | end_session   |<br>| 2       | 4          | 2019-07-20    | open_session  |<br>| 2       | 4          | 2019-07-21    | send_message  |<br>| 2       | 4          | 2019-07-21    | end_session   |<br>| 3       | 2          | 2019-07-21    | open_session  |<br>| 3       | 2          | 2019-07-21    | send_message  |<br>| 3       | 2          | 2019-07-21    | end_session   |<br>| 4       | 3          | 2019-06-25    | open_session  |<br>| 4       | 3          | 2019-06-25    | end_session   |<br>+———+————+—————+—————+<br>输出：<br>+————+————–+<br>| day        | active_users |<br>+————+————–+<br>| 2019-07-20 | 2            |<br>| 2019-07-21 | 2            |<br>+————+————–+<br>解释：注意非活跃用户的记录不需要展示。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode.cn/problems/user-activity-for-the-past-30-days-i" target="_blank" rel="noopener">https://leetcode.cn/problems/user-activity-for-the-past-30-days-i</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> activity_date <span class="keyword">as</span> <span class="keyword">day</span>, <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> user_id) <span class="keyword">as</span> active_users</span><br><span class="line"><span class="keyword">FROM</span> Activity</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">datediff</span>(<span class="string">'2019-07-27'</span>,activity_date) &lt; <span class="number">30</span></span><br><span class="line"><span class="comment">-- WHERE activity_date BETWEEN '2019-06-28' AND '2019-07-27'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> activity_date</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-607. 销售员</title>
    <link href="https://ferrerobomb.github.io/2022/05/08/leetcode-607.%20%E9%94%80%E5%94%AE%E5%91%98/"/>
    <id>https://ferrerobomb.github.io/2022/05/08/leetcode-607. 销售员/</id>
    <published>2022-05-08T04:35:44.000Z</published>
    <updated>2022-05-08T12:04:51.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-607-销售员"><a href="#leetcode-607-销售员" class="headerlink" title="leetcode-607. 销售员"></a>leetcode-607. 销售员</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>表: SalesPerson</p><p>+—————–+———+<br>| Column Name     | Type    |<br>+—————–+———+<br>| sales_id        | int     |<br>| name            | varchar |<br>| salary          | int     |<br>| commission_rate | int     |<br>| hire_date       | date    |<br>+—————–+———+<br>sales_id 是该表的主键列。<br>该表的每一行都显示了销售人员的姓名和 ID ，以及他们的工资、佣金率和雇佣日期。</p><p>表: Company</p><p>+————-+———+<br>| Column Name | Type    |<br>+————-+———+<br>| com_id      | int     |<br>| name        | varchar |<br>| city        | varchar |<br>+————-+———+<br>com_id 是该表的主键列。<br>该表的每一行都表示公司的名称和 ID ，以及公司所在的城市。</p><p>表: Orders</p><p>+————-+——+<br>| Column Name | Type |<br>+————-+——+<br>| order_id    | int  |<br>| order_date  | date |<br>| com_id      | int  |<br>| sales_id    | int  |<br>| amount      | int  |<br>+————-+——+<br>order_id 是该表的主键列。<br>com_id 是 Company 表中 com_id 的外键。<br>sales_id 是来自销售员表 sales_id 的外键。<br>该表的每一行包含一个订单的信息。这包括公司的 ID 、销售人员的 ID 、订单日期和支付的金额。</p><p>编写一个SQL查询，报告没有任何与名为 “RED” 的公司相关的订单的所有销售人员的姓名。</p><p>以 任意顺序 返回结果表。</p><p>查询结果格式如下所示。</p><p>示例：</p><p>输入：<br>SalesPerson 表:<br>+———-+——+——–+—————–+————+<br>| sales_id | name | salary | commission_rate | hire_date  |<br>+———-+——+——–+—————–+————+<br>| 1        | John | 100000 | 6               | 4/1/2006   |<br>| 2        | Amy  | 12000  | 5               | 5/1/2010   |<br>| 3        | Mark | 65000  | 12              | 12/25/2008 |<br>| 4        | Pam  | 25000  | 25              | 1/1/2005   |<br>| 5        | Alex | 5000   | 10              | 2/3/2007   |<br>+———-+——+——–+—————–+————+<br>Company 表:<br>+——–+——–+———-+<br>| com_id | name   | city     |<br>+——–+——–+———-+<br>| 1      | RED    | Boston   |<br>| 2      | ORANGE | New York |<br>| 3      | YELLOW | Boston   |<br>| 4      | GREEN  | Austin   |<br>+——–+——–+———-+<br>Orders 表:<br>+———-+————+——–+———-+——–+<br>| order_id | order_date | com_id | sales_id | amount |<br>+———-+————+——–+———-+——–+<br>| 1        | 1/1/2014   | 3      | 4        | 10000  |<br>| 2        | 2/1/2014   | 4      | 5        | 5000   |<br>| 3        | 3/1/2014   | 1      | 1        | 50000  |<br>| 4        | 4/1/2014   | 1      | 4        | 25000  |<br>+———-+————+——–+———-+——–+<br>输出：<br>+——+<br>| name |<br>+——+<br>| Amy  |<br>| Mark |<br>| Alex |<br>+——+<br>解释：<br>根据表 orders 中的订单 ‘3’ 和 ‘4’ ，容易看出只有 ‘John’ 和 ‘Pam’ 两个销售员曾经向公司 ‘RED’ 销售过。<br>所以我们需要输出表 salesperson 中所有其他人的名字。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/sales-person" target="_blank" rel="noopener">https://leetcode-cn.com/problems/sales-person</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s.name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    salesperson s</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    s.sales_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span></span><br><span class="line">            o.sales_id</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">            orders o</span><br><span class="line">                <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">            company c <span class="keyword">ON</span> o.com_id = c.com_id</span><br><span class="line">        <span class="keyword">WHERE</span></span><br><span class="line">            c.name = <span class="string">'RED'</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-620. 有趣的电影</title>
    <link href="https://ferrerobomb.github.io/2022/05/07/leetcode-620.%20%E6%9C%89%E8%B6%A3%E7%9A%84%E7%94%B5%E5%BD%B1/"/>
    <id>https://ferrerobomb.github.io/2022/05/07/leetcode-620. 有趣的电影/</id>
    <published>2022-05-07T04:35:44.000Z</published>
    <updated>2022-05-08T12:01:33.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-620-有趣的电影"><a href="#leetcode-620-有趣的电影" class="headerlink" title="leetcode-620. 有趣的电影"></a>leetcode-620. 有趣的电影</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>某城市开了一家新的电影院，吸引了很多人过来看电影。该电影院特别注意用户体验，专门有个 LED显示板做电影推荐，上面公布着影评和相关电影描述。</p><p>作为该电影院的信息部主管，您需要编写一个 SQL查询，找出所有影片描述为非 boring (不无聊) 的并且 id 为奇数 的影片，结果请按等级 rating 排列。</p><p>例如，下表 cinema:</p><p>+———+———–+————–+———–+<br>|   id    | movie     |  description |  rating   |<br>+———+———–+————–+———–+<br>|   1     | War       |   great 3D   |   8.9     |<br>|   2     | Science   |   fiction    |   8.5     |<br>|   3     | irish     |   boring     |   6.2     |<br>|   4     | Ice song  |   Fantacy    |   8.6     |<br>|   5     | House card|   Interesting|   9.1     |<br>+———+———–+————–+———–+<br>对于上面的例子，则正确的输出是为：</p><p>+———+———–+————–+———–+<br>|   id    | movie     |  description |  rating   |<br>+———+———–+————–+———–+<br>|   5     | House card|   Interesting|   9.1     |<br>|   1     | War       |   great 3D   |   8.9     |<br>+———+———–+————–+———–+</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/not-boring-movies" target="_blank" rel="noopener">https://leetcode-cn.com/problems/not-boring-movies</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from cinema</span><br><span class="line">where mod(id, 2) = 1 and description != &apos;boring&apos;</span><br><span class="line">order by rating DESC</span><br><span class="line">;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>

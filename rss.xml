<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>橙柚养乐多的博客</title>
  
  <subtitle>记录与领悟</subtitle>
  <link href="/rss.xml" rel="self"/>
  
  <link href="https://ferrerobomb.github.io/"/>
  <updated>2022-04-15T06:18:46.305Z</updated>
  <id>https://ferrerobomb.github.io/</id>
  
  <author>
    <name>橙柚养乐多</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode中国版目录</title>
    <link href="https://ferrerobomb.github.io/2099/02/19/leetcode%E4%B8%AD%E5%9B%BD%E7%89%88%E7%9B%AE%E5%BD%95/"/>
    <id>https://ferrerobomb.github.io/2099/02/19/leetcode中国版目录/</id>
    <published>2099-02-19T15:44:03.000Z</published>
    <updated>2022-04-15T06:18:46.305Z</updated>
    
    <content type="html"><![CDATA[<h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><table><thead><tr><th>序号.题目.leetcode地址</th><th>题目.解法.地址</th></tr></thead><tbody><tr><td><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">1. 两数之和</a></td><td><a href="https://ferrerobomb.github.io/2022/01/20/leetcode-1.两数之和/">leetcode-1.两数之和</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">2. 两数相加</a></td><td><a href="https://ferrerobomb.github.io/2022/01/25/leetcode-2.两数相加/">leetcode-2.两数相加</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3. 无重复字符的最长子串</a></td><td><a href="https://ferrerobomb.github.io/2022/01/28/leetcode-3.无重复字符的最长子串/">leetcode-3.无重复字符的最长子串</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/zigzag-conversion/" target="_blank" rel="noopener">6. Z 字形变换</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-6.Z字形变换/">leetcode-6.Z字形变换</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/reverse-integer/" target="_blank" rel="noopener">7. 整数反转</a></td><td><a href="https://ferrerobomb.github.io/2022/01/07/leetcode-7. 整数反转/">leetcode-7. 整数反转</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/palindrome-number/" target="_blank" rel="noopener">9. 回文数</a></td><td><a href="https://ferrerobomb.github.io/2022/02/04/leetcode-9.回文数/">leetcode-9.回文数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/roman-to-integer/" target="_blank" rel="noopener">13. 罗马数字转整数</a></td><td><a href="https://ferrerobomb.github.io/2022/01/05/leetcode-13. 罗马数字转整数/">leetcode-13. 罗马数字转整数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener">14. 最长公共前缀</a></td><td><a href="https://ferrerobomb.github.io/2022/03/17/leetcode-14. 最长公共前缀/">leetcode-14. 最长公共前缀</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">17. 电话号码的字母组合</a></td><td><a href="https://ferrerobomb.github.io/2022/02/24/leetcode-17. 电话号码的字母组合/">leetcode-17. 电话号码的字母组合</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">20. 有效的括号</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-20-有效的括号/">leetcode-20.有效的括号</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">21. 合并两个有序链表</a></td><td><a href="https://ferrerobomb.github.io/2022/02/19/leetcode-21.合并两个有序链表/">leetcode-21.合并两个有序链表</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/generate-parentheses/" target="_blank" rel="noopener">22. 括号生成</a></td><td><a href="https://ferrerobomb.github.io/2022/01/22/leetcode-22.括号生成/">leetcode-22.括号生成</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/" target="_blank" rel="noopener">26. 删除有序数组中的重复项</a></td><td><a href="https://ferrerobomb.github.io/2022/03/02/leetcode-26. 删除有序数组中的重复项/">leetcode-26. 删除有序数组中的重复项</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/remove-element/" target="_blank" rel="noopener">27. 移除元素</a></td><td><a href="https://ferrerobomb.github.io/2022/03/12/leetcode-27. 移除元素/">leetcode-27. 移除元素</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/implement-strstr/" target="_blank" rel="noopener">28. 实现 strStr()</a></td><td><a href="https://ferrerobomb.github.io/2022/01/06/leetcode-28. 实现 strStr(">leetcode-28. 实现 strStr()</a>/)</td></tr><tr><td><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/" target="_blank" rel="noopener">33. 搜索旋转排序数组</a></td><td><a href="https://ferrerobomb.github.io/2022/01/14/leetcode-33.搜索旋转排序数组/">leetcode-33.搜索旋转排序数组</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener">34. 在排序数组中查找元素的第一个和最后一个位置</a></td><td><a href="https://ferrerobomb.github.io/2022/01/02/leetcode-34. 在排序数组中查找元素的第一个和最后一个位置/">leetcode-34. 在排序数组中查找元素的第一个和最后一个位置</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/search-insert-position/" target="_blank" rel="noopener">35. 搜索插入位置</a></td><td><a href="https://ferrerobomb.github.io/2022/02/27/leetcode-35. 搜索插入位置/">leetcode-35. 搜索插入位置</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/valid-sudoku" target="_blank" rel="noopener">36. 有效的数独</a></td><td><a href="https://ferrerobomb.github.io/2022/03/11/leetcode-36. 有效的数独/">leetcode-36. 有效的数独</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/multiply-strings/" target="_blank" rel="noopener">43. 字符串相乘</a></td><td><a href="https://ferrerobomb.github.io/2022/02/23/leetcode-43. 字符串相乘/">leetcode-43. 字符串相乘</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/permutations/" target="_blank" rel="noopener">46. 全排列</a></td><td><a href="https://ferrerobomb.github.io/2022/03/01/leetcode-46. 全排列/">leetcode-46. 全排列</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/rotate-image/" target="_blank" rel="noopener">48. 旋转图像</a></td><td><a href="https://ferrerobomb.github.io/2022/01/04/leetcode-48. 旋转图像/">leetcode-48. 旋转图像</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/powx-n/" target="_blank" rel="noopener">50. Pow(x, n)</a></td><td><a href="https://ferrerobomb.github.io/2022/02/28/leetcode-50. Pow(x, n">leetcode-50. Pow(x, n)</a>/)</td></tr><tr><td><a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">53. 最大子数组和</a></td><td><a href="https://ferrerobomb.github.io/2022/01/29/leetcode-53.最大子数组和/">leetcode-53. 最大子数组和</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/spiral-matrix/" target="_blank" rel="noopener">54. 螺旋矩阵</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-54-螺旋矩阵/">leetcode-54.螺旋矩阵</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/merge-intervals/" target="_blank" rel="noopener">56. 合并区间</a></td><td><a href="https://ferrerobomb.github.io/2022/01/10/leetcode-56. 合并区间/">leetcode-56. 合并区间</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/length-of-last-word/" target="_blank" rel="noopener">58. 最后一个单词的长度</a></td><td><a href="https://ferrerobomb.github.io/2022/03/28/leetcode-58. 最后一个单词的长度/">leetcode-58. 最后一个单词的长度</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/unique-paths/" target="_blank" rel="noopener">62. 不同路径</a></td><td><a href="https://ferrerobomb.github.io/2022/01/21/leetcode-62.不同路径/">leetcode-62.不同路径</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/plus-one/" target="_blank" rel="noopener">66. 加一</a></td><td><a href="https://ferrerobomb.github.io/2022/03/27/leetcode-66.加一/">leetcode-66. 加一</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener">70. 爬楼梯</a></td><td><a href="https://ferrerobomb.github.io/2022/01/24/leetcode-70.爬楼梯/">leetcode-70.爬楼梯</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/sort-colors/" target="_blank" rel="noopener">75. 颜色分类</a></td><td><a href="https://ferrerobomb.github.io/2022/01/30/leetcode-75.颜色分类/">leetcode-75.颜色分类</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/subsets/" target="_blank" rel="noopener">78. 子集</a></td><td><a href="https://ferrerobomb.github.io/2022/02/08/leetcode-78.子集/">leetcode-78.子集</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/word-search/" target="_blank" rel="noopener">79. 单词搜索</a></td><td><a href="https://ferrerobomb.github.io/2022/01/23/leetcode-79.单词搜索/">leetcode-79.单词搜索</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener">83. 删除排序链表中的重复元素</a></td><td><a href="https://ferrerobomb.github.io/2022/03/25/leetcode-83. 删除排序链表中的重复元素/">leetcode-83.删除排序链表中的重复元素</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/merge-sorted-array/" target="_blank" rel="noopener">88. 合并两个有序数组</a></td><td><a href="https://ferrerobomb.github.io/2022/02/01/leetcode-88.合并两个有序数组/">leetcode-88.合并两个有序数组</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal" target="_blank" rel="noopener">94. 二叉树的中序遍历</a></td><td><a href="https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-二叉树的遍历/">leetcode-94/144/145-二叉树的遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/validate-binary-search-tree/" target="_blank" rel="noopener">98. 验证二叉搜索树</a></td><td><a href="https://ferrerobomb.github.io/2022/02/26/leetcode-98. 验证二叉搜索树/">leetcode-98. 验证二叉搜索树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/same-tree/" target="_blank" rel="noopener">100. 相同的树</a></td><td><a href="https://ferrerobomb.github.io/2022/02/22/leetcode-100. 相同的树/">leetcode-100. 相同的树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/symmetric-tree/" target="_blank" rel="noopener">101. 对称二叉树</a></td><td><a href="https://ferrerobomb.github.io/2022/03/21/leetcode-101. 对称二叉树/">leetcode-101. 对称二叉树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">102. 二叉树的层序遍历</a></td><td><a href="https://ferrerobomb.github.io/2022/02/11/leetcode-102.二叉树的层序遍历/">leetcode-102.二叉树的层序遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/pascals-triangle/" target="_blank" rel="noopener">118. 杨辉三角</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-118.杨辉三角/">leetcode-118.杨辉三角</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener">136. 只出现一次的数字</a></td><td><a href="https://ferrerobomb.github.io/2022/02/20/leetcode-136.只出现一次的数字/">leetcode-136.只出现一次的数字</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/single-number-ii/" target="_blank" rel="noopener">137. 只出现一次的数字 II</a></td><td><a href="https://ferrerobomb.github.io/2022/01/08/leetcode-137. 只出现一次的数字 II/">leetcode-137. 只出现一次的数字 II</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-preorder-traversal" target="_blank" rel="noopener">144. 二叉树的前序遍历</a></td><td><a href="https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-二叉树的遍历/">leetcode-94/144/145-二叉树的遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal" target="_blank" rel="noopener">145. 二叉树的后序遍历</a></td><td><a href="https://ferrerobomb.github.io/2020/02/26/leetcode-94-144-145-二叉树的遍历/">leetcode-94/144/145-二叉树的遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/compare-version-numbers/" target="_blank" rel="noopener">165. 比较版本号</a></td><td><a href="https://ferrerobomb.github.io/2022/02/07/leetcode-165.比较版本号/">leetcode-165.比较版本号</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/excel-sheet-column-title/" target="_blank" rel="noopener">168. Excel表列名称</a></td><td><a href="https://ferrerobomb.github.io/2022/01/31/leetcode-168.Excel表列名称/">leetcode-168.Excel表列名称</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/majority-element/" target="_blank" rel="noopener">169. 多数元素</a></td><td><a href="https://ferrerobomb.github.io/2022/03/30/leetcode-169. 多数元素/">leetcode-169. 多数元素</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/excel-sheet-column-number/" target="_blank" rel="noopener">171. Excel 表列序号</a></td><td><a href="https://ferrerobomb.github.io/2022/02/03/leetcode-171.Excel 表列序号/">leetcode-171.Excel 表列序号</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/duplicate-emails/" target="_blank" rel="noopener">182. 查找重复的电子邮箱</a></td><td><a href="https://ferrerobomb.github.io/2022/02/02/leetcode-182.查找重复的电子邮箱/">leetcode-182.查找重复的电子邮箱</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/word-frequency/" target="_blank" rel="noopener">192. 统计词频</a></td><td><a href="https://ferrerobomb.github.io/2022/02/06/leetcode-192.统计词频/">leetcode-192.统计词频</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/valid-phone-numbers/" target="_blank" rel="noopener">193. 有效电话号码</a></td><td><a href="https://ferrerobomb.github.io/2022/03/05/leetcode-193. 有效电话号码/">leetcode-193. 有效电话号码</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/delete-duplicate-emails/" target="_blank" rel="noopener">196. 删除重复的电子邮箱</a></td><td><a href="https://ferrerobomb.github.io/2022/03/09/leetcode-196. 删除重复的电子邮箱/">leetcode-196. 删除重复的电子邮箱</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/house-robber/" target="_blank" rel="noopener">198. 打家劫舍</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-198-打家劫舍/">leetcode-198.打家劫舍</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/happy-number/" target="_blank" rel="noopener">202. 快乐数</a></td><td><a href="https://ferrerobomb.github.io/2022/03/04/leetcode-202. 快乐数/">leetcode-202. 快乐数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/reverse-linked-list/" target="_blank" rel="noopener">206. 反转链表</a></td><td><a href="https://ferrerobomb.github.io/2022/02/18/leetcode-206.反转链表/">leetcode-206.反转链表</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/contains-duplicate/" target="_blank" rel="noopener">217. 存在重复元素</a></td><td><a href="https://ferrerobomb.github.io/2022/03/10/leetcode-217. 存在重复元素/">leetcode-217. 存在重复元素</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/" target="_blank" rel="noopener">222. 完全二叉树的节点个数</a></td><td><a href="https://ferrerobomb.github.io/2022/02/14/leetcode-222.完全二叉树的节点个数/">leetcode-222.完全二叉树的节点个数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/add-digits/" target="_blank" rel="noopener">258. 各位相加</a></td><td><a href="https://ferrerobomb.github.io/2022/01/03/leetcode-258. 各位相加/">leetcode-258. 各位相加</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/move-zeroes" target="_blank" rel="noopener">283. 移动零</a></td><td><a href="https://ferrerobomb.github.io/2022/02/09/leetcode-283.移动零/">leetcode-283.移动零</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/nim-game/" target="_blank" rel="noopener">292. Nim 游戏</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener">322. 零钱兑换</a></td><td><a href="https://ferrerobomb.github.io/2022/01/26/leetcode-322-零钱兑换/">leetcode-322.零钱兑换</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/shuffle-an-array/" target="_blank" rel="noopener">384. 打乱数组</a></td><td><a href="https://ferrerobomb.github.io/2022/03/08/leetcode-384. 打乱数组/">leetcode-384. 打乱数组</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/find-the-difference/" target="_blank" rel="noopener">389. 找不同</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/is-subsequence/" target="_blank" rel="noopener">392. 判断子序列</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/arithmetic-slices" target="_blank" rel="noopener">413. 等差数列划分</a></td><td><a href="https://ferrerobomb.github.io/2021/08/19/leetcode-413-等差数列划分/">leetcode-413.等差数列划分</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/third-maximum-number/" target="_blank" rel="noopener">414. 第三大的数</a></td><td><a href="https://ferrerobomb.github.io/2022/03/22/leetcode-414. 第三大的数/">leetcode-414. 第三大的数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/" target="_blank" rel="noopener">429. N 叉树的层序遍历</a></td><td><a href="https://ferrerobomb.github.io/2022/02/17/leetcode-429.N叉树的层序遍历/">leetcode-429.N叉树的层序遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/number-of-segments-in-a-string/" target="_blank" rel="noopener">434. 字符串中的单词数</a></td><td></td></tr><tr><td>*<a href="https://leetcode-cn.com/problems/k-th-smallest-in-lexicographical-order/" target="_blank" rel="noopener">440. 字典序的第K小数字</a></td><td><a href="https://ferrerobomb.github.io/2022/03/23/leetcode-440. 字典序的第K小数字/">leetcode-440. 字典序的第K小数字</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/arranging-coins/" target="_blank" rel="noopener">441. 排列硬币</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/add-two-numbers-ii/" target="_blank" rel="noopener">445. 两数相加 II</a></td><td><a href="https://ferrerobomb.github.io/2022/02/10/leetcode-445.两数相加 II/">leetcode-445.两数相加 II</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/base-7/" target="_blank" rel="noopener">504. 七进制数</a></td><td><a href="https://ferrerobomb.github.io/2022/03/07/leetcode-504. 七进制数/">leetcode-504. 七进制数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/game-play-analysis-i/" target="_blank" rel="noopener">511. 游戏玩法分析 I</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence" target="_blank" rel="noopener">516. 最长回文子序列</a></td><td><a href="https://ferrerobomb.github.io/2021/08/19/leetcode-516-最长回文子序列/">leetcode-516.最长回文子序列</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/maximum-depth-of-n-ary-tree/" target="_blank" rel="noopener">559. N 叉树的最大深度</a></td><td><a href="https://ferrerobomb.github.io/2022/02/16/leetcode-559.N叉树的最大深度/">leetcode-559.N叉树的最大深度</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/" target="_blank" rel="noopener">589. N 叉树的前序遍历</a></td><td><a href="https://ferrerobomb.github.io/2022/02/13/leetcode-589.N叉树的前序遍历/">leetcode-589.N叉树的前序遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/n-ary-tree-postorder-traversal/" target="_blank" rel="noopener">590. N 叉树的后序遍历</a></td><td><a href="https://ferrerobomb.github.io/2022/02/15/leetcode-590.N叉树的后序遍历/">leetcode-590.N叉树的后序遍历</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/big-countries/" target="_blank" rel="noopener">595. 大的国家</a></td><td><a href="https://ferrerobomb.github.io/2022/01/01/leetcode-595. 大的国家/">leetcode-595. 大的国家</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists/" target="_blank" rel="noopener">599. 两个列表的最小索引总和</a></td><td><a href="https://ferrerobomb.github.io/2022/03/14/leetcode-599. 两个列表的最小索引总和/">leetcode-599. 两个列表的最小索引总和</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/construct-string-from-binary-tree/" target="_blank" rel="noopener">606. 根据二叉树创建字符串</a></td><td><a href="https://ferrerobomb.github.io/2022/03/19/leetcode-606. 根据二叉树创建字符串/">leetcode-606. 根据二叉树创建字符串</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/swap-salary/" target="_blank" rel="noopener">627. 变更性别</a></td><td></td></tr><tr><td></td><td><a href="https://ferrerobomb.github.io/2022/03/24/leetcode-661. 图片平滑器/">leetcode-661. 图片平滑器</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/two-sum-iv-input-is-a-bst/" target="_blank" rel="noopener">653. 两数之和 IV - 输入 BST</a></td><td><a href="https://ferrerobomb.github.io/2022/03/20/leetcode-653. 两数之和 IV - 输入 BST/">leetcode-653. 两数之和 IV - 输入 BST</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/baseball-game/" target="_blank" rel="noopener">682. 棒球比赛</a></td><td><a href="https://ferrerobomb.github.io/2022/03/26/leetcode-682. 棒球比赛/">leetcode-682. 棒球比赛</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/binary-search/" target="_blank" rel="noopener">704. 二分查找</a></td><td><a href="https://ferrerobomb.github.io/2022/03/18/leetcode-704. 二分查找/">leetcode-704. 二分查找</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/to-lower-case/" target="_blank" rel="noopener">709. 转换成小写字母</a></td><td><a href="https://ferrerobomb.github.io/2022/03/16/leetcode-709. 转换成小写字母/">leetcode-709. 转换成小写字母</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/self-dividing-numbers/" target="_blank" rel="noopener">728. 自除数</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/min-cost-climbing-stairs/" target="_blank" rel="noopener">746. 使用最小花费爬楼梯</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/jewels-and-stones/" target="_blank" rel="noopener">771. 宝石与石头</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/rotate-string/" target="_blank" rel="noopener">796. 旋转字符串</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/flipping-an-image/" target="_blank" rel="noopener">832. 翻转图像</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/rectangle-overlap/" target="_blank" rel="noopener">836. 矩形重叠</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/push-dominoes/" target="_blank" rel="noopener">838. 推多米诺</a></td><td><a href="https://ferrerobomb.github.io/2022/02/21/leetcode-838. 推多米诺/">leetcode-838. 推多米诺</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/sort-an-array/" target="_blank" rel="noopener">912. 排序数组</a></td><td><a href="https://ferrerobomb.github.io/2022/01/13/leetcode-912.排序数组/">leetcode-912.排序数组</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii/" target="_blank" rel="noopener">1004. 最大连续1的个数 III</a></td><td><a href="https://ferrerobomb.github.io/2022/03/29/leetcode-1004. 最大连续1的个数 III/">leetcode-1004. 最大连续1的个数 III</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/print-in-order/" target="_blank" rel="noopener">1114. 按序打印</a></td><td><a href="https://ferrerobomb.github.io/2022/03/15/leetcode-1114. 按序打印/">leetcode-1114. 按序打印</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/remove-sub-folders-from-the-filesystem/" target="_blank" rel="noopener">1233. 删除子文件夹</a></td><td><a href="https://ferrerobomb.github.io/2022/01/09/leetcode-1233. 删除子文件夹/">leetcode-1233. 删除子文件夹</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/number-of-steps-to-reduce-a-number-to-zero/" target="_blank" rel="noopener">1342. 将数字变成 0 的操作次数</a></td><td><a href="https://ferrerobomb.github.io/2022/01/11/leetcode-1342.将数字变成0的操作次数/">leetcode-1342.将数字变成0的操作次数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/richest-customer-wealth/" target="_blank" rel="noopener">1672. 最富有客户的资产总量</a></td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/count-of-matches-in-tournament/" target="_blank" rel="noopener">1688. 比赛中的配对次数</a></td><td><a href="https://ferrerobomb.github.io/2022/01/25/leetcode-1688-比赛中的配对次数/">leetcode-1688-比赛中的配对次数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/second-largest-digit-in-a-string/" target="_blank" rel="noopener">1796. 字符串中第二大的数字</a></td><td><a href="https://ferrerobomb.github.io/2022/03/03/leetcode-1796. 字符串中第二大的数字/">leetcode-1796. 字符串中第二大的数字</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/maximum-difference-between-increasing-elements/" target="_blank" rel="noopener">2016. 增量元素之间的最大差值</a></td><td><a href="https://ferrerobomb.github.io/2022/02/25/leetcode-2016. 增量元素之间的最大差值/">leetcode-2016. 增量元素之间的最大差值</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/check-if-all-as-appears-before-all-bs/" target="_blank" rel="noopener">2124. 检查是否所有 A 都在 B 之前</a></td><td><a href="https://ferrerobomb.github.io/2022/01/12/leetcode-2124.检查是否所有A都在B之前/">leetcode-2124.检查是否所有A都在B之前</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/count-elements-with-strictly-smaller-and-greater-elements/" target="_blank" rel="noopener">2148. 元素计数</a></td><td><a href="https://ferrerobomb.github.io/2022/03/06/leetcode-2148. 元素计数/">leetcode-2148. 元素计数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/keep-multiplying-found-values-by-two/" target="_blank" rel="noopener">2154. 将找到的值乘以 2</a></td><td><a href="https://ferrerobomb.github.io/2022/01/31/leetcode-2154.将找到的值乘以2/">leetcode-2154.将找到的值乘以2</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/partition-array-according-to-given-pivot/" target="_blank" rel="noopener">2161. 根据给定数字划分数组</a></td><td><a href="https://ferrerobomb.github.io/2022/03/13/leetcode-2161. 根据给定数字划分数组/">leetcode-2161. 根据给定数字划分数组</a></td></tr><tr><td>面试题30</td><td></td></tr><tr><td><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof/" target="_blank" rel="noopener">剑指 Offer 32 - II. 从上到下打印二叉树 II</a></td><td><a href="https://ferrerobomb.github.io/2020/02/25/leetcode-面试题32-II-从上到下打印二叉树II/">leetcode-面试题32-II-从上到下打印二叉树II</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/" target="_blank" rel="noopener">剑指 Offer 32 - III. 从上到下打印二叉树 III</a></td><td><a href="https://ferrerobomb.github.io/2020/02/18/leetcode-面试题32-III-从上到下打印二叉树III/">leetcode-面试题32-III-从上到下打印二叉树III</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/xu-lie-hua-er-cha-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 37. 序列化二叉树</a></td><td><a href="https://ferrerobomb.github.io/2020/02/17/leetcode-面试题37-序列化二叉树/">leetcode-面试题37-序列化二叉树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/ping-heng-er-cha-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 55 - II. 平衡二叉树</a></td><td><a href="https://ferrerobomb.github.io/2020/02/15/leetcode-面试题30-包含min函数的栈/">leetcode-面试题55-II-平衡二叉树</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/" target="_blank" rel="noopener">剑指 Offer 67. 把字符串转换成整数</a></td><td><a href="https://ferrerobomb.github.io/2020/02/19/leetcode-面试题67-把字符串转换成整数/">leetcode-面试题67-把字符串转换成整数</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-zui-jin-gong-gong-zu-xian-lcof/" target="_blank" rel="noopener">剑指 Offer 68 - I. 二叉搜索树的最近公共祖先</a></td><td><a href="https://ferrerobomb.github.io/2020/02/24/leetcode-面试题68-I二叉搜索树的最近公共祖先/">leetcode-面试题68-I二叉搜索树的最近公共祖先</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/er-cha-shu-de-zui-jin-gong-gong-zu-xian-lcof/" target="_blank" rel="noopener">剑指 Offer 68 - II. 二叉树的最近公共祖先</a></td><td><a href="https://ferrerobomb.github.io/2020/02/19/leetcode-面试题68-II二叉树的最近公共祖先/">leetcode-面试题68 - II. 二叉树的最近公共祖先</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/SsGoHC/" target="_blank" rel="noopener">剑指 Offer II 074. 合并区间</a></td><td><a href="https://ferrerobomb.github.io/2022/01/10/leetcode-剑指 Offer II 074. 合并区间/">leetcode-剑指 Offer II 074. 合并区间</a></td></tr><tr><td><a href="https://leetcode-cn.com/problems/palindrome-permutation-lcci/" target="_blank" rel="noopener">面试题 01.04. 回文排列</a></td><td><a href="https://ferrerobomb.github.io/2022/01/25/leetcode-面试题01-04-回文排列/">leetcode-面试题01.04.回文排列</a></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1672. 最富有客户的资产总量</title>
    <link href="https://ferrerobomb.github.io/2022/04/13/leetcode-1672.%20%E6%9C%80%E5%AF%8C%E6%9C%89%E5%AE%A2%E6%88%B7%E7%9A%84%E8%B5%84%E4%BA%A7%E6%80%BB%E9%87%8F/"/>
    <id>https://ferrerobomb.github.io/2022/04/13/leetcode-1672. 最富有客户的资产总量/</id>
    <published>2022-04-13T06:17:45.000Z</published>
    <updated>2022-04-15T06:18:16.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1672-最富有客户的资产总量"><a href="#leetcode-1672-最富有客户的资产总量" class="headerlink" title="leetcode-1672. 最富有客户的资产总量"></a>leetcode-1672. 最富有客户的资产总量</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个 m x n 的整数网格 accounts ，其中 accounts[i][j] 是第 i 位客户在第 j 家银行托管的资产数量。返回最富有客户所拥有的 资产总量 。</p><p>客户的 资产总量 就是他们在各家银行托管的资产数量之和。最富有客户就是 资产总量 最大的客户。</p><p>示例 1：</p><p>输入：accounts = [[1,2,3],[3,2,1]]<br>输出：6<br>解释：<br>第 1 位客户的资产总量 = 1 + 2 + 3 = 6<br>第 2 位客户的资产总量 = 3 + 2 + 1 = 6<br>两位客户都是最富有的，资产总量都是 6 ，所以返回 6 。<br>示例 2：</p><p>输入：accounts = [[1,5],[7,3],[3,5]]<br>输出：10<br>解释：<br>第 1 位客户的资产总量 = 6<br>第 2 位客户的资产总量 = 10<br>第 3 位客户的资产总量 = 8<br>第 2 位客户是最富有的，资产总量是 10<br>示例 3：</p><p>输入：accounts = [[2,8,7],[7,1,3],[1,9,5]]<br>输出：17</p><p>提示：</p><p>m == accounts.length<br>n == accounts[i].length<br>1 &lt;= m, n &lt;= 50<br>1 &lt;= accounts[i][j] &lt;= 100</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/richest-customer-wealth" target="_blank" rel="noopener">https://leetcode-cn.com/problems/richest-customer-wealth</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; accounts</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maximumWealth = <span class="function"><span class="keyword">function</span>(<span class="params">accounts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> maxWealth = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> personArray <span class="keyword">of</span> accounts) &#123;</span><br><span class="line">    maxWealth = <span class="built_in">Math</span>.max(maxWealth, personArray.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> maxWealth</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-771. 宝石与石头</title>
    <link href="https://ferrerobomb.github.io/2022/04/12/leetcode-771.%20%E5%AE%9D%E7%9F%B3%E4%B8%8E%E7%9F%B3%E5%A4%B4/"/>
    <id>https://ferrerobomb.github.io/2022/04/12/leetcode-771. 宝石与石头/</id>
    <published>2022-04-12T06:16:47.000Z</published>
    <updated>2022-04-15T06:17:13.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-771-宝石与石头"><a href="#leetcode-771-宝石与石头" class="headerlink" title="leetcode-771. 宝石与石头"></a>leetcode-771. 宝石与石头</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p> 给你一个字符串 jewels 代表石头中宝石的类型，另有一个字符串 stones 代表你拥有的石头。 stones 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。</p><p>字母区分大小写，因此 “a” 和 “A” 是不同类型的石头。</p><p>示例 1：</p><p>输入：jewels = “aA”, stones = “aAAbbbb”<br>输出：3<br>示例 2：</p><p>输入：jewels = “z”, stones = “ZZ”<br>输出：0</p><p>提示：</p><p>1 &lt;= jewels.length, stones.length &lt;= 50<br>jewels 和 stones 仅由英文字母组成<br>jewels 中的所有字符都是 唯一的</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/jewels-and-stones" target="_blank" rel="noopener">https://leetcode-cn.com/problems/jewels-and-stones</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; jewels</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; stones</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numJewelsInStones = <span class="function"><span class="keyword">function</span>(<span class="params">jewels, stones</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建宝石类型集合</span></span><br><span class="line">  <span class="keyword">const</span> jewelsSet = <span class="keyword">new</span> <span class="built_in">Set</span>(jewels.split(<span class="string">''</span>))</span><br><span class="line">  <span class="comment">// 返回sum</span></span><br><span class="line">  <span class="keyword">return</span> stones.split(<span class="string">''</span>).reduce(<span class="function">(<span class="params">sum, current</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// + 隐式转换</span></span><br><span class="line">    <span class="keyword">return</span> sum + jewelsSet.has(current)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-836. 矩形重叠</title>
    <link href="https://ferrerobomb.github.io/2022/04/11/leetcode-836.%20%E7%9F%A9%E5%BD%A2%E9%87%8D%E5%8F%A0/"/>
    <id>https://ferrerobomb.github.io/2022/04/11/leetcode-836. 矩形重叠/</id>
    <published>2022-04-11T06:14:36.000Z</published>
    <updated>2022-04-15T06:14:56.289Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-836-矩形重叠"><a href="#leetcode-836-矩形重叠" class="headerlink" title="leetcode-836. 矩形重叠"></a>leetcode-836. 矩形重叠</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>矩形以列表 [x1, y1, x2, y2] 的形式表示，其中 (x1, y1) 为左下角的坐标，(x2, y2) 是右上角的坐标。矩形的上下边平行于 x 轴，左右边平行于 y 轴。</p><p>如果相交的面积为 正 ，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。</p><p>给出两个矩形 rec1 和 rec2 。如果它们重叠，返回 true；否则，返回 false 。</p><p>示例 1：</p><p>输入：rec1 = [0,0,2,2], rec2 = [1,1,3,3]<br>输出：true<br>示例 2：</p><p>输入：rec1 = [0,0,1,1], rec2 = [1,0,2,1]<br>输出：false<br>示例 3：</p><p>输入：rec1 = [0,0,1,1], rec2 = [2,2,3,3]<br>输出：false</p><p>提示：</p><p>rect1.length == 4<br>rect2.length == 4<br>-109 &lt;= rec1[i], rec2[i] &lt;= 109<br>rec1 和 rec2 表示一个面积不为零的有效矩形</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/rectangle-overlap" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rectangle-overlap</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; rec1</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; rec2</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isRectangleOverlap = <span class="function"><span class="keyword">function</span>(<span class="params">rec1, rec2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// [x1, y1, x2, y2] 正坐标系</span></span><br><span class="line">    <span class="keyword">const</span> a = &#123;</span><br><span class="line">      x: rec1[<span class="number">0</span>],</span><br><span class="line">      y: rec1[<span class="number">1</span>],</span><br><span class="line">      w: rec1[<span class="number">2</span>] - rec1[<span class="number">0</span>],</span><br><span class="line">      h: rec1[<span class="number">3</span>] - rec1[<span class="number">1</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> b = &#123;</span><br><span class="line">      x: rec2[<span class="number">0</span>],</span><br><span class="line">      y: rec2[<span class="number">1</span>],</span><br><span class="line">      w: rec2[<span class="number">2</span>] - rec2[<span class="number">0</span>],</span><br><span class="line">      h: rec2[<span class="number">3</span>] - rec2[<span class="number">1</span>]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 不相交的情况取反即可，注意边界</span></span><br><span class="line">    <span class="keyword">return</span> !(a.x &gt;= b.x + b.w || b.x &gt;= a.x + a.w || a.y &gt;= b.y + b.h || b.y &gt;= a.y + a.h);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-832. 翻转图像</title>
    <link href="https://ferrerobomb.github.io/2022/04/10/leetcode-832.%20%E7%BF%BB%E8%BD%AC%E5%9B%BE%E5%83%8F/"/>
    <id>https://ferrerobomb.github.io/2022/04/10/leetcode-832. 翻转图像/</id>
    <published>2022-04-10T05:45:00.000Z</published>
    <updated>2022-04-15T05:45:12.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-832-翻转图像"><a href="#leetcode-832-翻转图像" class="headerlink" title="leetcode-832. 翻转图像"></a>leetcode-832. 翻转图像</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个 n x n 的二进制矩阵 image ，先 水平 翻转图像，然后 反转 图像并返回 结果 。</p><p>水平翻转图片就是将图片的每一行都进行翻转，即逆序。</p><p>例如，水平翻转 [1,1,0] 的结果是 [0,1,1]。<br>反转图片的意思是图片中的 0 全部被 1 替换， 1 全部被 0 替换。</p><p>例如，反转 [0,1,1] 的结果是 [1,0,0]。</p><p>示例 1：</p><p>输入：image = [[1,1,0],[1,0,1],[0,0,0]]<br>输出：[[1,0,0],[0,1,0],[1,1,1]]<br>解释：首先翻转每一行: [[0,1,1],[1,0,1],[0,0,0]]；<br>     然后反转图片: [[1,0,0],[0,1,0],[1,1,1]]<br>示例 2：</p><p>输入：image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]<br>输出：[[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]<br>解释：首先翻转每一行: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]；<br>     然后反转图片: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</p><p>提示：</p><p>n == image.length<br>n == image[i].length<br>1 &lt;= n &lt;= 20<br>images[i][j] == 0 或 1.</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/flipping-an-image" target="_blank" rel="noopener">https://leetcode-cn.com/problems/flipping-an-image</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; image</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> flipAndInvertImage = <span class="function"><span class="keyword">function</span>(<span class="params">image</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> n = image.length</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    思考所有情况，一共分为四种</span></span><br><span class="line"><span class="comment">    1. image[row][left] = 1，image[row][right] = 1，先翻转再翻转之后得image[row][left] = 0，image[row][right] = 0</span></span><br><span class="line"><span class="comment">    2. image[row][left] = 0，image[row][right] = 0，先翻转再翻转之后得image[row][left] = 1，image[row][right] = 1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3. image[row][left] = 1，image[row][right] = 0，先翻转再翻转之后得image[row][left] = 1，image[row][right] = 0</span></span><br><span class="line"><span class="comment">    4. image[row][left] = 0，image[row][right] = 1，先翻转再翻转之后得image[row][left] = 0，image[row][right] = 1</span></span><br><span class="line"><span class="comment">    得出结论，left与right，相同取反，不相同不用处理</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; n; row++) &#123;</span><br><span class="line">    <span class="comment">// 定义两个列指针left和right</span></span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>, right = n - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">      <span class="keyword">if</span> (image[row][left] === image[row][right]) &#123;</span><br><span class="line">        image[row][left] ^= <span class="number">1</span></span><br><span class="line">        image[row][right] ^= <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      left++</span><br><span class="line">      right--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理奇数列情况</span></span><br><span class="line">    <span class="keyword">if</span> (left === right) &#123;</span><br><span class="line">      image[row][left] ^= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> image;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-434. 字符串中的单词数</title>
    <link href="https://ferrerobomb.github.io/2022/04/09/leetcode-434.%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D%E6%95%B0/"/>
    <id>https://ferrerobomb.github.io/2022/04/09/leetcode-434. 字符串中的单词数/</id>
    <published>2022-04-09T15:51:57.000Z</published>
    <updated>2022-04-11T15:52:16.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-434-字符串中的单词数"><a href="#leetcode-434-字符串中的单词数" class="headerlink" title="leetcode-434. 字符串中的单词数"></a>leetcode-434. 字符串中的单词数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>统计字符串中的单词个数，这里的单词指的是连续的不是空格的字符。</p><p>请注意，你可以假定字符串里不包括任何不可打印的字符。</p><p>示例:</p><p>输入: “Hello, my name is John”<br>输出: 5<br>解释: 这里的单词是指连续的不是空格的字符，所以 “Hello,” 算作 1 个单词。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/number-of-segments-in-a-string" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-segments-in-a-string</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countSegments = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.split(<span class="string">" "</span>).filter(<span class="function"><span class="params">item</span> =&gt;</span> item).length</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-441. 排列硬币</title>
    <link href="https://ferrerobomb.github.io/2022/04/08/leetcode-441.%20%E6%8E%92%E5%88%97%E7%A1%AC%E5%B8%81/"/>
    <id>https://ferrerobomb.github.io/2022/04/08/leetcode-441. 排列硬币/</id>
    <published>2022-04-08T15:50:17.000Z</published>
    <updated>2022-04-11T15:51:11.138Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-441-排列硬币"><a href="#leetcode-441-排列硬币" class="headerlink" title="leetcode-441. 排列硬币"></a>leetcode-441. 排列硬币</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你总共有 n 枚硬币，并计划将它们按阶梯状排列。对于一个由 k 行组成的阶梯，其第 i 行必须正好有 i 枚硬币。阶梯的最后一行 可能 是不完整的。</p><p>给你一个数字 n ，计算并返回可形成 完整阶梯行 的总行数。</p><p>示例 1：</p><p>输入：n = 5<br>输出：2<br>解释：因为第三行不完整，所以返回 2 。<br>示例 2：</p><p>输入：n = 8<br>输出：3<br>解释：因为第四行不完整，所以返回 3 。</p><p>提示：</p><p>1 &lt;= n &lt;= 231 - 1</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/arranging-coins" target="_blank" rel="noopener">https://leetcode-cn.com/problems/arranging-coins</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法1：直接法</span></span><br><span class="line"><span class="keyword">var</span> arrangeCoins = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前层数</span></span><br><span class="line">  <span class="keyword">let</span> laddder = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 当前层可容纳个数</span></span><br><span class="line">  <span class="keyword">let</span> currentNum = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (n &gt;= currentNum) &#123;</span><br><span class="line">    n -= currentNum</span><br><span class="line">    currentNum++</span><br><span class="line">    laddder++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> laddder</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(arrangeCoins(9));</span></span><br></pre></td></tr></table></figure><h2 id="解2"><a href="#解2" class="headerlink" title="解2"></a>解2</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法2：等差数列求和公式反推</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 等差数列前x项和：xa1 + x(x-1)d/2 </span></span><br><span class="line"><span class="comment"> 本题首项a1和公差d都为1</span></span><br><span class="line"><span class="comment"> 所以前x项和为：x(x+1)/2</span></span><br><span class="line"><span class="comment"> 解读题意可知：x即为层数，x(x+1)/2即为硬币总个数，设为n</span></span><br><span class="line"><span class="comment"> 由于x为整数，且向下取整（没有半个硬币）</span></span><br><span class="line"><span class="comment"> 易知，x(x+1)/2 &lt;= n</span></span><br><span class="line"><span class="comment"> 解方程即可得出x</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">var</span> arrangeCoins = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((<span class="built_in">Math</span>.sqrt(<span class="number">1</span> + <span class="number">8.0</span> * n) - <span class="number">1</span>) / <span class="number">2</span>) | <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(arrangeCoins(9));</span></span><br></pre></td></tr></table></figure><h2 id="解3"><a href="#解3" class="headerlink" title="解3"></a>解3</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法3：二分等差数列求和</span></span><br><span class="line"><span class="keyword">var</span> arrangeCoins = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(arrangeCoins(9));</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-511. 游戏玩法分析 I</title>
    <link href="https://ferrerobomb.github.io/2022/04/07/leetcode-511.%20%E6%B8%B8%E6%88%8F%E7%8E%A9%E6%B3%95%E5%88%86%E6%9E%90%20I/"/>
    <id>https://ferrerobomb.github.io/2022/04/07/leetcode-511. 游戏玩法分析 I/</id>
    <published>2022-04-07T15:48:17.000Z</published>
    <updated>2022-04-11T15:48:52.113Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-511-游戏玩法分析-I"><a href="#leetcode-511-游戏玩法分析-I" class="headerlink" title="leetcode-511. 游戏玩法分析 I"></a>leetcode-511. 游戏玩法分析 I</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Activity (player_id int, device_id int, event_date date, games_played int)</span><br><span class="line">Truncate table Activity</span><br><span class="line">insert into Activity (player_id, device_id, event_date, games_played) values (&apos;1&apos;, &apos;2&apos;, &apos;2016-03-01&apos;, &apos;5&apos;)</span><br><span class="line">insert into Activity (player_id, device_id, event_date, games_played) values (&apos;1&apos;, &apos;2&apos;, &apos;2016-05-02&apos;, &apos;6&apos;)</span><br><span class="line">insert into Activity (player_id, device_id, event_date, games_played) values (&apos;2&apos;, &apos;3&apos;, &apos;2017-06-25&apos;, &apos;1&apos;)</span><br><span class="line">insert into Activity (player_id, device_id, event_date, games_played) values (&apos;3&apos;, &apos;1&apos;, &apos;2016-03-02&apos;, &apos;0&apos;)</span><br><span class="line">insert into Activity (player_id, device_id, event_date, games_played) values (&apos;3&apos;, &apos;4&apos;, &apos;2018-07-03&apos;, &apos;5&apos;)</span><br></pre></td></tr></table></figure><p>+————–+———+<br>| Column Name  | Type    |<br>+————–+———+<br>| player_id    | int     |<br>| device_id    | int     |<br>| event_date   | date    |<br>| games_played | int     |<br>+————–+———+<br>表的主键是 (player_id, event_date)。<br>这张表展示了一些游戏玩家在游戏平台上的行为活动。<br>每行数据记录了一名玩家在退出平台之前，当天使用同一台设备登录平台后打开的游戏的数目（可能是 0 个）。</p><p>写一条 SQL 查询语句获取每位玩家 第一次登陆平台的日期。</p><p>查询结果的格式如下所示：</p><p>Activity 表：<br>+———–+———–+————+————–+<br>| player_id | device_id | event_date | games_played |<br>+———–+———–+————+————–+<br>| 1         | 2         | 2016-03-01 | 5            |<br>| 1         | 2         | 2016-05-02 | 6            |<br>| 2         | 3         | 2017-06-25 | 1            |<br>| 3         | 1         | 2016-03-02 | 0            |<br>| 3         | 4         | 2018-07-03 | 5            |<br>+———–+———–+————+————–+</p><p>Result 表：<br>+———–+————-+<br>| player_id | first_login |<br>+———–+————-+<br>| 1         | 2016-03-01  |<br>| 2         | 2017-06-25  |<br>| 3         | 2016-03-02  |<br>+———–+————-+</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/game-play-analysis-i" target="_blank" rel="noopener">https://leetcode-cn.com/problems/game-play-analysis-i</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">SELECT</span> player_id, <span class="keyword">min</span>(event_date) <span class="keyword">as</span> first_login</span><br><span class="line"><span class="keyword">FROM</span> Activity</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> player_id</span><br><span class="line"><span class="keyword">limit</span> <span class="number">500</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-627. 变更性别</title>
    <link href="https://ferrerobomb.github.io/2022/04/06/leetcode-627.%20%E5%8F%98%E6%9B%B4%E6%80%A7%E5%88%AB/"/>
    <id>https://ferrerobomb.github.io/2022/04/06/leetcode-627. 变更性别/</id>
    <published>2022-04-06T15:46:52.000Z</published>
    <updated>2022-04-11T15:47:36.162Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-627-变更性别"><a href="#leetcode-627-变更性别" class="headerlink" title="leetcode-627. 变更性别"></a>leetcode-627. 变更性别</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Salary (id int, name varchar(100), sex char(1), salary int)</span><br><span class="line">Truncate table salary</span><br><span class="line">insert into salary (id, name, sex, salary) values (&apos;1&apos;, &apos;A&apos;, &apos;m&apos;, &apos;2500&apos;)</span><br><span class="line">insert into salary (id, name, sex, salary) values (&apos;2&apos;, &apos;B&apos;, &apos;f&apos;, &apos;1500&apos;)</span><br><span class="line">insert into salary (id, name, sex, salary) values (&apos;3&apos;, &apos;C&apos;, &apos;m&apos;, &apos;5500&apos;)</span><br><span class="line">insert into salary (id, name, sex, salary) values (&apos;4&apos;, &apos;D&apos;, &apos;f&apos;, &apos;500&apos;)</span><br></pre></td></tr></table></figure><p>+————-+———-+<br>| Column Name | Type     |<br>+————-+———-+<br>| id          | int      |<br>| name        | varchar  |<br>| sex         | ENUM     |<br>| salary      | int      |<br>+————-+———-+<br>id 是这个表的主键。<br>sex 这一列的值是 ENUM 类型，只能从 (‘m’, ‘f’) 中取。<br>本表包含公司雇员的信息。</p><p>请你编写一个 SQL 查询来交换所有的 ‘f’ 和 ‘m’ （即，将所有 ‘f’ 变为 ‘m’ ，反之亦然），仅使用 单个 update 语句 ，且不产生中间临时表。</p><p>注意，你必须仅使用一条 update 语句，且 不能 使用 select 语句。</p><p>查询结果如下例所示。</p><p>示例 1:</p><p>输入：<br>Salary 表：<br>+—-+——+—–+——–+<br>| id | name | sex | salary |<br>+—-+——+—–+——–+<br>| 1  | A    | m   | 2500   |<br>| 2  | B    | f   | 1500   |<br>| 3  | C    | m   | 5500   |<br>| 4  | D    | f   | 500    |<br>+—-+——+—–+——–+<br>输出：<br>+—-+——+—–+——–+<br>| id | name | sex | salary |<br>+—-+——+—–+——–+<br>| 1  | A    | f   | 2500   |<br>| 2  | B    | m   | 1500   |<br>| 3  | C    | f   | 5500   |<br>| 4  | D    | m   | 500    |<br>+—-+——+—–+——–+<br>解释：<br>(1, A) 和 (3, C) 从 ‘m’ 变为 ‘f’ 。<br>(2, B) 和 (4, D) 从 ‘f’ 变为 ‘m’ 。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/swap-salary" target="_blank" rel="noopener">https://leetcode-cn.com/problems/swap-salary</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Write your MySQL query statement below</span></span><br><span class="line"><span class="keyword">update</span> Salary</span><br><span class="line"><span class="keyword">set</span> </span><br><span class="line">    sex = <span class="keyword">case</span> sex</span><br><span class="line">        <span class="keyword">when</span> <span class="string">'m'</span> <span class="keyword">then</span> <span class="string">'f'</span></span><br><span class="line">        <span class="keyword">else</span> <span class="string">'m'</span></span><br><span class="line">    <span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-746. 使用最小花费爬楼梯</title>
    <link href="https://ferrerobomb.github.io/2022/04/05/leetcode-746.%20%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
    <id>https://ferrerobomb.github.io/2022/04/05/leetcode-746. 使用最小花费爬楼梯/</id>
    <published>2022-04-05T15:45:18.000Z</published>
    <updated>2022-04-11T15:46:07.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-746-使用最小花费爬楼梯"><a href="#leetcode-746-使用最小花费爬楼梯" class="headerlink" title="leetcode-746. 使用最小花费爬楼梯"></a>leetcode-746. 使用最小花费爬楼梯</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数数组 cost ，其中 cost[i] 是从楼梯第 i 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</p><p>你可以选择从下标为 0 或下标为 1 的台阶开始爬楼梯。</p><p>请你计算并返回达到楼梯顶部的最低花费。</p><p>示例 1：</p><p>输入：cost = [10,15,20]<br>输出：15<br>解释：你将从下标为 1 的台阶开始。</p><ul><li>支付 15 ，向上爬两个台阶，到达楼梯顶部。<br>总花费为 15 。<br>示例 2：</li></ul><p>输入：cost = [1,100,1,1,1,100,1,1,100,1]<br>输出：6<br>解释：你将从下标为 0 的台阶开始。</p><ul><li>支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。</li><li>支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。</li><li>支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。</li><li>支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。</li><li>支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。</li><li>支付 1 ，向上爬一个台阶，到达楼梯顶部。<br>总花费为 6 。</li></ul><p>提示：</p><p>2 &lt;= cost.length &lt;= 1000<br>0 &lt;= cost[i] &lt;= 999</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/min-cost-climbing-stairs" target="_blank" rel="noopener">https://leetcode-cn.com/problems/min-cost-climbing-stairs</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; cost</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minCostClimbingStairs = <span class="function"><span class="keyword">function</span>(<span class="params">cost</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = cost.length</span><br><span class="line">  <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>).fill(<span class="number">0</span>)</span><br><span class="line">  <span class="comment">// 起步两个0</span></span><br><span class="line">  dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">  dp[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line">  <span class="comment">// dp[2] = Math.min(dp[1] + cost[1], dp[0] + cost[0]); </span></span><br><span class="line">  <span class="comment">// dp[3] = Math.min(dp[2] + cost[2], dp[1] + cost[1]);</span></span><br><span class="line">  <span class="comment">// dp[4] = Math.min(dp[3] + cost[3], dp[2] + cost[2]);</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="comment">// 当前楼梯需要多少花费 = Math.min( 爬到前一层的累计最小花费+当前层花费， 爬到前两层的累计的最小花费+前一层的花费       ）</span></span><br><span class="line">    dp[i] = <span class="built_in">Math</span>.min(dp[i - <span class="number">1</span>] + cost[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + cost[i - <span class="number">2</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// console.log(dp[n]);</span></span><br><span class="line">  <span class="keyword">return</span> dp[n]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-292. Nim 游戏</title>
    <link href="https://ferrerobomb.github.io/2022/04/04/leetcode-292.%20Nim%20%E6%B8%B8%E6%88%8F/"/>
    <id>https://ferrerobomb.github.io/2022/04/04/leetcode-292. Nim 游戏/</id>
    <published>2022-04-04T14:05:33.000Z</published>
    <updated>2022-04-08T14:05:55.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-292-Nim-游戏"><a href="#leetcode-292-Nim-游戏" class="headerlink" title="leetcode-292. Nim 游戏"></a>leetcode-292. Nim 游戏</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你和你的朋友，两个人一起玩 Nim 游戏：</p><p>桌子上有一堆石头。<br>你们轮流进行自己的回合， 你作为先手 。<br>每一回合，轮到的人拿掉 1 - 3 块石头。<br>拿掉最后一块石头的人就是获胜者。<br>假设你们每一步都是最优解。请编写一个函数，来判断你是否可以在给定石头数量为 n 的情况下赢得游戏。如果可以赢，返回 true；否则，返回 false 。</p><p>示例 1：</p><p>输入：n = 4<br>输出：false<br>解释：以下是可能的结果:</p><ol><li>移除1颗石头。你的朋友移走了3块石头，包括最后一块。你的朋友赢了。</li><li>移除2个石子。你的朋友移走2块石头，包括最后一块。你的朋友赢了。<br>3.你移走3颗石子。你的朋友移走了最后一块石头。你的朋友赢了。<br>在所有结果中，你的朋友是赢家。<br>示例 2：</li></ol><p>输入：n = 1<br>输出：true<br>示例 3：</p><p>输入：n = 2<br>输出：true</p><p>提示：</p><p>1 &lt;= n &lt;= 231 - 1</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/nim-game" target="_blank" rel="noopener">https://leetcode-cn.com/problems/nim-game</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> canWinNim = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">4</span> !== <span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-796. 旋转字符串</title>
    <link href="https://ferrerobomb.github.io/2022/04/03/leetcode-796.%20%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://ferrerobomb.github.io/2022/04/03/leetcode-796. 旋转字符串/</id>
    <published>2022-04-03T14:04:07.000Z</published>
    <updated>2022-04-08T14:05:10.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-796-旋转字符串"><a href="#leetcode-796-旋转字符串" class="headerlink" title="leetcode-796. 旋转字符串"></a>leetcode-796. 旋转字符串</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个字符串, s 和 goal。如果在若干次旋转操作之后，s 能变成 goal ，那么返回 true 。</p><p>s 的 旋转操作 就是将 s 最左边的字符移动到最右边。 </p><p>例如, 若 s = ‘abcde’，在旋转一次之后结果就是’bcdea’ 。</p><p>示例 1:</p><p>输入: s = “abcde”, goal = “cdeab”<br>输出: true<br>示例 2:</p><p>输入: s = “abcde”, goal = “abced”<br>输出: false</p><p>提示:</p><p>1 &lt;= s.length, goal.length &lt;= 100<br>s 和 goal 由小写英文字母组成</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/rotate-string" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rotate-string</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; goal</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法一，模拟的一种</span></span><br><span class="line"> <span class="keyword">var</span> rotateString = <span class="function"><span class="keyword">function</span>(<span class="params">s, goal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sLen = s.length</span><br><span class="line">  <span class="keyword">let</span> goalLen = goal.length</span><br><span class="line">  <span class="keyword">if</span> (sLen !== goalLen) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sLen; i++) &#123;</span><br><span class="line">    <span class="comment">// 转数组以使用数组方法</span></span><br><span class="line">    s = s.split(<span class="string">''</span>)</span><br><span class="line">    <span class="comment">// 截取第一位</span></span><br><span class="line">    <span class="keyword">const</span> temp = s.splice(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// 放入末尾，转为字符串</span></span><br><span class="line">    s = s.concat(temp).join(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">if</span> (s === goal) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2，s+s包含了所有旋转的情况</span></span><br><span class="line"><span class="keyword">var</span> rotateString = <span class="function"><span class="keyword">function</span>(<span class="params">s, goal</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s.length === goal.length &amp;&amp; (s + s).indexOf(goal) !== <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(rotateString("abcde","cdeab"));</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-389. 找不同</title>
    <link href="https://ferrerobomb.github.io/2022/04/02/leetcode-389.%20%E6%89%BE%E4%B8%8D%E5%90%8C/"/>
    <id>https://ferrerobomb.github.io/2022/04/02/leetcode-389. 找不同/</id>
    <published>2022-04-02T14:03:25.000Z</published>
    <updated>2022-04-08T14:04:18.342Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-389-找不同"><a href="#leetcode-389-找不同" class="headerlink" title="leetcode-389. 找不同"></a>leetcode-389. 找不同</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定两个字符串 s 和 t ，它们只包含小写字母。</p><p>字符串 t 由字符串 s 随机重排，然后在随机位置添加一个字母。</p><p>请找出在 t 中被添加的字母。</p><p>示例 1：</p><p>输入：s = “abcd”, t = “abcde”<br>输出：”e”<br>解释：’e’ 是那个被添加的字母。<br>示例 2：</p><p>输入：s = “”, t = “y”<br>输出：”y”</p><p>提示：</p><p>0 &lt;= s.length &lt;= 1000<br>t.length == s.length + 1<br>s 和 t 只包含小写字母</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/find-the-difference" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-the-difference</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; t</span></span><br><span class="line"><span class="comment"> * @return &#123;character&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法1，哈希</span></span><br><span class="line"><span class="comment">// 方法2，排序数组之后，顺序匹配</span></span><br><span class="line"><span class="comment">// 方法3，两个字符串相加，问题转化为“查找只出现一次的字母”，使用位运算异或</span></span><br><span class="line"><span class="keyword">var</span> findTheDifference = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ret = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> char <span class="keyword">of</span> s) &#123;</span><br><span class="line">    ret ^= char.charCodeAt()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> char <span class="keyword">of</span> t) &#123;</span><br><span class="line">    ret ^= char.charCodeAt()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">String</span>.fromCharCode(ret)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-392. 判断子序列</title>
    <link href="https://ferrerobomb.github.io/2022/04/01/leetcode-392.%20%E5%88%A4%E6%96%AD%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>https://ferrerobomb.github.io/2022/04/01/leetcode-392. 判断子序列/</id>
    <published>2022-04-01T06:48:55.000Z</published>
    <updated>2022-04-04T06:49:23.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-392-判断子序列"><a href="#leetcode-392-判断子序列" class="headerlink" title="leetcode-392. 判断子序列"></a>leetcode-392. 判断子序列</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定字符串 s 和 t ，判断 s 是否为 t 的子序列。</p><p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，”ace”是”abcde”的一个子序列，而”aec”不是）。</p><p>进阶：</p><p>如果有大量输入的 S，称作 S1, S2, … , Sk 其中 k &gt;= 10亿，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？</p><p>致谢：</p><p>特别感谢 @pbrother 添加此问题并且创建所有测试用例。</p><p>示例 1：</p><p>输入：s = “abc”, t = “ahbgdc”<br>输出：true<br>示例 2：</p><p>输入：s = “axc”, t = “ahbgdc”<br>输出：false</p><p>提示：</p><p>0 &lt;= s.length &lt;= 100<br>0 &lt;= t.length &lt;= 10^4<br>两个字符串都只由小写字符组成。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/is-subsequence" target="_blank" rel="noopener">https://leetcode-cn.com/problems/is-subsequence</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; t</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isSubsequence = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// s -&gt; t ?</span></span><br><span class="line">  <span class="keyword">let</span> pParent = <span class="number">0</span> </span><br><span class="line">  <span class="keyword">let</span> pChild = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (pParent &lt;= t.length &amp;&amp; pChild &lt;= s.length) &#123;</span><br><span class="line">    <span class="comment">// 首位不相等</span></span><br><span class="line">    <span class="keyword">if</span> (t[pParent] !== s[pChild]) &#123;</span><br><span class="line">      <span class="comment">// 父串指针++</span></span><br><span class="line">      pParent++</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 相等</span></span><br><span class="line">    pParent++</span><br><span class="line">    pChild++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pChild &gt; s.length</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(isSubsequence("abc","ahbgdc"));</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-728. 自除数</title>
    <link href="https://ferrerobomb.github.io/2022/03/31/leetcode-728.%20%E8%87%AA%E9%99%A4%E6%95%B0/"/>
    <id>https://ferrerobomb.github.io/2022/03/31/leetcode-728. 自除数/</id>
    <published>2022-03-30T16:02:46.000Z</published>
    <updated>2022-03-31T16:03:27.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-728-自除数"><a href="#leetcode-728-自除数" class="headerlink" title="leetcode-728. 自除数"></a>leetcode-728. 自除数</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>自除数 是指可以被它包含的每一位数整除的数。</p><p>例如，128 是一个 自除数 ，因为 128 % 1 == 0，128 % 2 == 0，128 % 8 == 0。<br>自除数 不允许包含 0 。</p><p>给定两个整数 left 和 right ，返回一个列表，列表的元素是范围 [left, right] 内所有的 自除数 。</p><p>示例 1：</p><p>输入：left = 1, right = 22<br>输出：[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]<br>示例 2:</p><p>输入：left = 47, right = 85<br>输出：[48,55,66,77]</p><p>提示：</p><p>1 &lt;= left &lt;= right &lt;= 104</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/self-dividing-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/self-dividing-numbers</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; left</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; right</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> selfDividingNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> calculate = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> array = num.toString().split(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (num % array[i] !== <span class="number">0</span> || array[i] === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> num = left; num &lt;= right; num++) &#123;</span><br><span class="line">    <span class="keyword">let</span> isSelfDivisor = calculate(num)</span><br><span class="line">    <span class="keyword">if</span>(isSelfDivisor) &#123;</span><br><span class="line">      res.push(num)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-169. 多数元素</title>
    <link href="https://ferrerobomb.github.io/2022/03/30/leetcode-169.%20%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/"/>
    <id>https://ferrerobomb.github.io/2022/03/30/leetcode-169. 多数元素/</id>
    <published>2022-03-30T13:27:41.000Z</published>
    <updated>2022-03-30T13:28:25.239Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-169-多数元素"><a href="#leetcode-169-多数元素" class="headerlink" title="leetcode-169. 多数元素"></a>leetcode-169. 多数元素</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ n/2 ⌋ 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><p>示例 1：</p><p>输入：[3,2,3]<br>输出：3<br>示例 2：</p><p>输入：[2,2,1,1,1,2,2]<br>输出：2</p><p>进阶：</p><p>尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/majority-element" target="_blank" rel="noopener">https://leetcode-cn.com/problems/majority-element</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Boyer-Moore 投票算法（多数投票算法）</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> majorityElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> majority = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">0</span>) majority = nums[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nums[i] === majority) n++</span><br><span class="line">    <span class="keyword">else</span> n--   </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> majority</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="解2"><a href="#解2" class="headerlink" title="解2"></a>解2</h2><p>哈希</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-1004. 最大连续1的个数 III</title>
    <link href="https://ferrerobomb.github.io/2022/03/29/leetcode-1004.%20%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0%20III/"/>
    <id>https://ferrerobomb.github.io/2022/03/29/leetcode-1004. 最大连续1的个数 III/</id>
    <published>2022-03-29T15:22:26.000Z</published>
    <updated>2022-03-29T15:23:14.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-1004-最大连续1的个数-III"><a href="#leetcode-1004-最大连续1的个数-III" class="headerlink" title="leetcode-1004. 最大连续1的个数 III"></a>leetcode-1004. 最大连续1的个数 III</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个二进制数组 nums 和一个整数 k，如果可以翻转最多 k 个 0 ，则返回 数组中连续 1 的最大个数 。</p><p>示例 1：</p><p>输入：nums = [1,1,1,0,0,0,1,1,1,1,0], K = 2<br>输出：6<br>解释：[1,1,1,0,0,1,1,1,1,1,1]<br>粗体数字从 0 翻转到 1，最长的子数组长度为 6。<br>示例 2：</p><p>输入：nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3<br>输出：10<br>解释：[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]<br>粗体数字从 0 翻转到 1，最长的子数组长度为 10。</p><p>提示：</p><p>1 &lt;= nums.length &lt;= 105<br>nums[i] 不是 0 就是 1<br>0 &lt;= k &lt;= nums.length</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/max-consecutive-ones-iii" target="_blank" rel="noopener">https://leetcode-cn.com/problems/max-consecutive-ones-iii</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 滑动窗口模板 */</span> </span><br><span class="line"><span class="comment">// function slidingWindowTemplate(nums) &#123;</span></span><br><span class="line"><span class="comment">//   /* 滑动窗口模板 */ </span></span><br><span class="line"><span class="comment">//   let N = nums.length // 数组/字符串长度</span></span><br><span class="line"><span class="comment">//   left, right = 0, 0 // 双指针，表示当前遍历的区间[left, right]，闭区间</span></span><br><span class="line"><span class="comment">//   sums = 0 // 用于统计 子数组/子区间 是否有效，根据题目可能会改成求和/计数</span></span><br><span class="line"><span class="comment">//   res = 0 // 保存最大的满足题目要求的 子数组/子串 长度</span></span><br><span class="line"><span class="comment">//   while(right &lt; N) &#123; // 当右边的指针没有搜索到 数组/字符串 的结尾</span></span><br><span class="line"><span class="comment">//     sums += nums[right] // 增加当前右边指针的数字/字符的求和/计数</span></span><br><span class="line"><span class="comment">//     // 以下为滑动窗口</span></span><br><span class="line"><span class="comment">//     while(/*区间[left, right]不符合题意*/1) &#123; // 此时需要一直移动左指针，直至找到一个符合题意的区间</span></span><br><span class="line"><span class="comment">//       sums -= nums[left] // 移动左指针前需要从counter中减少left位置字符的求和/计数</span></span><br><span class="line"><span class="comment">//       left += 1 // 真正的移动左指针，注意不能跟上面一行代码写反</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     // 到 while 结束时，我们找到了一个符合题意要求的 子数组/子串</span></span><br><span class="line"><span class="comment">//     res = Math.max(res, right - left + 1) // 需要更新结果</span></span><br><span class="line"><span class="comment">//     right += 1 // 移动右指针，去探索新的区间</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">//   return res</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3</span></span><br><span class="line"><span class="comment">// 如果不理解的话，不要嫌麻烦，按照图示走一遍会清晰很多</span></span><br><span class="line"><span class="keyword">var</span> longestOnes = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> n = nums.length</span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>, right = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> sums = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(right &lt; n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[right] === <span class="number">0</span>) &#123;</span><br><span class="line">      sums++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(sums &gt; k) &#123;</span><br><span class="line">      <span class="keyword">if</span> (nums[left] === <span class="number">0</span>) &#123;  </span><br><span class="line">        sums--</span><br><span class="line">      &#125;</span><br><span class="line">      left++</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="built_in">Math</span>.max(res, right - left + <span class="number">1</span>)</span><br><span class="line">    right++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(longestOnes([0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], 3));</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-58. 最后一个单词的长度</title>
    <link href="https://ferrerobomb.github.io/2022/03/28/leetcode-58.%20%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/"/>
    <id>https://ferrerobomb.github.io/2022/03/28/leetcode-58. 最后一个单词的长度/</id>
    <published>2022-03-28T15:57:25.000Z</published>
    <updated>2022-03-28T15:57:50.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-58-最后一个单词的长度"><a href="#leetcode-58-最后一个单词的长度" class="headerlink" title="leetcode-58. 最后一个单词的长度"></a>leetcode-58. 最后一个单词的长度</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给你一个字符串 s，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中 最后一个 单词的长度。</p><p>单词 是指仅由字母组成、不包含任何空格字符的最大子字符串。</p><p>示例 1：</p><p>输入：s = “Hello World”<br>输出：5<br>解释：最后一个单词是“World”，长度为5。<br>示例 2：</p><p>输入：s = “   fly me   to   the moon  “<br>输出：4<br>解释：最后一个单词是“moon”，长度为4。<br>示例 3：</p><p>输入：s = “luffy is still joyboy”<br>输出：6<br>解释：最后一个单词是长度为6的“joyboy”。</p><p>提示：</p><p>1 &lt;= s.length &lt;= 104<br>s 仅有英文字母和空格 ‘ ‘ 组成<br>s 中至少存在一个单词</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/length-of-last-word" target="_blank" rel="noopener">https://leetcode-cn.com/problems/length-of-last-word</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLastWord = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = s.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (s[index] === <span class="string">' '</span>) &#123;</span><br><span class="line">    index--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> wordLength = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (index &gt;= <span class="number">0</span> &amp;&amp; s[index] !== <span class="string">' '</span>) &#123;</span><br><span class="line">    wordLength++;</span><br><span class="line">    index--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> wordLength;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLastWord = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 匹配所有单词，放进一个数组</span></span><br><span class="line">  <span class="keyword">let</span> letter = s.match(<span class="regexp">/\w+/g</span>);</span><br><span class="line">  <span class="keyword">return</span> letter[letter.length - <span class="number">1</span>].length;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方法三</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLastWord = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// trim()去掉字符串头尾的空格</span></span><br><span class="line">  <span class="comment">// split(" ")这种写法不管单词之间有几个空格，一律按一个空格算，所以不会有多余的空格，</span></span><br><span class="line">  <span class="comment">// 不过本题即使有也不影响，因为直接使用at(-1)取最后一个单词</span></span><br><span class="line">  <span class="comment">// 注意 项目中不要使用at()因为兼容性还差很多</span></span><br><span class="line">  <span class="keyword">return</span> s.trim().split(<span class="string">" "</span>).at(<span class="number">-1</span>).length</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-66. 加一</title>
    <link href="https://ferrerobomb.github.io/2022/03/27/leetcode-66.%E5%8A%A0%E4%B8%80/"/>
    <id>https://ferrerobomb.github.io/2022/03/27/leetcode-66.加一/</id>
    <published>2022-03-27T15:58:50.000Z</published>
    <updated>2022-03-28T15:59:00.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-66-加一"><a href="#leetcode-66-加一" class="headerlink" title="leetcode-66. 加一"></a>leetcode-66. 加一</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个由 整数 组成的 非空 数组所表示的非负整数，在该数的基础上加一。</p><p>最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。</p><p>你可以假设除了整数 0 之外，这个整数不会以零开头。</p><p>示例 1：</p><p>输入：digits = [1,2,3]<br>输出：[1,2,4]<br>解释：输入数组表示数字 123。<br>示例 2：</p><p>输入：digits = [4,3,2,1]<br>输出：[4,3,2,2]<br>解释：输入数组表示数字 4321。<br>示例 3：</p><p>输入：digits = [0]<br>输出：[1]</p><p>提示：</p><p>1 &lt;= digits.length &lt;= 100<br>0 &lt;= digits[i] &lt;= 9</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/plus-one" target="_blank" rel="noopener">https://leetcode-cn.com/problems/plus-one</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; digits</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> plusOne = <span class="function"><span class="keyword">function</span>(<span class="params">digits</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = digits.length</span><br><span class="line">  <span class="keyword">let</span> curry = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (digits[i] !== <span class="number">9</span>) &#123;</span><br><span class="line">      ++digits[i]</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">        digits[j] = <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> digits</span><br><span class="line">    &#125;   </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 都为9</span></span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">new</span> <span class="built_in">Array</span>(len+<span class="number">1</span>).fill(<span class="number">0</span>)</span><br><span class="line">  res[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode-682. 棒球比赛</title>
    <link href="https://ferrerobomb.github.io/2022/03/26/leetcode-682.%20%E6%A3%92%E7%90%83%E6%AF%94%E8%B5%9B/"/>
    <id>https://ferrerobomb.github.io/2022/03/26/leetcode-682. 棒球比赛/</id>
    <published>2022-03-26T14:35:50.000Z</published>
    <updated>2022-03-26T14:36:06.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="leetcode-682-棒球比赛"><a href="#leetcode-682-棒球比赛" class="headerlink" title="leetcode-682. 棒球比赛"></a>leetcode-682. 棒球比赛</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。</p><p>比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表 ops，其中 ops[i] 是你需要记录的第 i 项操作，ops 遵循下述规则：</p><p>整数 x - 表示本回合新获得分数 x<br>“+” - 表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。<br>“D” - 表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。<br>“C” - 表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。<br>请你返回记录中所有得分的总和。</p><p>示例 1：</p><p>输入：ops = [“5”,”2”,”C”,”D”,”+”]<br>输出：30<br>解释：<br>“5” - 记录加 5 ，记录现在是 [5]<br>“2” - 记录加 2 ，记录现在是 [5, 2]<br>“C” - 使前一次得分的记录无效并将其移除，记录现在是 [5].<br>“D” - 记录加 2 * 5 = 10 ，记录现在是 [5, 10].<br>“+” - 记录加 5 + 10 = 15 ，记录现在是 [5, 10, 15].<br>所有得分的总和 5 + 10 + 15 = 30<br>示例 2：</p><p>输入：ops = [“5”,”-2”,”4”,”C”,”D”,”9”,”+”,”+”]<br>输出：27<br>解释：<br>“5” - 记录加 5 ，记录现在是 [5]<br>“-2” - 记录加 -2 ，记录现在是 [5, -2]<br>“4” - 记录加 4 ，记录现在是 [5, -2, 4]<br>“C” - 使前一次得分的记录无效并将其移除，记录现在是 [5, -2]<br>“D” - 记录加 2 * -2 = -4 ，记录现在是 [5, -2, -4]<br>“9” - 记录加 9 ，记录现在是 [5, -2, -4, 9]<br>“+” - 记录加 -4 + 9 = 5 ，记录现在是 [5, -2, -4, 9, 5]<br>“+” - 记录加 9 + 5 = 14 ，记录现在是 [5, -2, -4, 9, 5, 14]<br>所有得分的总和 5 + -2 + -4 + 9 + 5 + 14 = 27<br>示例 3：</p><p>输入：ops = [“1”]<br>输出：1</p><p>提示：</p><p>1 &lt;= ops.length &lt;= 1000<br>ops[i] 为 “C”、”D”、”+”，或者一个表示整数的字符串。整数范围是 [-3 <em> 104, 3 </em> 104]<br>对于 “+” 操作，题目数据保证记录此操作时前面总是存在两个有效的分数<br>对于 “C” 和 “D” 操作，题目数据保证记录此操作时前面总是存在一个有效的分数</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/baseball-game" target="_blank" rel="noopener">https://leetcode-cn.com/problems/baseball-game</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解1"><a href="#解1" class="headerlink" title="解1"></a>解1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string[]&#125; ops</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">var</span> calPoints = <span class="function"><span class="keyword">function</span>(<span class="params">ops</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> points = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ops.length; i++) &#123;</span><br><span class="line">    currentScore = ops[i];</span><br><span class="line">    <span class="keyword">const</span> n = points.length</span><br><span class="line">    <span class="keyword">switch</span>(currentScore) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'+'</span>: </span><br><span class="line">      sum += points[n - <span class="number">1</span>] + points[n - <span class="number">2</span>]</span><br><span class="line">      points.push(points[n - <span class="number">1</span>] + points[n - <span class="number">2</span>]);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'D'</span>: </span><br><span class="line">      sum += points[n - <span class="number">1</span>] * <span class="number">2</span></span><br><span class="line">      points.push(points[n - <span class="number">1</span>] * <span class="number">2</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'C'</span>: </span><br><span class="line">      sum -= points[n - <span class="number">1</span>]</span><br><span class="line">      points.pop();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>: </span><br><span class="line">      sum += <span class="built_in">Number</span>(currentScore)</span><br><span class="line">      points.push(<span class="built_in">Number</span>(currentScore));</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lastScore = currentScore</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="leetcode" scheme="https://ferrerobomb.github.io/tags/leetcode/"/>
    
  </entry>
  
</feed>
